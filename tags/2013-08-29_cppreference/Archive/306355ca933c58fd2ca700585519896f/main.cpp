/**
 * Problem 8
 * ---------
 * Find the greatest product of five consecutive digits in the 1000-digit number:
 *   73167176531330624919225119674426574742355349194934
 *   96983520312774506326239578318016984801869478851843
 *   85861560789112949495459501737958331952853208805511
 *   12540698747158523863050715693290963295227443043557
 *   66896648950445244523161731856403098711121722383113
 *   62229893423380308135336276614282806444486645238749
 *   30358907296290491560440772390713810515859307960866
 *   70172427121883998797908792274921901699720888093776
 *   65727333001053367881220235421809751254540594752243
 *   52584907711670556013604839586446706324415722155397
 *   53697817977846174064955149290862569321978468622482
 *   83972241375657056057490261407972968652414535100474
 *   82166370484403199890008895243450658541227588666881
 *   16427171479924442928230863465674813919123162824586
 *   17866458359124566529476545682848912883142607690042
 *   24219022671055626321111109370544217506941658960408
 *   07198403850962455444362981230987879927244284909188
 *   84580156166097919133875499200524063689912560717606
 *   05886116467109405077541002256983155200055935729725
 *   71636269561882670428252483600823257530420752963450
 */


#include <algorithm>
#include <array>
#include <iostream>


static const char big_number[1001] =
    "73167176531330624919225119674426574742355349194934"
    "96983520312774506326239578318016984801869478851843"
    "85861560789112949495459501737958331952853208805511"
    "12540698747158523863050715693290963295227443043557"
    "66896648950445244523161731856403098711121722383113"
    "62229893423380308135336276614282806444486645238749"
    "30358907296290491560440772390713810515859307960866"
    "70172427121883998797908792274921901699720888093776"
    "65727333001053367881220235421809751254540594752243"
    "52584907711670556013604839586446706324415722155397"
    "53697817977846174064955149290862569321978468622482"
    "83972241375657056057490261407972968652414535100474"
    "82166370484403199890008895243450658541227588666881"
    "16427171479924442928230863465674813919123162824586"
    "17866458359124566529476545682848912883142607690042"
    "24219022671055626321111109370544217506941658960408"
    "07198403850962455444362981230987879927244284909188"
    "84580156166097919133875499200524063689912560717606"
    "05886116467109405077541002256983155200055935729725"
    "71636269561882670428252483600823257530420752963450";


enum {
    big_number_size = sizeof(big_number) - 1
};


template<typename T, unsigned N>
struct FixedSizeAlloc : std::allocator<T>
{
    typedef typename std::allocator<T>::pointer pointer;
    typedef typename std::allocator<T>::size_type size_type;

    FixedSizeAlloc() : data(), size() {}

    pointer allocate(size_type n, const void* = 0)
    {
        if (size + n > N)
        {
            throw std::bad_alloc();
        }
        auto result = &data[size];
        size += n;
        return result;
    }

    void deallocate(pointer, size_type)
    {
    }

    std::array<T, N> data;
    size_type size;
};


typedef std::basic_string<char, std::char_traits<char>, FixedSizeAlloc<char, 5> > Str5;


int main()
{
    unsigned result = 0;
    for (unsigned i = 0; i + 5 <= big_number_size; ++i)
    {
        Str5 str(big_number + i, big_number + i + 5);
        result = std::max(result,
                          std::accumulate(str.begin(), str.end(), 1u,
                                          [](unsigned & x, char c) { return x *= unsigned(int(c - '0')); }));
    }
    std::cout << result << std::endl;
}
