#include <boost/preprocessor.hpp>

#define GENERATE_SEPARATOR_COMMA() ,
#define GENERATE_SEPARATOR_SEMICOLON() ;
#define GENERATE_SEPARATOR_NOTHING()    

#define GET_ELEMENT_HEAD_0(Fields) BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_HEAD(Fields))
#define GET_ELEMENT_TAIL_0(r, GenSep, Element) GenSep() BOOST_PP_SEQ_HEAD(Element)

#define GET_ELEMENT_HEAD_1(Fields) BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_TAIL(Fields)))
#define GET_ELEMENT_TAIL_1(r, GenSep, Element) GenSep() BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_TAIL(Element))

#define GET_ELEMENT_HEAD_2(Fields) BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_TAIL(BOOST_PP_SEQ_TAIL(BOOST_PP_SEQ_HEAD(Fields))))
#define GET_ELEMENT_TAIL_2(r, GenSep, Element) GenSep() BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_TAIL(BOOST_PP_SEQ_TAIL(Element)))

#define MAP(Index, Fields, GenSep) \
    BOOST_PP_CAT(GET_ELEMENT_HEAD_, Index)(Fields) \
    BOOST_PP_SEQ_FOR_EACH(BOOST_PP_CAT(GET_ELEMENT_TAIL_, Index), GenSep, BOOST_PP_SEQ_TAIL(Fields))
    
    
#define FIELDS \
    ((x1)(y1)(z1)) \
    ((x2)(y2)(z2)) \
    ((x3)(y3)(z3))


MAP(0, FIELDS, GENERATE_SEPARATOR_NOTHING)
MAP(0, FIELDS, GENERATE_SEPARATOR_COMMA)
MAP(0, FIELDS, GENERATE_SEPARATOR_SEMICOLON)

MAP(1, FIELDS, GENERATE_SEPARATOR_NOTHING)
MAP(1, FIELDS, GENERATE_SEPARATOR_COMMA)
MAP(1, FIELDS, GENERATE_SEPARATOR_SEMICOLON)

MAP(2, FIELDS, GENERATE_SEPARATOR_NOTHING)
MAP(2, FIELDS, GENERATE_SEPARATOR_COMMA)
MAP(2, FIELDS, GENERATE_SEPARATOR_SEMICOLON)