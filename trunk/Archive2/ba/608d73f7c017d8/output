In file included from /usr/local/include/boost/fusion/functional/invocation/invoke.hpp:45:0,
                 from main.cpp:3:
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp: In instantiation of 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::unsegmented_size<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:36:20:   required from 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::apply<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:68:16:   required from 'struct boost::fusion::result_of::size<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, const Sequence>::type boost::fusion::invoke(Function, const Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:33:20: error: no type named 'size' in 'const class std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
             struct unsegmented_size : Sequence::size {};
                    ^
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp: In instantiation of 'struct boost::fusion::result_of::size<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, const Sequence>::type boost::fusion::invoke(Function, const Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:74:44: error: no type named 'type' in 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::apply<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
             template apply<Sequence>::type size_application;
                                            ^
In file included from /usr/local/include/boost/fusion/support/category_of.hpp:10:0,
                 from /usr/local/include/boost/fusion/functional/invocation/invoke.hpp:43,
                 from main.cpp:3:
/usr/local/include/boost/fusion/support/detail/category_of.hpp: In instantiation of 'struct boost::fusion::detail::fusion_category_of<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/support/category_of.hpp:44:20:   required from 'struct boost::fusion::extension::category_of_impl<boost::fusion::non_fusion_tag>::apply<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/support/category_of.hpp:63:16:   required from 'struct boost::fusion::traits::category_of<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/support/category_of.hpp:104:16:   required from 'struct boost::fusion::traits::is_random_access<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, const Sequence>::type boost::fusion::invoke(Function, const Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/support/detail/category_of.hpp:15:38: error: no type named 'category' in 'const class std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
         typedef typename T::category type;
                                      ^
In file included from main.cpp:3:0:
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp: In instantiation of 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, const Sequence>::type boost::fusion::invoke(Function, const Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30: error: 'value' is not a member of 'boost::fusion::traits::is_random_access<const std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
               >::result_type type;
                              ^
In file included from /usr/local/include/boost/fusion/functional/invocation/invoke.hpp:45:0,
                 from main.cpp:3:
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp: In instantiation of 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::unsegmented_size<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:36:20:   required from 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::apply<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:68:16:   required from 'struct boost::fusion::result_of::size<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, Sequence>::type boost::fusion::invoke(Function, Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:33:20: error: no type named 'size' in 'class std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
             struct unsegmented_size : Sequence::size {};
                    ^
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp: In instantiation of 'struct boost::fusion::result_of::size<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, Sequence>::type boost::fusion::invoke(Function, Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/sequence/intrinsic/size.hpp:74:44: error: no type named 'type' in 'struct boost::fusion::extension::size_impl<boost::fusion::non_fusion_tag>::apply<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
             template apply<Sequence>::type size_application;
                                            ^
In file included from /usr/local/include/boost/fusion/support/category_of.hpp:10:0,
                 from /usr/local/include/boost/fusion/functional/invocation/invoke.hpp:43,
                 from main.cpp:3:
/usr/local/include/boost/fusion/support/detail/category_of.hpp: In instantiation of 'struct boost::fusion::detail::fusion_category_of<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/support/category_of.hpp:44:20:   required from 'struct boost::fusion::extension::category_of_impl<boost::fusion::non_fusion_tag>::apply<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/support/category_of.hpp:63:16:   required from 'struct boost::fusion::traits::category_of<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/support/category_of.hpp:104:16:   required from 'struct boost::fusion::traits::is_random_access<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30:   required from 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, Sequence>::type boost::fusion::invoke(Function, Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/support/detail/category_of.hpp:15:38: error: no type named 'category' in 'class std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
         typedef typename T::category type;
                                      ^
In file included from main.cpp:3:0:
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp: In instantiation of 'struct boost::fusion::result_of::invoke<void (*)(int, const std::basic_string<char>&), std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >':
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5:   required by substitution of 'template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, Sequence>::type boost::fusion::invoke(Function, Sequence&) [with Function = void (*)(int, const std::basic_string<char>&); Sequence = std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >]'
main.cpp:9:30:   required from here
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:162:30: error: 'value' is not a member of 'boost::fusion::traits::is_random_access<std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >'
               >::result_type type;
                              ^
main.cpp: In function 'int main()':
main.cpp:9:30: error: no matching function for call to 'invoke(void (&)(int, const string&), std::tuple<int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)'
  boost::fusion::invoke(foo, x);
                              ^
main.cpp:9:30: note: candidates are:
In file included from main.cpp:3:0:
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5: note: template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, Sequence>::type boost::fusion::invoke(Function, Sequence&)
     invoke(Function f, Sequence & s)
     ^
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:168:5: note:   substitution of deduced template arguments resulted in errors seen above
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5: note: template<class Function, class Sequence> typename boost::fusion::result_of::invoke<Function, const Sequence>::type boost::fusion::invoke(Function, const Sequence&)
     invoke(Function f, Sequence const & s)
     ^
/usr/local/include/boost/fusion/functional/invocation/invoke.hpp:177:5: note:   substitution of deduced template arguments resulted in errors seen above
