In file included from /usr/local/include/boost/spirit/home/support/string_traits.hpp:16:0,
                 from /usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:20,
                 from /usr/local/include/boost/spirit/home/support/context.hpp:18,
                 from /usr/local/include/boost/spirit/home/qi/domain.hpp:18,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/support/container.hpp: In instantiation of ‘static bool boost::spirit::traits::push_back_container<Container, T, Enable>::call(Container&, const T&) [with Container = std::basic_string<wchar_t>; T = identifier; Enable = void]’:
/usr/local/include/boost/spirit/home/support/container.hpp:340:62:   required from ‘bool boost::spirit::traits::push_back(Container&, const T&) [with Container = std::basic_string<wchar_t>; T = identifier]’
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:239:40:   required from ‘static void boost::spirit::traits::assign_to_container_from_value<Attribute, T, Enable>::call(const T_&, Attribute&, mpl_::false_, mpl_::false_) [with T_ = identifier; Attribute = std::basic_string<wchar_t>; T = identifier; Enable = void; mpl_::false_ = mpl_::bool_<false>]’
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:315:56:   required from ‘static void boost::spirit::traits::assign_to_container_from_value<Attribute, T, Enable>::call(const T&, Attribute&) [with Attribute = std::basic_string<wchar_t>; T = identifier; Enable = void]’
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:368:73:   required from ‘void boost::spirit::traits::detail::assign_to(const T&, Attribute&, mpl_::true_) [with T = identifier; Attribute = std::basic_string<wchar_t>; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:382:64:   required from ‘void boost::spirit::traits::assign_to(const T&, Attribute&) [with T = identifier; Attribute = std::basic_string<wchar_t>]’
/usr/local/include/boost/spirit/home/qi/detail/attributes.hpp:27:40:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T1 = const __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T2 = boost::spirit::context<boost::fusion::cons<problem&, boost::fusion::nil>, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T1 = const __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T2 = boost::spirit::context<boost::fusion::cons<problem&, boost::fusion::nil>, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, boost::fusion::cons<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()> >, boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false>, boost::fusion::nil> > > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T1 = const __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&; T2 = boost::spirit::context<boost::fusion::cons<problem&, boost::fusion::nil>, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&, const __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >&, boost::spirit::context<boost::fusion::cons<problem&, boost::fusion::nil>, boost::fusion::vector0<> >&, const boost::spirit::unused_type&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>&, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >; T1 = problem(); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::rule(const Expr&, const string&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>&, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >, identifier()>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const wchar_t*, std::basic_string<wchar_t> >; T1 = problem(); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; std::string = std::basic_string<char>]’
main.cpp:48:75:   required from here
/usr/local/include/boost/spirit/home/support/container.hpp:278:13: error: no matching function for call to ‘std::basic_string<wchar_t>::insert(std::basic_string<wchar_t>::iterator, const identifier&)’
             c.insert(c.end(), val);
             ^
/usr/local/include/boost/spirit/home/support/container.hpp:278:13: note: candidates are:
In file included from /usr/include/c++/4.8/string:52:0,
                 from main.cpp:1:
/usr/include/c++/4.8/bits/basic_string.h:1185:7: note: void std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::iterator, std::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t> >; typename _Alloc::rebind<_CharT>::other::pointer = wchar_t*; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(iterator __p, size_type __n, _CharT __c)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1185:7: note:   candidate expects 3 arguments, 2 provided
/usr/include/c++/4.8/bits/basic_string.h:1202:9: note: template<class _InputIterator> void std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::iterator, _InputIterator, _InputIterator) [with _InputIterator = _InputIterator; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>]
         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
         ^
/usr/include/c++/4.8/bits/basic_string.h:1202:9: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/boost/spirit/home/support/string_traits.hpp:16:0,
                 from /usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:20,
                 from /usr/local/include/boost/spirit/home/support/context.hpp:18,
                 from /usr/local/include/boost/spirit/home/qi/domain.hpp:18,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/support/container.hpp:278:13: note:   candidate expects 3 arguments, 2 provided
             c.insert(c.end(), val);
             ^
In file included from /usr/include/c++/4.8/string:52:0,
                 from main.cpp:1:
/usr/include/c++/4.8/bits/basic_string.h:1213:7: note: void std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::iterator, std::initializer_list<_Tp>) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t> >; typename _Alloc::rebind<_CharT>::other::pointer = wchar_t*]
       insert(iterator __p, initializer_list<_CharT> __l)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1213:7: note:   no known conversion for argument 2 from ‘const identifier’ to ‘std::initializer_list<wchar_t>’
/usr/include/c++/4.8/bits/basic_string.h:1233:7: note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(size_type __pos1, const basic_string& __str)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1233:7: note:   no known conversion for argument 1 from ‘std::basic_string<wchar_t>::iterator {aka __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t> >}’ to ‘std::basic_string<wchar_t>::size_type {aka long unsigned int}’
/usr/include/c++/4.8/bits/basic_string.h:1255:7: note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT, _Traits, _Alloc>&, std::basic_string<_CharT, _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(size_type __pos1, const basic_string& __str,
       ^
/usr/include/c++/4.8/bits/basic_string.h:1255:7: note:   candidate expects 4 arguments, 2 provided
/usr/include/c++/4.8/bits/basic_string.h:1278:7: note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(size_type __pos, const _CharT* __s, size_type __n);
       ^
/usr/include/c++/4.8/bits/basic_string.h:1278:7: note:   candidate expects 3 arguments, 2 provided
/usr/include/c++/4.8/bits/basic_string.h:1296:7: note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(size_type __pos, const _CharT* __s)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1296:7: note:   no known conversion for argument 1 from ‘std::basic_string<wchar_t>::iterator {aka __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t> >}’ to ‘std::basic_string<wchar_t>::size_type {aka long unsigned int}’
/usr/include/c++/4.8/bits/basic_string.h:1319:7: note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]
       insert(size_type __pos, size_type __n, _CharT __c)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1319:7: note:   candidate expects 3 arguments, 2 provided
/usr/include/c++/4.8/bits/basic_string.h:1337:7: note: std::basic_string<_CharT, _Traits, _Alloc>::iterator std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::iterator, _CharT) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t> >; typename _Alloc::rebind<_CharT>::other::pointer = wchar_t*]
       insert(iterator __p, _CharT __c)
       ^
/usr/include/c++/4.8/bits/basic_string.h:1337:7: note:   no known conversion for argument 2 from ‘const identifier’ to ‘wchar_t’
