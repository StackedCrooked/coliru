main.cpp: In function 'int main()':
main.cpp:95:67: error: 'None' is not a member of 'ling'
 #define FORMAT(...) ling::assert::Format(ling::assert::FormatData<ling::None>{} << __VA_ARGS__)
                                                                   ^
main.cpp:99:71: note: in definition of macro 'LING_ASSERT_ASSERT'
         ling::assert::Handler::invoke(#condition, __FILE__, __LINE__, message); \
                                                                       ^
main.cpp:130:79: note: in expansion of macro 'FORMAT'
 #define LING_ASSERT_MESSAGE(condition, message) LING_ASSERT_ASSERT(condition, FORMAT(message))
                                                                               ^
main.cpp:201:5: note: in expansion of macro 'LING_ASSERT_MESSAGE'
     LING_ASSERT_MESSAGE(normal, 'F' << "**" << "k");
     ^
main.cpp:95:67: note: suggested alternative:
 #define FORMAT(...) ling::assert::Format(ling::assert::FormatData<ling::None>{} << __VA_ARGS__)
                                                                   ^
main.cpp:99:71: note: in definition of macro 'LING_ASSERT_ASSERT'
         ling::assert::Handler::invoke(#condition, __FILE__, __LINE__, message); \
                                                                       ^
main.cpp:130:79: note: in expansion of macro 'FORMAT'
 #define LING_ASSERT_MESSAGE(condition, message) LING_ASSERT_ASSERT(condition, FORMAT(message))
                                                                               ^
main.cpp:201:5: note: in expansion of macro 'LING_ASSERT_MESSAGE'
     LING_ASSERT_MESSAGE(normal, 'F' << "**" << "k");
     ^
main.cpp:59:16: note:   'ling::assert::None'
         struct None{};
                ^
main.cpp:95:67: error: 'None' is not a member of 'ling'
 #define FORMAT(...) ling::assert::Format(ling::assert::FormatData<ling::None>{} << __VA_ARGS__)
                                                                   ^
main.cpp:99:71: note: in definition of macro 'LING_ASSERT_ASSERT'
         ling::assert::Handler::invoke(#condition, __FILE__, __LINE__, message); \
                                                                       ^
main.cpp:130:79: note: in expansion of macro 'FORMAT'
 #define LING_ASSERT_MESSAGE(condition, message) LING_ASSERT_ASSERT(condition, FORMAT(message))
                                                                               ^
main.cpp:201:5: note: in expansion of macro 'LING_ASSERT_MESSAGE'
     LING_ASSERT_MESSAGE(normal, 'F' << "**" << "k");
     ^
main.cpp:95:67: note: suggested alternative:
 #define FORMAT(...) ling::assert::Format(ling::assert::FormatData<ling::None>{} << __VA_ARGS__)
                                                                   ^
main.cpp:99:71: note: in definition of macro 'LING_ASSERT_ASSERT'
         ling::assert::Handler::invoke(#condition, __FILE__, __LINE__, message); \
                                                                       ^
main.cpp:130:79: note: in expansion of macro 'FORMAT'
 #define LING_ASSERT_MESSAGE(condition, message) LING_ASSERT_ASSERT(condition, FORMAT(message))
                                                                               ^
main.cpp:201:5: note: in expansion of macro 'LING_ASSERT_MESSAGE'
     LING_ASSERT_MESSAGE(normal, 'F' << "**" << "k");
     ^
main.cpp:59:16: note:   'ling::assert::None'
         struct None{};
                ^
main.cpp:95:77: error: template argument 1 is invalid
 #define FORMAT(...) ling::assert::Format(ling::assert::FormatData<ling::None>{} << __VA_ARGS__)
                                                                             ^
main.cpp:99:71: note: in definition of macro 'LING_ASSERT_ASSERT'
         ling::assert::Handler::invoke(#condition, __FILE__, __LINE__, message); \
                                                                       ^
main.cpp:130:79: note: in expansion of macro 'FORMAT'
 #define LING_ASSERT_MESSAGE(condition, message) LING_ASSERT_ASSERT(condition, FORMAT(message))
                                                                               ^
main.cpp:201:5: note: in expansion of macro 'LING_ASSERT_MESSAGE'
     LING_ASSERT_MESSAGE(normal, 'F' << "**" << "k");
     ^
