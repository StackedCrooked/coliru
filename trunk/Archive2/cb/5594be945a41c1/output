main.cpp:209:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:212:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:215:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:218:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:221:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:224:13: warning: unused parameter 'sig' [-Wunused-parameter]
main.cpp:224:13: warning: unused parameter 'si' [-Wunused-parameter]
main.cpp:224:13: warning: unused parameter 'unused' [-Wunused-parameter]
std::thread::hardware_concurrency() = 1
default value:
    corePoolSize = 1, maximumPoolSize = 1, keepAliveTime = 300
Testing: normal
    SetConfigurationInformation() return true
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2
Testing: 0 <= keepAliveTime
    SetConfigurationInformation() return false
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = -2
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2
Testing: 1 <= corePoolSize
    SetConfigurationInformation() return false
    corePoolSize = 0, maximumPoolSize = 8, keepAliveTime = 2
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2
Testing: corePoolSize <= maximumPoolSize
    SetConfigurationInformation() return false
    corePoolSize = 14, maximumPoolSize = 8, keepAliveTime = 2
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2
if (corePoolSize_ > currentThreads_) {
notify.
1外
if (corePoolSize_ > currentThreads_) {
notify.
1.    conditionVariable_.wait(lk);→exit.
1内
1内
1.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2外
if (corePoolSize_ > currentThreads_) {
notify.
1.    conditionVariable_.wait(lk);→exit.
1内
1.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3外
if (corePoolSize_ > currentThreads_) {
notify.
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
1.    conditionVariable_.wait(lk);→exit.
2内
12内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
1.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4外
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
5外
1.    conditionVariable_.wait(lk);→exit.
1.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
1退出.if (!enabled) {
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
6外
notify.
notify.
notify.
notify.
notify.
5.    conditionVariable_.wait(lk);→exit.
5内
5内
5内
5内
5内
5内
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.if (!enabled) {
1.    conditionVariable_.wait(lk);→exit.
1.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
1退出.ok.
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
32.    conditionVariable_.wait(lk);→exit.
内
2内
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.ok.
5.    conditionVariable_.wait(lk);→exit.
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.ok.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
4.    conditionVariable_.wait(lk);→exit.
4内
notify.
4notify.
notify.
notify.
notify.
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
4退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
7外
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4内
4内
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.ok.
6外
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.ok.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
7notify.
notify.
notify.
notify.
notify.
notify.
6.    conditionVariable_.wait(lk);→exit.
6内
6内
6内
76外
内
6内
6内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
7外
7.    conditionVariable_.wait(lk);→exit.
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7外
notify.
notify.
外
6.    conditionVariable_.wait(lk);→exit.
6内
6内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
8外
notify.
notify.
notify.
7notify.
.    conditionVariable_.wait(lk);→exit.
notify.
67.    conditionVariable_.wait(lk);→exit.
内
notify.
6内
76.    conditionVariable_.wait(lk);→exit.
notify.
7内
内
77notify.
内
67内
notify.
7内
内
6内
notify.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6notify.
notify.
7内
6内
6内
退出.if (!enabled) {
notify.
6内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
notify.
8.    conditionVariable_.wait(lk);→exit.
notify.
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
6.    conditionVariable_.wait(lk);→exit.
6内
6内
6内
6内
66.    conditionVariable_.wait(lk);→exit.
7notify.
notify.
6内
notify.
6内
6内
6内
7内
6内
内
76内
notify.
内
7内
677内
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
内
7内
7内
7内
77内
内
7内
7内
677内
6内
6内
6内
6内
6内
6内
6内
6内
6内
6内
6内
内
内
内
6内
76内
7内
内
7内
6内
76内
6内
6内
内
67内
notify.
内
7notify.
notify.
内
67内
7notify.
内
6内
内
6内
notify.
6notify.
内
notify.
notify.
7notify.
6内
内
7内
notify.
7内
6内
7内
6notify.
7notify.
notify.
notify.
内
notify.
6notify.
notify.
内
notify.
内
notify.
notify.
7内
notify.
6notify.
notify.
notify.
内
76内
6内
6内
6内
6内
6内
6内
内
6内
76内
notify.
67内
notify.
6内
6内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
87.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
6notify.
notify.
notify.
内
notify.
76内
6内
6内
notify.
6内
6内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
8notify.
.    conditionVariable_.wait(lk);→exit.
8内
8内
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
87内
8内
8notify.
.    conditionVariable_.wait(lk);→exit.
内
7notify.
8内
内
notify.
notify.
87内
notify.
7内
7内
内
7notify.
内
notify.
7内
8内
8内
8内
notify.
8notify.
notify.
notify.
内
7notify.
8内
内
8内
notify.
7内
notify.
87内
notify.
内
7notify.
notify.
8内
notify.
内
notify.
notify.
7notify.
内
87notify.
内
8内
内
8notify.
7内
内
7内
notify.
7内
notify.
8notify.
notify.
notify.
7内
内
7内
87内
8内
notify.
8内
内
notify.
8内
notify.
8内
8内
78notify.
内
8notify.
notify.
内
内
8内
notify.
7内
7内
87notify.
内
8内
内
8notify.
7内
内
7内
notify.
7内
notify.
8notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
内
notify.
8内
8内
8内
notify.
8内
8内
notify.
7notify.
notify.
8内
notify.
内
8notify.
notify.
7内
内
notify.
7notify.
notify.
8内
7内
8内
7notify.
内
内
notify.
notify.
78notify.
内
内
8内
notify.
87notify.
内
8内
内
8notify.
7内
notify.
内
7内
7内
notify.
7内
8内
7内
87内
7内
notify.
内
7notify.
notify.
内
8notify.
notify.
内
notify.
7notify.
内
8notify.
notify.
内
notify.
8内
8内
78内
notify.
7内
7内
notify.
内
notify.
8内
notify.
8内
7notify.
8notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
内
notify.
8内
8内
8内
notify.
8notify.
内
notify.
notify.
notify.
notify.
notify.
notify.
notify.
内
8notify.
内
78内
notify.
内
notify.
87内
notify.
7内
notify.
内
notify.
8内
notify.
8notify.
内
7notify.
notify.
notify.
内
notify.
7内
87notify.
内
8notify.
notify.
内
内
8内
8内
notify.
87内
7内
内
7notify.
8内
8notify.
notify.
内
notify.
内
notify.
notify.
78内
8内
8内
7notify.
内
8内
内
8notify.
内
notify.
8内
78内
8内
notify.
8内
内
8内
8内
notify.
87内
7内
内
notify.
8内
8内
7notify.
8内
notify.
notify.
7内
7notify.
内
内
notify.
8内
8内
notify.
78notify.
内
内
notify.
notify.
8notify.
内
7notify.
notify.
notify.
内
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
6notify.
7内
notify.
7内
7内
7notify.
内
notify.
7notify.
notify.
退出.if (!enabled) {
notify.
8内
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
内
notify.
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
78内
内
8内
8内
8内
8内
8内
8内
8内
8内
8内
78内
notify.
notify.
notify.
内
notify.
8内
78内
notify.
内
7notify.
8内
notify.
7notify.
notify.
内
notify.
内
notify.
notify.
notify.
8notify.
7内
notify.
内
notify.
notify.
notify.
7notify.
8内
notify.
内
87内
7内
7内
7内
7内
7内
7内
7内
7内
7内
76内
内
8内
8内
78内
.    conditionVariable_.wait(lk);→exit.
7内
67内
内
内
78内
6内
内
78内
8内
6内
8内
67内
内
内
76内
6内
8内
6内
7内
86内
内
内
6内
8内
76内
87内
7内
7内
7内
7内
7内
7内
7内
notify.
7内
内
8内
notify.
8notify.
notify.
notify.
7内
notify.
8内
notify.
内
7内
notify.
8notify.
notify.
7内
8内
notify.
8内
notify.
7内
内
7内
notify.
7内
87内
7内
notify.
内
7notify.
8notify.
内
notify.
7内
内
7内
notify.
7内
notify.
87notify.
内
内
notify.
notify.
notify.
87内
内
8内
8内
notify.
8内
7内
8notify.
内
8内
7notify.
notify.
8内
notify.
内
8内
8内
7notify.
8内
notify.
内
notify.
notify.
78内
8notify.
内
7内
notify.
notify.
内
notify.
8内
7notify.
notify.
notify.
8内
内
7内
notify.
8内
8内
8内
78notify.
内
7内
notify.
notify.
7内
内
7notify.
内
notify.
8notify.
内
8内
78notify.
内
notify.
8内
notify.
notify.
内
8内
8内
8内
notify.
8内
7内
8notify.
7内
notify.
内
8内
notify.
87内
7内
内
notify.
8内
8内
notify.
notify.
7notify.
8内
notify.
8notify.
notify.
内
内
8内
notify.
7内
8notify.
notify.
notify.
7内
notify.
8内
内
8内
notify.
78notify.
notify.
notify.
内
内
notify.
78notify.
内
内
8内
87内
notify.
7内
notify.
notify.
内
notify.
7内
8notify.
notify.
notify.
内
notify.
78notify.
内
notify.
notify.
notify.
notify.
内
8内
8内
8内
notify.
78notify.
notify.
7内
8内
8内
8内
8内
notify.
8notify.
notify.
内
内
8内
notify.
8内
7内
8notify.
内
78notify.
notify.
notify.
内
内
notify.
8内
8内
78notify.
内
内
notify.
7notify.
内
notify.
notify.
notify.
8notify.
7内
notify.
7notify.
notify.
内
notify.
内
notify.
notify.
notify.
notify.
7内
7notify.
8notify.
内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
notify.
8内
notify.
8内
8内
8内
notify.
8notify.
notify.
notify.
内
notify.
内
notify.
notify.
notify.
notify.
8notify.
7内
内
notify.
notify.
78内
8内
8内
notify.
8内
8notify.
notify.
内
notify.
内
7内
notify.
7notify.
8内
notify.
内
notify.
8内
7内
8notify.
内
7notify.
8内
内
notify.
7内
8notify.
notify.
内
78内
notify.
8内
内
7内
8内
notify.
7内
7notify.
notify.
8内
notify.
notify.
内
7内
7notify.
8内
内
8notify.
7notify.
内
内
7内
notify.
8内
87notify.
notify.
内
内
87notify.
内
8内
内
8notify.
7内
内
7内
notify.
7内
8notify.
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
内
notify.
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
8退出.if (!enabled) {
notify.
notify.
7notify.
.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
notify.
6.    conditionVariable_.wait(lk);→exit.
notify.
6notify.
内
76notify.
notify.
.    conditionVariable_.wait(lk);→exit.
notify.
内
7内
7内
6notify.
内
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
.    conditionVariable_.wait(lk);→exit.
8.    conditionVariable_.wait(lk);→exit.
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
8退出.if (!enabled) {
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.ok.
notify.
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
外
7退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
7.    conditionVariable_.wait(lk);→exit.
notify.
7notify.
内
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
8内
notify.
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
notify.
8外
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
7外
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
8notify.
8.    conditionVariable_.wait(lk);→exit.
8内
7.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.ok.
notify.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
notify.
notify.
notify.
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
7外
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
7外
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
87.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
6外
notify.
notify.
notify.
notify.
notify.
notify.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
6} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {外

notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
7notify.
外
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
8notify.
外
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
before sleep(4);---------------------------------
8外
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
7内
77内
.    conditionVariable_.wait(lk);→exit.
7内
7内
77内
内
77内
内
7内
7内
7内
77内
7内
内
77内
7内
7内
内
77内
内
7内
7内
7内
77内
内
77内
7内
7内
内
7内
7内
7内
7内
7内
77内
内
7内
7内
7内
7内
77内
内
77内
7内
7内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
7内
内
77内
7内
7内
7内
内
7内
7内
7内
77内
内
7内
7内
7内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
77内
7内
内
77内
内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
7内
77内
内
7内
7内
7内
7内
77内
内
77内
7内
7内
内
7内
7内
7内
77内
内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
77内
7内
7内
内
7内
7内
7内
7内
77内
内
77内
7内
7内
内
7内
7内
7内
77内
内
7内
7内
77内
内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
77内
内
7内
7内
7内
7内
77内
7内
内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
77内
内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
77退出.if (!enabled) {
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
after sleep(4);---------------------------------
notify.
notify.
notify.
notify.
notify.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
} else if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
6.    conditionVariable_.wait(lk);→exit.
6内
76.    conditionVariable_.wait(lk);→exit.
内
7内
67内
内
76内
6内
内
87内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    conditionVariable_.wait(lk);→exit.
67退出.if (!enabled) {
内
86.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
8退出.if (!enabled) {
8外
7外
6外
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.ok.
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
Cleanup().
8.    conditionVariable_.wait(lk);→exit.
66.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
7.    conditionVariable_.wait(lk);→exit.
cnt = 499500
