main.cpp:153:22: error: non-type template argument is not a constant expression
    return Bitfields<std::get<S>(enums)...>();
                     ^~~~~~~~~~~~~~~~~~
main.cpp:144:17: note: in instantiation of function template specialization 'make_bitfield_worker<12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11>' requested here
    -> decltype(make_bitfield_worker(convert<unsigned>(enums), func, typename GenerateSequence<SIZE>::type()))
                ^
main.cpp:143:16: note: while substituting deduced template arguments into function template 'make_bitfield' [with ENUM = Bits, SIZE = 12]
constexpr auto make_bitfield(const std::array<ENUM, SIZE> enums, const FunctionPointer<unsigned, unsigned> func)
               ^
main.cpp:153:22: note: read of non-constexpr variable 'enums' is not allowed in a constant expression
    return Bitfields<std::get<S>(enums)...>();
                     ^
main.cpp:150:70: note: declared here
constexpr auto make_bitfield_worker(const std::array<unsigned, SIZE> enums, const FunctionPointer<unsigned, unsigned> func, const Sequence<S...>)
                                                                     ^
main.cpp:146:12: error: no matching function for call to 'make_bitfield_worker'
    return make_bitfield_worker(convert<unsigned>(enums), func, typename GenerateSequence<SIZE>::type());
           ^~~~~~~~~~~~~~~~~~~~
main.cpp:159:16: note: in instantiation of function template specialization 'make_bitfield<Bits, 12>' requested here
    auto bf2 = make_bitfield(bits_array, bits_calc);
               ^
main.cpp:150:16: note: candidate template ignored: substitution failure [with SIZE = 12, S = <0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11>]
constexpr auto make_bitfield_worker(const std::array<unsigned, SIZE> enums, const FunctionPointer<unsigned, unsigned> func, const Sequence<S...>)
               ^
2 errors generated.
