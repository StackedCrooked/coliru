/usr/share/groff/1.21/tmac/an-old.tmac:679: warning: can't find macro file `man.local'
GCC(1)                                GNU                               GCC(1)



NAME
       gcc - GNU project C and C++ compiler

SYNOPSIS
       gcc [-c|-S|-E] [-std=standard]
           [-g] [-pg] [-Olevel]
           [-Wwarn...] [-pedantic]
           [-Idir...] [-Ldir...]
           [-Dmacro[=defn]...] [-Umacro]
           [-foption...] [-mmachine-option...]
           [-o outfile] [@file] infile...

       Only the most useful options are listed here; see below for the
       remainder.  g++ accepts mostly the same options as gcc.

DESCRIPTION
       When you invoke GCC, it normally does preprocessing, compilation,
       assembly and linking.  The "overall options" allow you to stop this
       process at an intermediate stage.  For example, the -c option says not
       to run the linker.  Then the output consists of object files output by
       the assembler.

       Other options are passed on to one stage of processing.  Some options
       control the preprocessor and others the compiler itself.  Yet other
       options control the assembler and linker; most of these are not
       documented here, since you rarely need to use any of them.

       Most of the command line options that you can use with GCC are useful
       for C programs; when an option is only useful with another language
       (usually C++), the explanation says so explicitly.  If the description
       for a particular option does not mention a source language, you can use
       that option with all supported languages.

       The gcc program accepts options and file names as operands.  Many
       options have multi-letter names; therefore multiple single-letter
       options may not be grouped: -dv is very different from -d -v.

       You can mix options and other arguments.  For the most part, the order
       you use doesn't matter.  Order does matter when you use several options
       of the same kind; for example, if you specify -L more than once, the
       directories are searched in the order specified.  Also, the placement
       of the -l option is significant.

       Many options have long names starting with -f or with -W---for example,
       -fmove-loop-invariants, -Wformat and so on.  Most of these have both
       positive and negative forms; the negative form of -ffoo would be
       -fno-foo.  This manual documents only one of these two forms, whichever
       one is not the default.

OPTIONS
   Option Summary
       Here is a summary of all the options, grouped by type.  Explanations
       are in the following sections.

       Overall Options
           -c  -S  -E  -o file  -no-canonical-prefixes -pipe  -pass-exit-codes
           -x language  -v  -###  --help[=class[,...]]  --target-help
           --version -wrapper @file -fplugin=file -fplugin-arg-name=arg
           -fdump-ada-spec[-slim] -fdump-go-spec=file

       C Language Options
           -ansi  -std=standard  -fgnu89-inline -aux-info filename -fno-asm
           -fno-builtin  -fno-builtin-function -fhosted  -ffreestanding
           -fopenmp -fms-extensions -fplan9-extensions -trigraphs
           -no-integrated-cpp  -traditional  -traditional-cpp
           -fallow-single-precision  -fcond-mismatch -flax-vector-conversions
           -fsigned-bitfields  -fsigned-char -funsigned-bitfields
           -funsigned-char

       C++ Language Options
           -fabi-version=n  -fno-access-control  -fcheck-new -fconserve-space
           -fconstexpr-depth=n  -ffriend-injection -fno-elide-constructors
           -fno-enforce-eh-specs -ffor-scope  -fno-for-scope
           -fno-gnu-keywords -fno-implicit-templates
           -fno-implicit-inline-templates -fno-implement-inlines
           -fms-extensions -fno-nonansi-builtins  -fnothrow-opt
           -fno-operator-names -fno-optional-diags  -fpermissive
           -fno-pretty-templates -frepo  -fno-rtti  -fstats
           -ftemplate-depth=n -fno-threadsafe-statics -fuse-cxa-atexit
           -fno-weak  -nostdinc++ -fno-default-inline
           -fvisibility-inlines-hidden -fvisibility-ms-compat -Wabi
           -Wconversion-null  -Wctor-dtor-privacy -Wnoexcept
           -Wnon-virtual-dtor  -Wreorder -Weffc++  -Wstrict-null-sentinel
           -Wno-non-template-friend  -Wold-style-cast -Woverloaded-virtual
           -Wno-pmf-conversions -Wsign-promo

       Objective-C and Objective-C++ Language Options
           -fconstant-string-class=class-name -fgnu-runtime  -fnext-runtime
           -fno-nil-receivers -fobjc-abi-version=n -fobjc-call-cxx-cdtors
           -fobjc-direct-dispatch -fobjc-exceptions -fobjc-gc -fobjc-nilcheck
           -fobjc-std=objc1 -freplace-objc-classes -fzero-link -gen-decls
           -Wassign-intercept -Wno-protocol  -Wselector
           -Wstrict-selector-match -Wundeclared-selector

       Language Independent Options
           -fmessage-length=n -fdiagnostics-show-location=[once|every-line]
           -fno-diagnostics-show-option

       Warning Options
           -fsyntax-only  -fmax-errors=n  -pedantic -pedantic-errors -w
           -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds
           -Wno-attributes -Wno-builtin-macro-redefined -Wc++-compat
           -Wc++0x-compat -Wcast-align  -Wcast-qual -Wchar-subscripts
           -Wclobbered  -Wcomment -Wconversion  -Wcoverage-mismatch  -Wno-cpp
           -Wno-deprecated -Wno-deprecated-declarations
           -Wdisabled-optimization -Wno-div-by-zero -Wdouble-promotion
           -Wempty-body  -Wenum-compare -Wno-endif-labels -Werror  -Werror=*
           -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2
           -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral
           -Wformat-security  -Wformat-y2k -Wframe-larger-than=len
           -Wjump-misses-init -Wignored-qualifiers -Wimplicit
           -Wimplicit-function-declaration  -Wimplicit-int -Winit-self
           -Winline -Wno-int-to-pointer-cast -Wno-invalid-offsetof
           -Winvalid-pch -Wlarger-than=len  -Wunsafe-loop-optimizations
           -Wlogical-op -Wlong-long -Wmain  -Wmissing-braces
           -Wmissing-field-initializers -Wmissing-format-attribute
           -Wmissing-include-dirs -Wno-mudflap -Wno-multichar  -Wnonnull
           -Wno-overflow -Woverlength-strings  -Wpacked
           -Wpacked-bitfield-compat  -Wpadded -Wparentheses
           -Wpedantic-ms-format -Wno-pedantic-ms-format -Wpointer-arith
           -Wno-pointer-to-int-cast -Wredundant-decls -Wreturn-type
           -Wsequence-point  -Wshadow -Wsign-compare  -Wsign-conversion
           -Wstack-protector -Wstrict-aliasing -Wstrict-aliasing=n
           -Wstrict-overflow -Wstrict-overflow=n
           -Wsuggest-attribute=[pure|const|noreturn] -Wswitch
           -Wswitch-default  -Wswitch-enum -Wsync-nand -Wsystem-headers
           -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef -Wuninitialized
           -Wunknown-pragmas  -Wno-pragmas -Wunsuffixed-float-constants
           -Wunused  -Wunused-function -Wunused-label  -Wunused-parameter
           -Wno-unused-result -Wunused-value -Wunused-variable
           -Wunused-but-set-parameter -Wunused-but-set-variable
           -Wvariadic-macros -Wvla -Wvolatile-register-var  -Wwrite-strings

       C and Objective-C-only Warning Options
           -Wbad-function-cast  -Wmissing-declarations
           -Wmissing-parameter-type  -Wmissing-prototypes  -Wnested-externs
           -Wold-style-declaration  -Wold-style-definition -Wstrict-prototypes
           -Wtraditional  -Wtraditional-conversion
           -Wdeclaration-after-statement -Wpointer-sign

       Debugging Options
           -dletters  -dumpspecs  -dumpmachine  -dumpversion -fdbg-cnt-list
           -fdbg-cnt=counter-value-list -fdump-noaddr -fdump-unnumbered
           -fdump-unnumbered-links -fdump-translation-unit[-n]
           -fdump-class-hierarchy[-n] -fdump-ipa-all -fdump-ipa-cgraph
           -fdump-ipa-inline -fdump-statistics -fdump-tree-all
           -fdump-tree-original[-n] -fdump-tree-optimized[-n] -fdump-tree-cfg
           -fdump-tree-vcg -fdump-tree-alias -fdump-tree-ch
           -fdump-tree-ssa[-n] -fdump-tree-pre[-n] -fdump-tree-ccp[-n]
           -fdump-tree-dce[-n] -fdump-tree-gimple[-raw]
           -fdump-tree-mudflap[-n] -fdump-tree-dom[-n] -fdump-tree-dse[-n]
           -fdump-tree-phiprop[-n] -fdump-tree-phiopt[-n]
           -fdump-tree-forwprop[-n] -fdump-tree-copyrename[-n] -fdump-tree-nrv
           -fdump-tree-vect -fdump-tree-sink -fdump-tree-sra[-n]
           -fdump-tree-forwprop[-n] -fdump-tree-fre[-n] -fdump-tree-vrp[-n]
           -ftree-vectorizer-verbose=n -fdump-tree-storeccp[-n]
           -fdump-final-insns=file -fcompare-debug[=opts]
           -fcompare-debug-second -feliminate-dwarf2-dups
           -feliminate-unused-debug-types -feliminate-unused-debug-symbols
           -femit-class-debug-always -fenable-icf-debug -fmem-report
           -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs
           -frandom-seed=string -fsched-verbose=n -fsel-sched-verbose
           -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose -fstack-usage
           -ftest-coverage  -ftime-report -fvar-tracking
           -fvar-tracking-assignments  -fvar-tracking-assignments-toggle -g
           -glevel  -gtoggle  -gcoff  -gdwarf-version -ggdb  -gstabs  -gstabs+
           -gstrict-dwarf  -gno-strict-dwarf -gvms  -gxcoff  -gxcoff+
           -fno-merge-debug-strings -fno-dwarf2-cfi-asm
           -fdebug-prefix-map=old=new -femit-struct-debug-baseonly
           -femit-struct-debug-reduced -femit-struct-debug-detailed[=spec-
           list] -p  -pg  -print-file-name=library  -print-libgcc-file-name
           -print-multi-directory  -print-multi-lib  -print-multi-os-directory
           -print-prog-name=program  -print-search-dirs  -Q -print-sysroot
           -print-sysroot-headers-suffix -save-temps -save-temps=cwd
           -save-temps=obj -time[=file]

       Optimization Options
           -falign-functions[=n] -falign-jumps[=n] -falign-labels[=n]
           -falign-loops[=n] -fassociative-math -fauto-inc-dec
           -fbranch-probabilities -fbranch-target-load-optimize
           -fbranch-target-load-optimize2 -fbtr-bb-exclusive -fcaller-saves
           -fcheck-data-deps -fcombine-stack-adjustments -fconserve-stack
           -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
           -fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range
           -fdata-sections -fdce -fdce -fdelayed-branch
           -fdelete-null-pointer-checks -fdse -fdevirtualize -fdse
           -fearly-inlining -fipa-sra -fexpensive-optimizations -ffast-math
           -ffinite-math-only -ffloat-store -fexcess-precision=style
           -fforward-propagate -ffp-contract=style -ffunction-sections -fgcse
           -fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity
           -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining
           -finline-functions -finline-functions-called-once -finline-limit=n
           -finline-small-functions -fipa-cp -fipa-cp-clone -fipa-matrix-reorg
           -fipa-pta -fipa-profile -fipa-pure-const -fipa-reference
           -fipa-struct-reorg -fira-algorithm=algorithm -fira-region=region
           -fira-loop-pressure -fno-ira-share-save-slots
           -fno-ira-share-spill-slots -fira-verbose=n -fivopts
           -fkeep-inline-functions -fkeep-static-consts -floop-block
           -floop-flatten -floop-interchange -floop-strip-mine
           -floop-parallelize-all -flto -flto-compression-level
           -flto-partition=alg -flto-report -fmerge-all-constants
           -fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves
           -fmove-loop-invariants fmudflap -fmudflapir -fmudflapth
           -fno-branch-count-reg -fno-default-inline -fno-defer-pop
           -fno-function-cse -fno-guess-branch-probability -fno-inline
           -fno-math-errno -fno-peephole -fno-peephole2 -fno-sched-interblock
           -fno-sched-spec -fno-signed-zeros -fno-toplevel-reorder
           -fno-trapping-math -fno-zero-initialized-in-bss
           -fomit-frame-pointer -foptimize-register-move
           -foptimize-sibling-calls -fpartial-inlining -fpeel-loops
           -fpredictive-commoning -fprefetch-loop-arrays -fprofile-correction
           -fprofile-dir=path -fprofile-generate -fprofile-generate=path
           -fprofile-use -fprofile-use=path -fprofile-values -freciprocal-math
           -fregmove -frename-registers -freorder-blocks
           -freorder-blocks-and-partition -freorder-functions
           -frerun-cse-after-loop -freschedule-modulo-scheduled-loops
           -frounding-math -fsched2-use-superblocks -fsched-pressure
           -fsched-spec-load -fsched-spec-load-dangerous
           -fsched-stalled-insns-dep[=n] -fsched-stalled-insns[=n]
           -fsched-group-heuristic -fsched-critical-path-heuristic
           -fsched-spec-insn-heuristic -fsched-rank-heuristic
           -fsched-last-insn-heuristic -fsched-dep-count-heuristic
           -fschedule-insns -fschedule-insns2 -fsection-anchors
           -fselective-scheduling -fselective-scheduling2
           -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops
           -fsignaling-nans -fsingle-precision-constant
           -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector
           -fstack-protector-all -fstrict-aliasing -fstrict-overflow
           -fthread-jumps -ftracer -ftree-bit-ccp -ftree-builtin-call-dce
           -ftree-ccp -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-dce
           -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
           -ftree-loop-if-convert -ftree-loop-if-convert-stores -ftree-loop-im
           -ftree-phiprop -ftree-loop-distribution
           -ftree-loop-distribute-patterns -ftree-loop-ivcanon
           -ftree-loop-linear -ftree-loop-optimize -ftree-parallelize-loops=n
           -ftree-pre -ftree-pta -ftree-reassoc -ftree-sink -ftree-sra
           -ftree-switch-conversion -ftree-ter -ftree-vect-loop-version
           -ftree-vectorize -ftree-vrp -funit-at-a-time -funroll-all-loops
           -funroll-loops -funsafe-loop-optimizations
           -funsafe-math-optimizations -funswitch-loops
           -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb
           -fwhole-program -fwpa -fuse-linker-plugin --param name=value -O
           -O0  -O1  -O2  -O3  -Os -Ofast

       Preprocessor Options
           -Aquestion=answer -A-question[=answer] -C  -dD  -dI  -dM  -dN
           -Dmacro[=defn]  -E  -H -idirafter dir -include file  -imacros file
           -iprefix file  -iwithprefix dir -iwithprefixbefore dir  -isystem
           dir -imultilib dir -isysroot dir -M  -MM  -MF  -MG  -MP  -MQ  -MT
           -nostdinc -P  -fworking-directory  -remap -trigraphs  -undef
           -Umacro  -Wp,option -Xpreprocessor option

       Assembler Option
           -Wa,option  -Xassembler option

       Linker Options
           object-file-name  -llibrary -nostartfiles  -nodefaultlibs
           -nostdlib -pie -rdynamic -s  -static  -static-libgcc
           -static-libstdc++ -shared -shared-libgcc  -symbolic -T script
           -Wl,option  -Xlinker option -u symbol

       Directory Options
           -Bprefix -Idir -iplugindir=dir -iquotedir -Ldir -specs=file -I-
           --sysroot=dir

       Machine Dependent Options
           ARC Options -EB  -EL -mmangle-cpu  -mcpu=cpu  -mtext=text-section
           -mdata=data-section  -mrodata=readonly-data-section

           ARM Options -mapcs-frame  -mno-apcs-frame -mabi=name
           -mapcs-stack-check  -mno-apcs-stack-check -mapcs-float
           -mno-apcs-float -mapcs-reentrant  -mno-apcs-reentrant
           -msched-prolog  -mno-sched-prolog -mlittle-endian  -mbig-endian
           -mwords-little-endian -mfloat-abi=name  -msoft-float  -mhard-float
           -mfpe -mfp16-format=name -mthumb-interwork  -mno-thumb-interwork
           -mcpu=name  -march=name  -mfpu=name -mstructure-size-boundary=n
           -mabort-on-noreturn -mlong-calls  -mno-long-calls -msingle-pic-base
           -mno-single-pic-base -mpic-register=reg -mnop-fun-dllimport
           -mcirrus-fix-invalid-insns -mno-cirrus-fix-invalid-insns
           -mpoke-function-name -mthumb  -marm -mtpcs-frame  -mtpcs-leaf-frame
           -mcaller-super-interworking  -mcallee-super-interworking -mtp=name
           -mword-relocations -mfix-cortex-m3-ldrd

           AVR Options -mmcu=mcu  -mno-interrupts -mcall-prologues
           -mtiny-stack  -mint8

           Blackfin Options -mcpu=cpu[-sirevision] -msim
           -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer
           -mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly
           -mno-csync-anomaly -mlow-64k -mno-low64k  -mstack-check-l1
           -mid-shared-library -mno-id-shared-library  -mshared-library-id=n
           -mleaf-id-shared-library  -mno-leaf-id-shared-library -msep-data
           -mno-sep-data  -mlong-calls  -mno-long-calls -mfast-fp -minline-plt
           -mmulticore  -mcorea  -mcoreb  -msdram -micplb

           CRIS Options -mcpu=cpu  -march=cpu  -mtune=cpu -mmax-stack-frame=n
           -melinux-stacksize=n -metrax4  -metrax100  -mpdebug  -mcc-init
           -mno-side-effects -mstack-align  -mdata-align  -mconst-align
           -m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt
           -melf  -maout  -melinux  -mlinux  -sim  -sim2 -mmul-bug-workaround
           -mno-mul-bug-workaround

           CRX Options -mmac -mpush-args

           Darwin Options -all_load  -allowable_client  -arch
           -arch_errors_fatal -arch_only  -bind_at_load  -bundle
           -bundle_loader -client_name  -compatibility_version
           -current_version -dead_strip -dependency-file  -dylib_file
           -dylinker_install_name -dynamic  -dynamiclib
           -exported_symbols_list -filelist  -flat_namespace
           -force_cpusubtype_ALL -force_flat_namespace
           -headerpad_max_install_names -iframework -image_base  -init
           -install_name  -keep_private_externs -multi_module
           -multiply_defined  -multiply_defined_unused -noall_load
           -no_dead_strip_inits_and_terms -nofixprebinding -nomultidefs
           -noprebind  -noseglinkedit -pagezero_size  -prebind
           -prebind_all_twolevel_modules -private_bundle  -read_only_relocs
           -sectalign -sectobjectsymbols  -whyload  -seg1addr -sectcreate
           -sectobjectsymbols  -sectorder -segaddr -segs_read_only_addr
           -segs_read_write_addr -seg_addr_table  -seg_addr_table_filename
           -seglinkedit -segprot  -segs_read_only_addr  -segs_read_write_addr
           -single_module  -static  -sub_library  -sub_umbrella
           -twolevel_namespace  -umbrella  -undefined -unexported_symbols_list
           -weak_reference_mismatches -whatsloaded -F -gused -gfull
           -mmacosx-version-min=version -mkernel -mone-byte-bool

           DEC Alpha Options -mno-fp-regs  -msoft-float  -malpha-as  -mgas
           -mieee  -mieee-with-inexact  -mieee-conformant -mfp-trap-mode=mode
           -mfp-rounding-mode=mode -mtrap-precision=mode  -mbuild-constants
           -mcpu=cpu-type  -mtune=cpu-type -mbwx  -mmax  -mfix  -mcix
           -mfloat-vax  -mfloat-ieee -mexplicit-relocs  -msmall-data
           -mlarge-data -msmall-text  -mlarge-text -mmemory-latency=time

           DEC Alpha/VMS Options -mvms-return-codes -mdebug-main=prefix
           -mmalloc64

           FR30 Options -msmall-model -mno-lsim

           FRV Options -mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64 -mhard-float
           -msoft-float -malloc-cc  -mfixed-cc  -mdword  -mno-dword -mdouble
           -mno-double -mmedia  -mno-media  -mmuladd  -mno-muladd -mfdpic
           -minline-plt -mgprel-ro  -multilib-library-pic -mlinked-fp
           -mlong-calls  -malign-labels -mlibrary-pic  -macc-4  -macc-8 -mpack
           -mno-pack  -mno-eflags  -mcond-move  -mno-cond-move
           -moptimize-membar -mno-optimize-membar -mscc  -mno-scc  -mcond-exec
           -mno-cond-exec -mvliw-branch  -mno-vliw-branch -mmulti-cond-exec
           -mno-multi-cond-exec  -mnested-cond-exec -mno-nested-cond-exec
           -mtomcat-stats -mTLS -mtls -mcpu=cpu

           GNU/Linux Options -mglibc -muclibc -mbionic -mandroid
           -tno-android-cc -tno-android-ld

           H8/300 Options -mrelax  -mh  -ms  -mn  -mint32  -malign-300

           HPPA Options -march=architecture-type -mbig-switch
           -mdisable-fpregs  -mdisable-indexing -mfast-indirect-calls  -mgas
           -mgnu-ld   -mhp-ld -mfixed-range=register-range -mjump-in-delay
           -mlinker-opt -mlong-calls -mlong-load-store  -mno-big-switch
           -mno-disable-fpregs -mno-disable-indexing  -mno-fast-indirect-calls
           -mno-gas -mno-jump-in-delay  -mno-long-load-store
           -mno-portable-runtime  -mno-soft-float -mno-space-regs
           -msoft-float  -mpa-risc-1-0 -mpa-risc-1-1  -mpa-risc-2-0
           -mportable-runtime -mschedule=cpu-type  -mspace-regs  -msio  -mwsio
           -munix=unix-std  -nolibdld  -static  -threads

           i386 and x86-64 Options -mtune=cpu-type  -march=cpu-type
           -mfpmath=unit -masm=dialect  -mno-fancy-math-387 -mno-fp-ret-in-387
           -msoft-float -mno-wide-multiply  -mrtd  -malign-double
           -mpreferred-stack-boundary=num -mincoming-stack-boundary=num -mcld
           -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper -mprefer-avx128
           -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx
           -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfused-madd -msse4a
           -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlwp -mthreads
           -mno-align-stringops  -minline-all-stringops
           -minline-stringops-dynamically -mstringop-strategy=alg -mpush-args
           -maccumulate-outgoing-args  -m128bit-long-double
           -m96bit-long-double  -mregparm=num  -msseregparm -mveclibabi=type
           -mvect8-ret-in-mem -mpc32 -mpc64 -mpc80 -mstackrealign
           -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs
           -mcmodel=code-model -mabi=name -m32  -m64
           -mlarge-data-threshold=num -msse2avx -mfentry -m8bit-idiv
           -mavx256-split-unaligned-load -mavx256-split-unaligned-store

           i386 and x86-64 Windows Options -mconsole -mcygwin -mno-cygwin
           -mdll -mnop-fun-dllimport -mthread -municode -mwin32 -mwindows
           -fno-set-stack-executable

           IA-64 Options -mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld
           -mno-pic -mvolatile-asm-stop  -mregister-names  -msdata -mno-sdata
           -mconstant-gp  -mauto-pic  -mfused-madd
           -minline-float-divide-min-latency
           -minline-float-divide-max-throughput -mno-inline-float-divide
           -minline-int-divide-min-latency -minline-int-divide-max-throughput
           -mno-inline-int-divide -minline-sqrt-min-latency
           -minline-sqrt-max-throughput -mno-inline-sqrt -mdwarf2-asm
           -mearly-stop-bits -mfixed-range=register-range -mtls-size=tls-size
           -mtune=cpu-type -milp32 -mlp64 -msched-br-data-spec
           -msched-ar-data-spec -msched-control-spec -msched-br-in-data-spec
           -msched-ar-in-data-spec -msched-in-control-spec -msched-spec-ldc
           -msched-spec-control-ldc -msched-prefer-non-data-spec-insns
           -msched-prefer-non-control-spec-insns
           -msched-stop-bits-after-every-cycle
           -msched-count-spec-in-critical-path
           -msel-sched-dont-check-control-spec -msched-fp-mem-deps-zero-cost
           -msched-max-memory-insns-hard-limit -msched-max-memory-insns=max-
           insns

           IA-64/VMS Options -mvms-return-codes -mdebug-main=prefix -mmalloc64

           LM32 Options -mbarrel-shift-enabled -mdivide-enabled
           -mmultiply-enabled -msign-extend-enabled -muser-enabled

           M32R/D Options -m32r2 -m32rx -m32r -mdebug -malign-loops
           -mno-align-loops -missue-rate=number -mbranch-cost=number
           -mmodel=code-size-model-type -msdata=sdata-type -mno-flush-func
           -mflush-func=name -mno-flush-trap -mflush-trap=number -G num

           M32C Options -mcpu=cpu -msim -memregs=number

           M680x0 Options -march=arch  -mcpu=cpu  -mtune=tune -m68000  -m68020
           -m68020-40  -m68020-60  -m68030  -m68040 -m68060  -mcpu32  -m5200
           -m5206e  -m528x  -m5307  -m5407 -mcfv4e  -mbitfield  -mno-bitfield
           -mc68000  -mc68020 -mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div
           -mshort -mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel
           -malign-int  -mstrict-align  -msep-data  -mno-sep-data
           -mshared-library-id=n  -mid-shared-library  -mno-id-shared-library
           -mxgot -mno-xgot

           M68hc1x Options -m6811  -m6812  -m68hc11  -m68hc12   -m68hcs12
           -mauto-incdec  -minmax  -mlong-calls  -mshort
           -msoft-reg-count=count

           MCore Options -mhardlit  -mno-hardlit  -mdiv  -mno-div
           -mrelax-immediates -mno-relax-immediates  -mwide-bitfields
           -mno-wide-bitfields -m4byte-functions  -mno-4byte-functions
           -mcallgraph-data -mno-callgraph-data  -mslow-bytes  -mno-slow-bytes
           -mno-lsim -mlittle-endian  -mbig-endian  -m210  -m340
           -mstack-increment

           MeP Options -mabsdiff -mall-opts -maverage -mbased=n -mbitops -mc=n
           -mclip -mconfig=name -mcop -mcop32 -mcop64 -mivc2 -mdc -mdiv -meb
           -mel -mio-volatile -ml -mleadz -mm -mminmax -mmult -mno-opts
           -mrepeat -ms -msatur -msdram -msim -msimnovec -mtf -mtiny=n

           MicroBlaze Options -msoft-float -mhard-float -msmall-divides
           -mcpu=cpu -mmemcpy -mxl-soft-mul -mxl-soft-div -mxl-barrel-shift
           -mxl-pattern-compare -mxl-stack-check -mxl-gp-opt -mno-clearbss
           -mxl-multiply-high -mxl-float-convert -mxl-float-sqrt
           -mxl-mode-app-model

           MIPS Options -EL  -EB  -march=arch  -mtune=arch -mips1  -mips2
           -mips3  -mips4  -mips32  -mips32r2 -mips64  -mips64r2 -mips16
           -mno-mips16  -mflip-mips16 -minterlink-mips16
           -mno-interlink-mips16 -mabi=abi  -mabicalls  -mno-abicalls -mshared
           -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot -mgp32  -mgp64
           -mfp32  -mfp64  -mhard-float  -msoft-float -msingle-float
           -mdouble-float  -mdsp  -mno-dsp  -mdspr2  -mno-dspr2 -mfpu=fpu-type
           -msmartmips  -mno-smartmips -mpaired-single  -mno-paired-single
           -mdmx  -mno-mdmx -mips3d  -mno-mips3d  -mmt  -mno-mt  -mllsc
           -mno-llsc -mlong64  -mlong32  -msym32  -mno-sym32 -Gnum
           -mlocal-sdata  -mno-local-sdata -mextern-sdata  -mno-extern-sdata
           -mgpopt  -mno-gopt -membedded-data  -mno-embedded-data
           -muninit-const-in-rodata  -mno-uninit-const-in-rodata
           -mcode-readable=setting -msplit-addresses  -mno-split-addresses
           -mexplicit-relocs  -mno-explicit-relocs -mcheck-zero-division
           -mno-check-zero-division -mdivide-traps  -mdivide-breaks -mmemcpy
           -mno-memcpy  -mlong-calls  -mno-long-calls -mmad  -mno-mad
           -mfused-madd  -mno-fused-madd  -nocpp -mfix-r4000  -mno-fix-r4000
           -mfix-r4400  -mno-fix-r4400 -mfix-r10000 -mno-fix-r10000
           -mfix-vr4120  -mno-fix-vr4120 -mfix-vr4130  -mno-fix-vr4130
           -mfix-sb1  -mno-fix-sb1 -mflush-func=func  -mno-flush-func
           -mbranch-cost=num  -mbranch-likely  -mno-branch-likely
           -mfp-exceptions -mno-fp-exceptions -mvr4130-align -mno-vr4130-align
           -msynci -mno-synci -mrelax-pic-calls -mno-relax-pic-calls
           -mmcount-ra-address

           MMIX Options -mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon
           -mabi=gnu -mabi=mmixware  -mzero-extend  -mknuthdiv
           -mtoplevel-symbols -melf  -mbranch-predict  -mno-branch-predict
           -mbase-addresses -mno-base-addresses  -msingle-exit
           -mno-single-exit

           MN10300 Options -mmult-bug  -mno-mult-bug -mno-am33 -mam33 -mam33-2
           -mam34 -mtune=cpu-type -mreturn-pointer-on-d0 -mno-crt0  -mrelax
           -mliw

           PDP-11 Options -mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45
           -m10 -mbcopy  -mbcopy-builtin  -mint32  -mno-int16 -mint16
           -mno-int32  -mfloat32  -mno-float64 -mfloat64  -mno-float32
           -mabshi  -mno-abshi -mbranch-expensive  -mbranch-cheap -munix-asm
           -mdec-asm

           picoChip Options -mae=ae_type -mvliw-lookahead=N
           -msymbol-as-address -mno-inefficient-warnings

           PowerPC Options See RS/6000 and PowerPC Options.

           RS/6000 and PowerPC Options -mcpu=cpu-type -mtune=cpu-type
           -mcmodel=code-model -mpower  -mno-power  -mpower2  -mno-power2
           -mpowerpc  -mpowerpc64  -mno-powerpc -maltivec  -mno-altivec
           -mpowerpc-gpopt  -mno-powerpc-gpopt -mpowerpc-gfxopt
           -mno-powerpc-gfxopt -mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb
           -mpopcntd -mno-popcntd -mfprnd  -mno-fprnd -mcmpb -mno-cmpb
           -mmfpgpr -mno-mfpgpr -mhard-dfp -mno-hard-dfp -mnew-mnemonics
           -mold-mnemonics -mfull-toc   -mminimal-toc  -mno-fp-in-toc
           -mno-sum-in-toc -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe
           -malign-power  -malign-natural -msoft-float  -mhard-float
           -mmultiple  -mno-multiple -msingle-float -mdouble-float
           -msimple-fpu -mstring  -mno-string  -mupdate  -mno-update
           -mavoid-indexed-addresses  -mno-avoid-indexed-addresses
           -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align
           -mstrict-align  -mno-strict-align  -mrelocatable -mno-relocatable
           -mrelocatable-lib  -mno-relocatable-lib -mtoc  -mno-toc  -mlittle
           -mlittle-endian  -mbig  -mbig-endian -mdynamic-no-pic  -maltivec
           -mswdiv  -msingle-pic-base -mprioritize-restricted-insns=priority
           -msched-costly-dep=dependence_type -minsert-sched-nops=scheme
           -mcall-sysv  -mcall-netbsd -maix-struct-return
           -msvr4-struct-return -mabi=abi-type -msecure-plt -mbss-plt
           -mblock-move-inline-limit=num -misel -mno-isel -misel=yes
           -misel=no -mspe -mno-spe -mspe=yes  -mspe=no -mpaired
           -mgen-cell-microcode -mwarn-cell-microcode -mvrsave -mno-vrsave
           -mmulhw -mno-mulhw -mdlmzb -mno-dlmzb -mfloat-gprs=yes
           -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double -mprototype
           -mno-prototype -msim  -mmvme  -mads  -myellowknife  -memb  -msdata
           -msdata=opt  -mvxworks  -G num  -pthread -mrecip -mrecip=opt
           -mno-recip -mrecip-precision -mno-recip-precision -mveclibabi=type
           -mfriz -mno-friz

           RX Options -m64bit-doubles  -m32bit-doubles  -fpu  -nofpu -mcpu=
           -mbig-endian-data -mlittle-endian-data -msmall-data -msim  -mno-sim
           -mas100-syntax -mno-as100-syntax -mrelax -mmax-constant-size=
           -mint-register= -msave-acc-in-interrupts

           S/390 and zSeries Options -mtune=cpu-type  -march=cpu-type
           -mhard-float  -msoft-float  -mhard-dfp -mno-hard-dfp
           -mlong-double-64 -mlong-double-128 -mbackchain  -mno-backchain
           -mpacked-stack  -mno-packed-stack -msmall-exec  -mno-small-exec
           -mmvcle -mno-mvcle -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch
           -mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd
           -mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard

           Score Options -meb -mel -mnhwloop -muls -mmac -mscore5 -mscore5u
           -mscore7 -mscore7d

           SH Options -m1  -m2  -m2e -m2a-nofpu -m2a-single-only -m2a-single
           -m2a -m3  -m3e -m4-nofpu  -m4-single-only  -m4-single  -m4
           -m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al -m5-64media
           -m5-64media-nofpu -m5-32media  -m5-32media-nofpu -m5-compact
           -m5-compact-nofpu -mb  -ml  -mdalign  -mrelax -mbigtable -mfmovd
           -mhitachi -mrenesas -mno-renesas -mnomacsave -mieee -mno-ieee
           -mbitops  -misize  -minline-ic_invalidate -mpadstruct -mspace
           -mprefergot  -musermode -multcost=number -mdiv=strategy
           -mdivsi3_libfunc=name -mfixed-range=register-range -madjust-unroll
           -mindexed-addressing -mgettrcost=number -mpt-fixed
           -maccumulate-outgoing-args -minvalid-symbols

           Solaris 2 Options -mimpure-text  -mno-impure-text -threads
           -pthreads -pthread

           SPARC Options -mcpu=cpu-type -mtune=cpu-type -mcmodel=code-model
           -m32  -m64  -mapp-regs  -mno-app-regs -mfaster-structs
           -mno-faster-structs -mfpu  -mno-fpu  -mhard-float  -msoft-float
           -mhard-quad-float  -msoft-quad-float -mlittle-endian -mstack-bias
           -mno-stack-bias -munaligned-doubles  -mno-unaligned-doubles
           -mv8plus  -mno-v8plus  -mvis  -mno-vis -mfix-at697f

           SPU Options -mwarn-reloc -merror-reloc -msafe-dma -munsafe-dma
           -mbranch-hints -msmall-mem -mlarge-mem -mstdmain
           -mfixed-range=register-range -mea32 -mea64
           -maddress-space-conversion -mno-address-space-conversion
           -mcache-size=cache-size -matomic-updates -mno-atomic-updates

           System V Options -Qy  -Qn  -YP,paths  -Ym,dir

           V850 Options -mlong-calls  -mno-long-calls  -mep  -mno-ep
           -mprolog-function  -mno-prolog-function  -mspace -mtda=n  -msda=n
           -mzda=n -mapp-regs  -mno-app-regs -mdisable-callt
           -mno-disable-callt -mv850e2v3 -mv850e2 -mv850e1 -mv850es -mv850e
           -mv850  -mbig-switch

           VAX Options -mg  -mgnu  -munix

           VxWorks Options -mrtp  -non-static  -Bstatic  -Bdynamic -Xbind-lazy
           -Xbind-now

           x86-64 Options See i386 and x86-64 Options.

           Xstormy16 Options -msim

           Xtensa Options -mconst16 -mno-const16 -mfused-madd  -mno-fused-madd
           -mforce-no-pic -mserialize-volatile  -mno-serialize-volatile
           -mtext-section-literals  -mno-text-section-literals -mtarget-align
           -mno-target-align -mlongcalls  -mno-longcalls

           zSeries Options See S/390 and zSeries Options.

       Code Generation Options
           -fcall-saved-reg  -fcall-used-reg -ffixed-reg  -fexceptions
           -fnon-call-exceptions  -funwind-tables -fasynchronous-unwind-tables
           -finhibit-size-directive  -finstrument-functions
           -finstrument-functions-exclude-function-list=sym,sym,...
           -finstrument-functions-exclude-file-list=file,file,...  -fno-common
           -fno-ident -fpcc-struct-return  -fpic  -fPIC -fpie -fPIE
           -fno-jump-tables -frecord-gcc-switches -freg-struct-return
           -fshort-enums -fshort-double  -fshort-wchar -fverbose-asm
           -fpack-struct[=n]  -fstack-check -fstack-limit-register=reg
           -fstack-limit-symbol=sym -fno-stack-limit -fsplit-stack
           -fleading-underscore  -ftls-model=model -ftrapv  -fwrapv
           -fbounds-check -fvisibility -fstrict-volatile-bitfields

   Options Controlling the Kind of Output
       Compilation can involve up to four stages: preprocessing, compilation
       proper, assembly and linking, always in that order.  GCC is capable of
       preprocessing and compiling several files either into several assembler
       input files, or into one assembler input file; then each assembler
       input file produces an object file, and linking combines all the object
       files (those newly compiled, and those specified as input) into an
       executable file.

       For any given input file, the file name suffix determines what kind of
       compilation is done:

       file.c
           C source code which must be preprocessed.

       file.i
           C source code which should not be preprocessed.

       file.ii
           C++ source code which should not be preprocessed.

       file.m
           Objective-C source code.  Note that you must link with the libobjc
           library to make an Objective-C program work.

       file.mi
           Objective-C source code which should not be preprocessed.

       file.mm
       file.M
           Objective-C++ source code.  Note that you must link with the
           libobjc library to make an Objective-C++ program work.  Note that
           .M refers to a literal capital M.

       file.mii
           Objective-C++ source code which should not be preprocessed.

       file.h
           C, C++, Objective-C or Objective-C++ header file to be turned into
           a precompiled header (default), or C, C++ header file to be turned
           into an Ada spec (via the -fdump-ada-spec switch).

       file.cc
       file.cp
       file.cxx
       file.cpp
       file.CPP
       file.c++
       file.C
           C++ source code which must be preprocessed.  Note that in .cxx, the
           last two letters must both be literally x.  Likewise, .C refers to
           a literal capital C.

       file.mm
       file.M
           Objective-C++ source code which must be preprocessed.

       file.mii
           Objective-C++ source code which should not be preprocessed.

       file.hh
       file.H
       file.hp
       file.hxx
       file.hpp
       file.HPP
       file.h++
       file.tcc
           C++ header file to be turned into a precompiled header or Ada spec.

       file.f
       file.for
       file.ftn
           Fixed form Fortran source code which should not be preprocessed.

       file.F
       file.FOR
       file.fpp
       file.FPP
       file.FTN
           Fixed form Fortran source code which must be preprocessed (with the
           traditional preprocessor).

       file.f90
       file.f95
       file.f03
       file.f08
           Free form Fortran source code which should not be preprocessed.

       file.F90
       file.F95
       file.F03
       file.F08
           Free form Fortran source code which must be preprocessed (with the
           traditional preprocessor).

       file.go
           Go source code.

       file.ads
           Ada source code file which contains a library unit declaration (a
           declaration of a package, subprogram, or generic, or a generic
           instantiation), or a library unit renaming declaration (a package,
           generic, or subprogram renaming declaration).  Such files are also
           called specs.

       file.adb
           Ada source code file containing a library unit body (a subprogram
           or package body).  Such files are also called bodies.

       file.s
           Assembler code.

       file.S
       file.sx
           Assembler code which must be preprocessed.

       other
           An object file to be fed straight into linking.  Any file name with
           no recognized suffix is treated this way.

       You can specify the input language explicitly with the -x option:

       -x language
           Specify explicitly the language for the following input files
           (rather than letting the compiler choose a default based on the
           file name suffix).  This option applies to all following input
           files until the next -x option.  Possible values for language are:

                   c  c-header  cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   f77  f77-cpp-input f95  f95-cpp-input
                   go
                   java

       -x none
           Turn off any specification of a language, so that subsequent files
           are handled according to their file name suffixes (as they are if
           -x has not been used at all).

       -pass-exit-codes
           Normally the gcc program will exit with the code of 1 if any phase
           of the compiler returns a non-success return code.  If you specify
           -pass-exit-codes, the gcc program will instead return with
           numerically highest error produced by any phase that returned an
           error indication.  The C, C++, and Fortran frontends return 4, if
           an internal compiler error is encountered.

       If you only want some of the stages of compilation, you can use -x (or
       filename suffixes) to tell gcc where to start, and one of the options
       -c, -S, or -E to say where gcc is to stop.  Note that some combinations
       (for example, -x cpp-output -E) instruct gcc to do nothing at all.

       -c  Compile or assemble the source files, but do not link.  The linking
           stage simply is not done.  The ultimate output is in the form of an
           object file for each source file.

           By default, the object file name for a source file is made by
           replacing the suffix .c, .i, .s, etc., with .o.

           Unrecognized input files, not requiring compilation or assembly,
           are ignored.

       -S  Stop after the stage of compilation proper; do not assemble.  The
           output is in the form of an assembler code file for each non-
           assembler input file specified.

           By default, the assembler file name for a source file is made by
           replacing the suffix .c, .i, etc., with .s.

           Input files that don't require compilation are ignored.

       -E  Stop after the preprocessing stage; do not run the compiler proper.
           The output is in the form of preprocessed source code, which is
           sent to the standard output.

           Input files which don't require preprocessing are ignored.

       -o file
           Place output in file file.  This applies regardless to whatever
           sort of output is being produced, whether it be an executable file,
           an object file, an assembler file or preprocessed C code.

           If -o is not specified, the default is to put an executable file in
           a.out, the object file for source.suffix in source.o, its assembler
           file in source.s, a precompiled header file in source.suffix.gch,
           and all preprocessed C source on standard output.

       -v  Print (on standard error output) the commands executed to run the
           stages of compilation.  Also print the version number of the
           compiler driver program and of the preprocessor and the compiler
           proper.

       -###
           Like -v except the commands are not executed and arguments are
           quoted unless they contain only alphanumeric characters or "./-_".
           This is useful for shell scripts to capture the driver-generated
           command lines.

       -pipe
           Use pipes rather than temporary files for communication between the
           various stages of compilation.  This fails to work on some systems
           where the assembler is unable to read from a pipe; but the GNU
           assembler has no trouble.

       --help
           Print (on the standard output) a description of the command line
           options understood by gcc.  If the -v option is also specified then
           --help will also be passed on to the various processes invoked by
           gcc, so that they can display the command line options they accept.
           If the -Wextra option has also been specified (prior to the --help
           option), then command line options which have no documentation
           associated with them will also be displayed.

       --target-help
           Print (on the standard output) a description of target-specific
           command line options for each tool.  For some targets extra target-
           specific information may also be printed.

       --help={class|[^]qualifier}[,...]
           Print (on the standard output) a description of the command line
           options understood by the compiler that fit into all specified
           classes and qualifiers.  These are the supported classes:

           optimizers
               This will display all of the optimization options supported by
               the compiler.

           warnings
               This will display all of the options controlling warning
               messages produced by the compiler.

           target
               This will display target-specific options.  Unlike the
               --target-help option however, target-specific options of the
               linker and assembler will not be displayed.  This is because
               those tools do not currently support the extended --help=
               syntax.

           params
               This will display the values recognized by the --param option.

           language
               This will display the options supported for language, where
               language is the name of one of the languages supported in this
               version of GCC.

           common
               This will display the options that are common to all languages.

           These are the supported qualifiers:

           undocumented
               Display only those options which are undocumented.

           joined
               Display options which take an argument that appears after an
               equal sign in the same continuous piece of text, such as:
               --help=target.

           separate
               Display options which take an argument that appears as a
               separate word following the original option, such as: -o
               output-file.

           Thus for example to display all the undocumented target-specific
           switches supported by the compiler the following can be used:

                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing it with the ^
           character, so for example to display all binary warning options
           (i.e., ones that are either on or off and that do not take an
           argument), which have a description the following can be used:

                   --help=warnings,^joined,^undocumented

           The argument to --help= should not consist solely of inverted
           qualifiers.

           Combining several classes is possible, although this usually
           restricts the output by so much that there is nothing to display.
           One case where it does work however is when one of the classes is
           target.  So for example to display all the target-specific
           optimization options the following can be used:

                   --help=target,optimizers

           The --help= option can be repeated on the command line.  Each
           successive use will display its requested class of options,
           skipping those that have already been displayed.

           If the -Q option appears on the command line before the --help=
           option, then the descriptive text displayed by --help= is changed.
           Instead of describing the displayed options, an indication is given
           as to whether the option is enabled, disabled or set to a specific
           value (assuming that the compiler knows this at the point where the
           --help= option is used).

           Here is a truncated example from the ARM port of gcc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous command line
           options, so for example it is possible to find out which
           optimizations are enabled at -O2 by using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary optimizations are
           enabled by -O3 by using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       -no-canonical-prefixes
           Do not expand any symbolic links, resolve references to /../ or
           /./, or make the path absolute when generating a relative prefix.

       --version
           Display the version number and copyrights of the invoked GCC.

       -wrapper
           Invoke all subcommands under a wrapper program.  The name of the
           wrapper program and its parameters are passed as a comma separated
           list.

                   gcc -c t.c -wrapper gdb,--args

           This will invoke all subprograms of gcc under gdb --args, thus the
           invocation of cc1 will be gdb --args cc1 ....

       -fplugin=name.so
           Load the plugin code in file name.so, assumed to be a shared object
           to be dlopen'd by the compiler.  The base name of the shared object
           file is used to identify the plugin for the purposes of argument
           parsing (See -fplugin-arg-name-key=value below).  Each plugin
           should define the callback functions specified in the Plugins API.

       -fplugin-arg-name-key=value
           Define an argument called key with a value of value for the plugin
           called name.

       -fdump-ada-spec[-slim]
           For C and C++ source and include files, generate corresponding Ada
           specs.

       -fdump-go-spec=file
           For input files in any language, generate corresponding Go
           declarations in file.  This generates Go "const", "type", "var",
           and "func" declarations which may be a useful way to start writing
           a Go interface to code written in some other language.

       @file
           Read command-line options from file.  The options read are inserted
           in place of the original @file option.  If file does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in file are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The file may itself contain additional
           @file options; any such options will be processed recursively.

   Compiling C++ Programs
       C++ source files conventionally use one of the suffixes .C, .cc, .cpp,
       .CPP, .c++, .cp, or .cxx; C++ header files often use .hh, .hpp, .H, or
       (for shared template code) .tcc; and preprocessed C++ files use the
       suffix .ii.  GCC recognizes files with these names and compiles them as
       C++ programs even if you call the compiler the same way as for
       compiling C programs (usually with the name gcc).

       However, the use of gcc does not add the C++ library.  g++ is a program
       that calls GCC and treats .c, .h and .i files as C++ source files
       instead of C source files unless -x is used, and automatically
       specifies linking against the C++ library.  This program is also useful
       when precompiling a C header file with a .h extension for use in C++
       compilations.  On many systems, g++ is also installed with the name
       c++.

       When you compile C++ programs, you may specify many of the same
       command-line options that you use for compiling programs in any
       language; or command-line options meaningful for C and related
       languages; or options that are meaningful only for C++ programs.

   Options Controlling C Dialect
       The following options control the dialect of C (or languages derived
       from C, such as C++, Objective-C and Objective-C++) that the compiler
       accepts:

       -ansi
           In C mode, this is equivalent to -std=c90. In C++ mode, it is
           equivalent to -std=c++98.

           This turns off certain features of GCC that are incompatible with
           ISO C90 (when compiling C code), or of standard C++ (when compiling
           C++ code), such as the "asm" and "typeof" keywords, and predefined
           macros such as "unix" and "vax" that identify the type of system
           you are using.  It also enables the undesirable and rarely used ISO
           trigraph feature.  For the C compiler, it disables recognition of
           C++ style // comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__", "__inline__" and
           "__typeof__" continue to work despite -ansi.  You would not want to
           use them in an ISO C program, of course, but it is useful to put
           them in header files that might be included in compilations done
           with -ansi.  Alternate predefined macros such as "__unix__" and
           "__vax__" are also available, with or without -ansi.

           The -ansi option does not cause non-ISO programs to be rejected
           gratuitously.  For that, -pedantic is required in addition to
           -ansi.

           The macro "__STRICT_ANSI__" is predefined when the -ansi option is
           used.  Some header files may notice this macro and refrain from
           declaring certain functions or defining certain macros that the ISO
           standard doesn't call for; this is to avoid interfering with any
           programs that might use these names for other things.

           Functions that would normally be built in but do not have semantics
           defined by ISO C (such as "alloca" and "ffs") are not built-in
           functions when -ansi is used.

       -std=
           Determine the language standard.   This option is currently only
           supported when compiling C or C++.

           The compiler can accept several base standards, such as c90 or
           c++98, and GNU dialects of those standards, such as gnu90 or
           gnu++98.  By specifying a base standard, the compiler will accept
           all programs following that standard and those using GNU extensions
           that do not contradict it.  For example, -std=c90 turns off certain
           features of GCC that are incompatible with ISO C90, such as the
           "asm" and "typeof" keywords, but not other GNU extensions that do
           not have a meaning in ISO C90, such as omitting the middle term of
           a "?:" expression. On the other hand, by specifying a GNU dialect
           of a standard, all features the compiler support are enabled, even
           when those features change the meaning of the base standard and
           some strict-conforming programs may be rejected.  The particular
           standard is used by -pedantic to identify which features are GNU
           extensions given that version of the standard. For example
           -std=gnu90 -pedantic would warn about C++ style // comments, while
           -std=gnu99 -pedantic would not.

           A value for this option must be provided; possible values are

           c90
           c89
           iso9899:1990
               Support all ISO C90 programs (certain GNU extensions that
               conflict with ISO C90 are disabled). Same as -ansi for C code.

           iso9899:199409
               ISO C90 as modified in amendment 1.

           c99
           c9x
           iso9899:1999
           iso9899:199x
               ISO C99.  Note that this standard is not yet fully supported;
               see <http://gcc.gnu.org/gcc-4.6/c99status.html> for more
               information.  The names c9x and iso9899:199x are deprecated.

           c1x ISO C1X, the draft of the next revision of the ISO C standard.
               Support is limited and experimental and features enabled by
               this option may be changed or removed if changed in or removed
               from the standard draft.

           gnu90
           gnu89
               GNU dialect of ISO C90 (including some C99 features). This is
               the default for C code.

           gnu99
           gnu9x
               GNU dialect of ISO C99.  When ISO C99 is fully implemented in
               GCC, this will become the default.  The name gnu9x is
               deprecated.

           gnu1x
               GNU dialect of ISO C1X.  Support is limited and experimental
               and features enabled by this option may be changed or removed
               if changed in or removed from the standard draft.

           c++98
               The 1998 ISO C++ standard plus amendments. Same as -ansi for
               C++ code.

           gnu++98
               GNU dialect of -std=c++98.  This is the default for C++ code.

           c++0x
               The working draft of the upcoming ISO C++0x standard. This
               option enables experimental features that are likely to be
               included in C++0x. The working draft is constantly changing,
               and any feature that is enabled by this flag may be removed
               from future versions of GCC if it is not part of the C++0x
               standard.

           gnu++0x
               GNU dialect of -std=c++0x. This option enables experimental
               features that may be removed in future versions of GCC.

       -fgnu89-inline
           The option -fgnu89-inline tells GCC to use the traditional GNU
           semantics for "inline" functions when in C99 mode.
             This option is accepted and ignored by GCC versions 4.1.3 up to
           but not including 4.3.  In GCC versions 4.3 and later it changes
           the behavior of GCC in C99 mode.  Using this option is roughly
           equivalent to adding the "gnu_inline" function attribute to all
           inline functions.

           The option -fno-gnu89-inline explicitly tells GCC to use the C99
           semantics for "inline" when in C99 or gnu99 mode (i.e., it
           specifies the default behavior).  This option was first supported
           in GCC 4.3.  This option is not supported in -std=c90 or -std=gnu90
           mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and
           "__GNUC_STDC_INLINE__" may be used to check which semantics are in
           effect for "inline" functions.

       -aux-info filename
           Output to the given filename prototyped declarations for all
           functions declared and/or defined in a translation unit, including
           those in header files.  This option is silently ignored in any
           language other than C.

           Besides declarations, the file indicates, in comments, the origin
           of each declaration (source file and line), whether the declaration
           was implicit, prototyped or unprototyped (I, N for new or O for
           old, respectively, in the first character after the line number and
           the colon), and whether it came from a declaration or a definition
           (C or F, respectively, in the following character).  In the case of
           function definitions, a K&R-style list of arguments followed by
           their declarations is also provided, inside comments, after the
           declaration.

       -fno-asm
           Do not recognize "asm", "inline" or "typeof" as a keyword, so that
           code can use these words as identifiers.  You can use the keywords
           "__asm__", "__inline__" and "__typeof__" instead.  -ansi implies
           -fno-asm.

           In C++, this switch only affects the "typeof" keyword, since "asm"
           and "inline" are standard keywords.  You may want to use the
           -fno-gnu-keywords flag instead, which has the same effect.  In C99
           mode (-std=c99 or -std=gnu99), this switch only affects the "asm"
           and "typeof" keywords, since "inline" is a standard keyword in ISO
           C99.

       -fno-builtin
       -fno-builtin-function
           Don't recognize built-in functions that do not begin with
           __builtin_ as prefix.

           GCC normally generates special code to handle certain built-in
           functions more efficiently; for instance, calls to "alloca" may
           become single instructions that adjust the stack directly, and
           calls to "memcpy" may become inline copy loops.  The resulting code
           is often both smaller and faster, but since the function calls no
           longer appear as such, you cannot set a breakpoint on those calls,
           nor can you change the behavior of the functions by linking with a
           different library.  In addition, when a function is recognized as a
           built-in function, GCC may use information about that function to
           warn about problems with calls to that function, or to generate
           more efficient code, even if the resulting code still contains
           calls to that function.  For example, warnings are given with
           -Wformat for bad calls to "printf", when "printf" is built in, and
           "strlen" is known not to modify global memory.

           With the -fno-builtin-function option only the built-in function
           function is disabled.  function must not begin with __builtin_.  If
           a function is named that is not built-in in this version of GCC,
           this option is ignored.  There is no corresponding
           -fbuiltin-function option; if you wish to enable built-in functions
           selectively when using -fno-builtin or -ffreestanding, you may
           define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       -fhosted
           Assert that compilation takes place in a hosted environment.  This
           implies -fbuiltin.  A hosted environment is one in which the entire
           standard library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except a kernel.
           This is equivalent to -fno-freestanding.

       -ffreestanding
           Assert that compilation takes place in a freestanding environment.
           This implies -fno-builtin.  A freestanding environment is one in
           which the standard library may not exist, and program startup may
           not necessarily be at "main".  The most obvious example is an OS
           kernel.  This is equivalent to -fno-hosted.

       -fopenmp
           Enable handling of OpenMP directives "#pragma omp" in C/C++ and
           "!$omp" in Fortran.  When -fopenmp is specified, the compiler
           generates parallel code according to the OpenMP Application Program
           Interface v3.0 <http://www.openmp.org/>.  This option implies
           -pthread, and thus is only supported on targets that have support
           for -pthread.

       -fms-extensions
           Accept some non-standard constructs used in Microsoft header files.

           In C++ code, this allows member names in structures to be similar
           to previous types declarations.

                   typedef int UOW;
                   struct ABC {
                     UOW UOW;
                   };

           Some cases of unnamed fields in structures and unions are only
           accepted with this option.

       -fplan9-extensions
           Accept some non-standard constructs used in Plan 9 code.

           This enables -fms-extensions, permits passing pointers to
           structures with anonymous fields to functions which expect pointers
           to elements of the type of the field, and permits referring to
           anonymous fields declared using a typedef.    This is only
           supported for C, not C++.

       -trigraphs
           Support ISO C trigraphs.  The -ansi option (and -std options for
           strict ISO C conformance) implies -trigraphs.

       -no-integrated-cpp
           Performs a compilation in two passes: preprocessing and compiling.
           This option allows a user supplied "cc1", "cc1plus", or "cc1obj"
           via the -B option.  The user supplied compilation step can then add
           in an additional preprocessing step after normal preprocessing but
           before compiling.  The default is to use the integrated cpp
           (internal cpp)

           The semantics of this option will change if "cc1", "cc1plus", and
           "cc1obj" are merged.

       -traditional
       -traditional-cpp
           Formerly, these options caused GCC to attempt to emulate a pre-
           standard C compiler.  They are now only supported with the -E
           switch.  The preprocessor continues to support a pre-standard mode.
           See the GNU CPP manual for details.

       -fcond-mismatch
           Allow conditional expressions with mismatched types in the second
           and third arguments.  The value of such an expression is void.
           This option is not supported for C++.

       -flax-vector-conversions
           Allow implicit conversions between vectors with differing numbers
           of elements and/or incompatible element types.  This option should
           not be used for new code.

       -funsigned-char
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char" should be.  It
           is either like "unsigned char" by default or like "signed char" by
           default.

           Ideally, a portable program should always use "signed char" or
           "unsigned char" when it depends on the signedness of an object.
           But many programs have been written to use plain "char" and expect
           it to be signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its inverse, let
           you make such a program work with the opposite default.

           The type "char" is always a distinct type from each of "signed
           char" or "unsigned char", even though its behavior is always just
           like one of those two.

       -fsigned-char
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to -fno-unsigned-char, which is the
           negative form of -funsigned-char.  Likewise, the option
           -fno-signed-char is equivalent to -funsigned-char.

       -fsigned-bitfields
       -funsigned-bitfields
       -fno-signed-bitfields
       -fno-unsigned-bitfields
           These options control whether a bit-field is signed or unsigned,
           when the declaration does not use either "signed" or "unsigned".
           By default, such a bit-field is signed, because this is consistent:
           the basic integer types such as "int" are signed types.

   Options Controlling C++ Dialect
       This section describes the command-line options that are only
       meaningful for C++ programs; but you can also use most of the GNU
       compiler options regardless of what language your program is in.  For
       example, you might compile a file "firstClass.C" like this:

               g++ -g -frepo -O -c firstClass.C

       In this example, only -frepo is an option meant only for C++ programs;
       you can use the other options with any language supported by GCC.

       Here is a list of options that are only for compiling C++ programs:

       -fabi-version=n
           Use version n of the C++ ABI.  Version 2 is the version of the C++
           ABI that first appeared in G++ 3.4.  Version 1 is the version of
           the C++ ABI that first appeared in G++ 3.2.  Version 0 will always
           be the version that conforms most closely to the C++ ABI
           specification.  Therefore, the ABI obtained using version 0 will
           change as ABI bugs are fixed.

           The default is version 2.

           Version 3 corrects an error in mangling a constant address as a
           template argument.

           Version 4 implements a standard mangling for vector types.

           Version 5 corrects the mangling of attribute const/volatile on
           function pointer types, decltype of a plain decl, and use of a
           function parameter in the declaration of another parameter.

           See also -Wabi.

       -fno-access-control
           Turn off all access checking.  This switch is mainly useful for
           working around bugs in the access control code.

       -fcheck-new
           Check that the pointer returned by "operator new" is non-null
           before attempting to modify the storage allocated.  This check is
           normally unnecessary because the C++ standard specifies that
           "operator new" will only return 0 if it is declared throw(), in
           which case the compiler will always check the return value even
           without this option.  In all other cases, when "operator new" has a
           non-empty exception specification, memory exhaustion is signalled
           by throwing "std::bad_alloc".  See also new (nothrow).

       -fconserve-space
           Put uninitialized or runtime-initialized global variables into the
           common segment, as C does.  This saves space in the executable at
           the cost of not diagnosing duplicate definitions.  If you compile
           with this flag and your program mysteriously crashes after "main()"
           has completed, you may have an object that is being destroyed twice
           because two definitions were merged.

           This option is no longer useful on most targets, now that support
           has been added for putting variables into BSS without making them
           common.

       -fconstexpr-depth=n
           Set the maximum nested evaluation depth for C++0x constexpr
           functions to n.  A limit is needed to detect endless recursion
           during constant expression evaluation.  The minimum specified by
           the standard is 512.

       -fno-deduce-init-list
           Disable deduction of a template type parameter as
           std::initializer_list from a brace-enclosed initializer list, i.e.

                   template <class T> auto forward(T t) -> decltype (realfn (t))
                   {
                     return realfn (t);
                   }

                   void f()
                   {
                     forward({1,2}); // call forward<std::initializer_list<int>>
                   }

           This option is present because this deduction is an extension to
           the current specification in the C++0x working draft, and there was
           some concern about potential overload resolution problems.

       -ffriend-injection
           Inject friend functions into the enclosing namespace, so that they
           are visible outside the scope of the class in which they are
           declared.  Friend functions were documented to work this way in the
           old Annotated C++ Reference Manual, and versions of G++ before 4.1
           always worked that way.  However, in ISO C++ a friend function
           which is not declared in an enclosing scope can only be found using
           argument dependent lookup.  This option causes friends to be
           injected as they were in earlier releases.

           This option is for compatibility, and may be removed in a future
           release of G++.

       -fno-elide-constructors
           The C++ standard allows an implementation to omit creating a
           temporary which is only used to initialize another object of the
           same type.  Specifying this option disables that optimization, and
           forces G++ to call the copy constructor in all cases.

       -fno-enforce-eh-specs
           Don't generate code to check for violation of exception
           specifications at runtime.  This option violates the C++ standard,
           but may be useful for reducing code size in production builds, much
           like defining NDEBUG.  This does not give user code permission to
           throw exceptions in violation of the exception specifications; the
           compiler will still optimize based on the specifications, so
           throwing an unexpected exception will result in undefined behavior.

       -ffor-scope
       -fno-for-scope
           If -ffor-scope is specified, the scope of variables declared in a
           for-init-statement is limited to the for loop itself, as specified
           by the C++ standard.  If -fno-for-scope is specified, the scope of
           variables declared in a for-init-statement extends to the end of
           the enclosing scope, as was the case in old versions of G++, and
           other (traditional) implementations of C++.

           The default if neither flag is given to follow the standard, but to
           allow and give a warning for old-style code that would otherwise be
           invalid, or have different behavior.

       -fno-gnu-keywords
           Do not recognize "typeof" as a keyword, so that code can use this
           word as an identifier.  You can use the keyword "__typeof__"
           instead.  -ansi implies -fno-gnu-keywords.

       -fno-implicit-templates
           Never emit code for non-inline templates which are instantiated
           implicitly (i.e. by use); only emit code for explicit
           instantiations.

       -fno-implicit-inline-templates
           Don't emit code for implicit instantiations of inline templates,
           either.  The default is to handle inlines differently so that
           compiles with and without optimization will need the same set of
           explicit instantiations.

       -fno-implement-inlines
           To save space, do not emit out-of-line copies of inline functions
           controlled by #pragma implementation.  This will cause linker
           errors if these functions are not inlined everywhere they are
           called.

       -fms-extensions
           Disable pedantic warnings about constructs used in MFC, such as
           implicit int and getting a pointer to member function via non-
           standard syntax.

       -fno-nonansi-builtins
           Disable built-in declarations of functions that are not mandated by
           ANSI/ISO C.  These include "ffs", "alloca", "_exit", "index",
           "bzero", "conjf", and other related functions.

       -fnothrow-opt
           Treat a "throw()" exception specification as though it were a
           "noexcept" specification to reduce or eliminate the text size
           overhead relative to a function with no exception specification.
           If the function has local variables of types with non-trivial
           destructors, the exception specification will actually make the
           function smaller because the EH cleanups for those variables can be
           optimized away.  The semantic effect is that an exception thrown
           out of a function with such an exception specification will result
           in a call to "terminate" rather than "unexpected".

       -fno-operator-names
           Do not treat the operator name keywords "and", "bitand", "bitor",
           "compl", "not", "or" and "xor" as synonyms as keywords.

       -fno-optional-diags
           Disable diagnostics that the standard says a compiler does not need
           to issue.  Currently, the only such diagnostic issued by G++ is the
           one for a name having multiple meanings within a class.

       -fpermissive
           Downgrade some diagnostics about nonconformant code from errors to
           warnings.  Thus, using -fpermissive will allow some nonconforming
           code to compile.

       -fno-pretty-templates
           When an error message refers to a specialization of a function
           template, the compiler will normally print the signature of the
           template followed by the template arguments and any typedefs or
           typenames in the signature (e.g. "void f(T) [with T = int]" rather
           than "void f(int)") so that it's clear which template is involved.
           When an error message refers to a specialization of a class
           template, the compiler will omit any template arguments which match
           the default template arguments for that template.  If either of
           these behaviors make it harder to understand the error message
           rather than easier, using -fno-pretty-templates will disable them.

       -frepo
           Enable automatic template instantiation at link time.  This option
           also implies -fno-implicit-templates.

       -fno-rtti
           Disable generation of information about every class with virtual
           functions for use by the C++ runtime type identification features
           (dynamic_cast and typeid).  If you don't use those parts of the
           language, you can save some space by using this flag.  Note that
           exception handling uses the same information, but it will generate
           it as needed. The dynamic_cast operator can still be used for casts
           that do not require runtime type information, i.e. casts to "void
           *" or to unambiguous base classes.

       -fstats
           Emit statistics about front-end processing at the end of the
           compilation.  This information is generally only useful to the G++
           development team.

       -fstrict-enums
           Allow the compiler to optimize using the assumption that a value of
           enumeration type can only be one of the values of the enumeration
           (as defined in the C++ standard; basically, a value which can be
           represented in the minimum number of bits needed to represent all
           the enumerators).  This assumption may not be valid if the program
           uses a cast to convert an arbitrary integer value to the
           enumeration type.

       -ftemplate-depth=n
           Set the maximum instantiation depth for template classes to n.  A
           limit on the template instantiation depth is needed to detect
           endless recursions during template class instantiation.  ANSI/ISO
           C++ conforming programs must not rely on a maximum depth greater
           than 17 (changed to 1024 in C++0x).

       -fno-threadsafe-statics
           Do not emit the extra code to use the routines specified in the C++
           ABI for thread-safe initialization of local statics.  You can use
           this option to reduce code size slightly in code that doesn't need
           to be thread-safe.

       -fuse-cxa-atexit
           Register destructors for objects with static storage duration with
           the "__cxa_atexit" function rather than the "atexit" function.
           This option is required for fully standards-compliant handling of
           static destructors, but will only work if your C library supports
           "__cxa_atexit".

       -fno-use-cxa-get-exception-ptr
           Don't use the "__cxa_get_exception_ptr" runtime routine.  This will
           cause "std::uncaught_exception" to be incorrect, but is necessary
           if the runtime routine is not available.

       -fvisibility-inlines-hidden
           This switch declares that the user does not attempt to compare
           pointers to inline methods where the addresses of the two functions
           were taken in different shared objects.

           The effect of this is that GCC may, effectively, mark inline
           methods with "__attribute__ ((visibility ("hidden")))" so that they
           do not appear in the export table of a DSO and do not require a PLT
           indirection when used within the DSO.  Enabling this option can
           have a dramatic effect on load and link times of a DSO as it
           massively reduces the size of the dynamic export table when the
           library makes heavy use of templates.

           The behavior of this switch is not quite the same as marking the
           methods as hidden directly, because it does not affect static
           variables local to the function or cause the compiler to deduce
           that the function is defined in only one shared object.

           You may mark a method as having a visibility explicitly to negate
           the effect of the switch for that method.  For example, if you do
           want to compare pointers to a particular inline method, you might
           mark it as having default visibility.  Marking the enclosing class
           with explicit visibility will have no effect.

           Explicitly instantiated inline methods are unaffected by this
           option as their linkage might otherwise cross a shared library
           boundary.

       -fvisibility-ms-compat
           This flag attempts to use visibility settings to make GCC's C++
           linkage model compatible with that of Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like
               -fvisibility=hidden.

           2.  Types, but not their members, are not hidden by default.

           3.  The One Definition Rule is relaxed for types without explicit
               visibility specifications which are defined in more than one
               different shared object: those declarations are permitted if
               they would have been permitted when this option was not used.

           In new code it is better to use -fvisibility=hidden and export
           those classes which are intended to be externally visible.
           Unfortunately it is possible for code to rely, perhaps
           accidentally, on the Visual Studio behavior.

           Among the consequences of these changes are that static data
           members of the same type with the same name but defined in
           different shared objects will be different, so changing one will
           not change the other; and that pointers to function members defined
           in different shared objects may not compare equal.  When this flag
           is given, it is a violation of the ODR to define types with the
           same name differently.

       -fno-weak
           Do not use weak symbol support, even if it is provided by the
           linker.  By default, G++ will use weak symbols if they are
           available.  This option exists only for testing, and should not be
           used by end-users; it will result in inferior code and has no
           benefits.  This option may be removed in a future release of G++.

       -nostdinc++
           Do not search for header files in the standard directories specific
           to C++, but do still search the other standard directories.  (This
           option is used when building the C++ library.)

       In addition, these optimization, warning, and code generation options
       have meanings only for C++ programs:

       -fno-default-inline
           Do not assume inline for functions defined inside a class scope.
             Note that these functions will have linkage like inline
           functions; they just won't be inlined by default.

       -Wabi (C, Objective-C, C++ and Objective-C++ only)
           Warn when G++ generates code that is probably not compatible with
           the vendor-neutral C++ ABI.  Although an effort has been made to
           warn about all such cases, there are probably some cases that are
           not warned about, even though G++ is generating incompatible code.
           There may also be cases where warnings are emitted even though the
           code that is generated will be compatible.

           You should rewrite your code to avoid these warnings if you are
           concerned about the fact that code generated by G++ may not be
           binary compatible with code generated by other compilers.

           The known incompatibilities in -fabi-version=2 (the default)
           include:

           o   A template with a non-type template parameter of reference type
               is mangled incorrectly:

                       extern int N;
                       template <int &> struct S {};
                       void n (S<N>) {2}

               This is fixed in -fabi-version=3.

           o   SIMD vector types declared using "__attribute ((vector_size))"
               are mangled in a non-standard way that does not allow for
               overloading of functions taking vectors of different sizes.

               The mangling is changed in -fabi-version=4.

           The known incompatibilities in -fabi-version=1 include:

           o   Incorrect handling of tail-padding for bit-fields.  G++ may
               attempt to pack data into the same byte as a base class.  For
               example:

                       struct A { virtual void f(); int f1 : 1; };
                       struct B : public A { int f2 : 1; };

               In this case, G++ will place "B::f2" into the same byte
               as"A::f1"; other compilers will not.  You can avoid this
               problem by explicitly padding "A" so that its size is a
               multiple of the byte size on your platform; that will cause G++
               and other compilers to layout "B" identically.

           o   Incorrect handling of tail-padding for virtual bases.  G++ does
               not use tail padding when laying out virtual bases.  For
               example:

                       struct A { virtual void f(); char c1; };
                       struct B { B(); char c2; };
                       struct C : public A, public virtual B {};

               In this case, G++ will not place "B" into the tail-padding for
               "A"; other compilers will.  You can avoid this problem by
               explicitly padding "A" so that its size is a multiple of its
               alignment (ignoring virtual base classes); that will cause G++
               and other compilers to layout "C" identically.

           o   Incorrect handling of bit-fields with declared widths greater
               than that of their underlying types, when the bit-fields appear
               in a union.  For example:

                       union U { int i : 4096; };

               Assuming that an "int" does not have 4096 bits, G++ will make
               the union too small by the number of bits in an "int".

           o   Empty classes can be placed at incorrect offsets.  For example:

                       struct A {};

                       struct B {
                         A a;
                         virtual void f ();
                       };

                       struct C : public B, public A {};

               G++ will place the "A" base class of "C" at a nonzero offset;
               it should be placed at offset zero.  G++ mistakenly believes
               that the "A" data member of "B" is already at offset zero.

           o   Names of template functions whose types involve "typename" or
               template template parameters can be mangled incorrectly.

                       template <typename Q>
                       void f(typename Q::X) {}

                       template <template <typename> class Q>
                       void f(typename Q<int>::X) {}

               Instantiations of these templates may be mangled incorrectly.

           It also warns psABI related changes.  The known psABI changes at
           this point include:

           o   For SYSV/x86-64, when passing union with long double, it is
               changed to pass in memory as specified in psABI.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" will always be passed in memory.

       -Wctor-dtor-privacy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the constructors or
           destructors in that class are private, and it has neither friends
           nor public static member functions.

       -Wnoexcept (C++ and Objective-C++ only)
           Warn when a noexcept-expression evaluates to false because of a
           call to a function that does not have a non-throwing exception
           specification (i.e. throw() or noexcept) but is known by the
           compiler to never throw an exception.

       -Wnon-virtual-dtor (C++ and Objective-C++ only)
           Warn when a class has virtual functions and accessible non-virtual
           destructor, in which case it would be possible but unsafe to delete
           an instance of a derived class through a pointer to the base class.
           This warning is also enabled if -Weffc++ is specified.

       -Wreorder (C++ and Objective-C++ only)
           Warn when the order of member initializers given in the code does
           not match the order in which they must be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler will rearrange the member initializers for i and j to
           match the declaration order of the members, emitting a warning to
           that effect.  This warning is enabled by -Wall.

       The following -W... options are not affected by -Wall.

       -Weffc++ (C++ and Objective-C++ only)
           Warn about violations of the following style guidelines from Scott
           Meyers' Effective C++ book:

           o   Item 11:  Define a copy constructor and an assignment operator
               for classes with dynamically allocated memory.

           o   Item 12:  Prefer initialization to assignment in constructors.

           o   Item 14:  Make destructors virtual in base classes.

           o   Item 15:  Have "operator=" return a reference to *this.

           o   Item 23:  Don't try to return a reference when you must return
               an object.

           Also warn about violations of the following style guidelines from
           Scott Meyers' More Effective C++ book:

           o   Item 6:  Distinguish between prefix and postfix forms of
               increment and decrement operators.

           o   Item 7:  Never overload "&&", "||", or ",".

           When selecting this option, be aware that the standard library
           headers do not obey all of these guidelines; use grep -v to filter
           out those warnings.

       -Wstrict-null-sentinel (C++ and Objective-C++ only)
           Warn also about the use of an uncasted "NULL" as sentinel.  When
           compiling only with GCC this is a valid sentinel, as "NULL" is
           defined to "__null".  Although it is a null pointer constant not a
           null pointer, it is guaranteed to be of the same size as a pointer.
           But this use is not portable across different compilers.

       -Wno-non-template-friend (C++ and Objective-C++ only)
           Disable warnings when non-templatized friend functions are declared
           within a template.  Since the advent of explicit template
           specification support in G++, if the name of the friend is an
           unqualified-id (i.e., friend foo(int)), the C++ language
           specification demands that the friend declare or define an
           ordinary, nontemplate function.  (Section 14.5.3).  Before G++
           implemented explicit specification, unqualified-ids could be
           interpreted as a particular specialization of a templatized
           function.  Because this non-conforming behavior is no longer the
           default behavior for G++, -Wnon-template-friend allows the compiler
           to check existing code for potential trouble spots and is on by
           default.  This new compiler behavior can be turned off with
           -Wno-non-template-friend which keeps the conformant compiler code
           but disables the helpful warning.

       -Wold-style-cast (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type is used
           within a C++ program.  The new-style casts (dynamic_cast,
           static_cast, reinterpret_cast, and const_cast) are less vulnerable
           to unintended effects and much easier to search for.

       -Woverloaded-virtual (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual functions from a
           base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and code like:

                   B* b;
                   b->f();

           will fail to compile.

       -Wno-pmf-conversions (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer to member
           function to a plain pointer.

       -Wsign-promo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from unsigned or
           enumerated type to a signed type, over a conversion to an unsigned
           type of the same size.  Previous versions of G++ would try to
           preserve unsignedness, but the standard mandates the current
           behavior.

                   struct A {
                     operator int ();
                     A& operator = (int);
                   };

                   main ()
                   {
                     A a,b;
                     a = b;
                   }

           In this example, G++ will synthesize a default A& operator = (const
           A&);, while cfront will use the user-defined operator =.

   Options Controlling Objective-C and Objective-C++ Dialects
       (NOTE: This manual does not describe the Objective-C and Objective-C++
       languages themselves.

       This section describes the command-line options that are only
       meaningful for Objective-C and Objective-C++ programs, but you can also
       use most of the language-independent GNU compiler options.  For
       example, you might compile a file "some_class.m" like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, -fgnu-runtime is an option meant only for Objective-C
       and Objective-C++ programs; you can use the other options with any
       language supported by GCC.

       Note that since Objective-C is an extension of the C language,
       Objective-C compilations may also use options specific to the C front-
       end (e.g., -Wtraditional).  Similarly, Objective-C++ compilations may
       use C++-specific options (e.g., -Wabi).

       Here is a list of options that are only for compiling Objective-C and
       Objective-C++ programs:

       -fconstant-string-class=class-name
           Use class-name as the name of the class to instantiate for each
           literal string specified with the syntax "@"..."".  The default
           class name is "NXConstantString" if the GNU runtime is being used,
           and "NSConstantString" if the NeXT runtime is being used (see
           below).  The -fconstant-cfstrings option, if also present, will
           override the -fconstant-string-class setting and cause "@"...""
           literals to be laid out as constant CoreFoundation strings.

       -fgnu-runtime
           Generate object code compatible with the standard GNU Objective-C
           runtime.  This is the default for most types of systems.

       -fnext-runtime
           Generate output compatible with the NeXT runtime.  This is the
           default for NeXT-based systems, including Darwin and Mac OS X.  The
           macro "__NEXT_RUNTIME__" is predefined if (and only if) this option
           is used.

       -fno-nil-receivers
           Assume that all Objective-C message dispatches ("[receiver
           message:arg]") in this translation unit ensure that the receiver is
           not "nil".  This allows for more efficient entry points in the
           runtime to be used.  This option is only available in conjunction
           with the NeXT runtime and ABI version 0 or 1.

       -fobjc-abi-version=n
           Use version n of the Objective-C ABI for the selected runtime.
           This option is currently supported only for the NeXT runtime.  In
           that case, Version 0 is the traditional (32-bit) ABI without
           support for properties and other Objective-C 2.0 additions.
           Version 1 is the traditional (32-bit) ABI with support for
           properties and other Objective-C 2.0 additions.  Version 2 is the
           modern (64-bit) ABI.  If nothing is specified, the default is
           Version 0 on 32-bit target machines, and Version 2 on 64-bit target
           machines.

       -fobjc-call-cxx-cdtors
           For each Objective-C class, check if any of its instance variables
           is a C++ object with a non-trivial default constructor.  If so,
           synthesize a special "- (id) .cxx_construct" instance method that
           will run non-trivial default constructors on any such instance
           variables, in order, and then return "self".  Similarly, check if
           any instance variable is a C++ object with a non-trivial
           destructor, and if so, synthesize a special "- (void)
           .cxx_destruct" method that will run all such default destructors,
           in reverse order.

           The "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods
           thusly generated will only operate on instance variables declared
           in the current Objective-C class, and not those inherited from
           superclasses.  It is the responsibility of the Objective-C runtime
           to invoke all such methods in an object's inheritance hierarchy.
           The "- (id) .cxx_construct" methods will be invoked by the runtime
           immediately after a new object instance is allocated; the "- (void)
           .cxx_destruct" methods will be invoked immediately before the
           runtime deallocates an object instance.

           As of this writing, only the NeXT runtime on Mac OS X 10.4 and
           later has support for invoking the "- (id) .cxx_construct" and "-
           (void) .cxx_destruct" methods.

       -fobjc-direct-dispatch
           Allow fast jumps to the message dispatcher.  On Darwin this is
           accomplished via the comm page.

       -fobjc-exceptions
           Enable syntactic support for structured exception handling in
           Objective-C, similar to what is offered by C++ and Java.  This
           option is required to use the Objective-C keywords @try, @throw,
           @catch, @finally and @synchronized.  This option is available with
           both the GNU runtime and the NeXT runtime (but not available in
           conjunction with the NeXT runtime on Mac OS X 10.2 and earlier).

       -fobjc-gc
           Enable garbage collection (GC) in Objective-C and Objective-C++
           programs.  This option is only available with the NeXT runtime; the
           GNU runtime has a different garbage collection implementation that
           does not require special compiler flags.

       -fobjc-nilcheck
           For the NeXT runtime with version 2 of the ABI, check for a nil
           receiver in method invocations before doing the actual method call.
           This is the default and can be disabled using -fno-objc-nilcheck.
           Class methods and super calls are never checked for nil in this way
           no matter what this flag is set to.  Currently this flag does
           nothing when the GNU runtime, or an older version of the NeXT
           runtime ABI, is used.

       -fobjc-std=objc1
           Conform to the language syntax of Objective-C 1.0, the language
           recognized by GCC 4.0.  This only affects the Objective-C additions
           to the C/C++ language; it does not affect conformance to C/C++
           standards, which is controlled by the separate C/C++ dialect option
           flags.  When this option is used with the Objective-C or
           Objective-C++ compiler, any Objective-C syntax that is not
           recognized by GCC 4.0 is rejected.  This is useful if you need to
           make sure that your Objective-C code can be compiled with older
           versions of GCC.

       -freplace-objc-classes
           Emit a special marker instructing ld(1) not to statically link in
           the resulting object file, and allow dyld(1) to load it in at run
           time instead.  This is used in conjunction with the Fix-and-
           Continue debugging mode, where the object file in question may be
           recompiled and dynamically reloaded in the course of program
           execution, without the need to restart the program itself.
           Currently, Fix-and-Continue functionality is only available in
           conjunction with the NeXT runtime on Mac OS X 10.3 and later.

       -fzero-link
           When compiling for the NeXT runtime, the compiler ordinarily
           replaces calls to "objc_getClass("...")" (when the name of the
           class is known at compile time) with static class references that
           get initialized at load time, which improves run-time performance.
           Specifying the -fzero-link flag suppresses this behavior and causes
           calls to "objc_getClass("...")"  to be retained.  This is useful in
           Zero-Link debugging mode, since it allows for individual class
           implementations to be modified during program execution.  The GNU
           runtime currently always retains calls to "objc_get_class("...")"
           regardless of command line options.

       -gen-decls
           Dump interface declarations for all classes seen in the source file
           to a file named sourcename.decl.

       -Wassign-intercept (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being intercepted by the
           garbage collector.

       -Wno-protocol (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a warning is issued
           for every method in the protocol that is not implemented by the
           class.  The default behavior is to issue a warning for every method
           not explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If you use the
           -Wno-protocol option, then methods inherited from the superclass
           are considered to be implemented, and no warning is issued for
           them.

       -Wselector (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the same selector
           are found during compilation.  The check is performed on the list
           of methods in the final stage of compilation.  Additionally, a
           check is performed for each selector appearing in a
           "@selector(...)"  expression, and a corresponding method for that
           selector has been found during compilation.  Because these checks
           scan the method table only at the end of compilation, these
           warnings are not produced if the final stage of compilation is not
           reached, for example because an error is found during compilation,
           or because the -fsyntax-only option is being used.

       -Wstrict-selector-match (Objective-C and Objective-C++ only)
           Warn if multiple methods with differing argument and/or return
           types are found for a given selector when attempting to send a
           message using this selector to a receiver of type "id" or "Class".
           When this flag is off (which is the default behavior), the compiler
           will omit such warnings if any differences found are confined to
           types which share the same size and alignment.

       -Wundeclared-selector (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an undeclared
           selector is found.  A selector is considered undeclared if no
           method with that name has been declared before the "@selector(...)"
           expression, either explicitly in an @interface or @protocol
           declaration, or implicitly in an @implementation section.  This
           option always performs its checks as soon as a "@selector(...)"
           expression is found, while -Wselector only performs its checks in
           the final stage of compilation.  This also enforces the coding
           style convention that methods and selectors must be declared before
           being used.

       -print-objc-runtime-info
           Generate C header describing the largest structure that is passed
           by value, if any.

   Options to Control Diagnostic Messages Formatting
       Traditionally, diagnostic messages have been formatted irrespective of
       the output device's aspect (e.g. its width, ...).  The options
       described below can be used to control the diagnostic messages
       formatting algorithm, e.g. how many characters per line, how often
       source location information should be reported.  Right now, only the
       C++ front end can honor these options.  However it is expected, in the
       near future, that the remaining front ends would be able to digest them
       correctly.

       -fmessage-length=n
           Try to format error messages so that they fit on lines of about n
           characters.  The default is 72 characters for g++ and 0 for the
           rest of the front ends supported by GCC.  If n is zero, then no
           line-wrapping will be done; each error message will appear on a
           single line.

       -fdiagnostics-show-location=once
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit once source location information; that
           is, in case the message is too long to fit on a single physical
           line and has to be wrapped, the source location won't be emitted
           (as prefix) again, over and over, in subsequent continuation lines.
           This is the default behavior.

       -fdiagnostics-show-location=every-line
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit the same source location information (as
           prefix) for physical lines that result from the process of breaking
           a message which is too long to fit on a single line.

       -fno-diagnostics-show-option
           By default, each diagnostic emitted includes text which indicates
           the command line option that directly controls the diagnostic (if
           such an option is known to the diagnostic machinery).  Specifying
           the -fno-diagnostics-show-option flag suppresses that behavior.

       -Wcoverage-mismatch
           Warn if feedback profiles do not match when using the -fprofile-use
           option.  If a source file was changed between -fprofile-gen and
           -fprofile-use, the files with the profile feedback can fail to
           match the source file and GCC can not use the profile feedback
           information.  By default, this warning is enabled and is treated as
           an error.  -Wno-coverage-mismatch can be used to disable the
           warning or -Wno-error=coverage-mismatch can be used to disable the
           error.  Disable the error for this warning can result in poorly
           optimized code, so disabling the error is useful only in the case
           of very minor changes such as bug fixes to an existing code-base.
           Completely disabling the warning is not recommended.

   Options to Request or Suppress Warnings
       Warnings are diagnostic messages that report constructions which are
       not inherently erroneous but which are risky or suggest there may have
       been an error.

       The following language-independent options do not enable specific
       warnings but control the kinds of diagnostics produced by GCC.

       -fsyntax-only
           Check the code for syntax errors, but don't do anything beyond
           that.

       -fmax-errors=n
           Limits the maximum number of error messages to n, at which point
           GCC bails out rather than attempting to continue processing the
           source code.  If n is 0 (the default), there is no limit on the
           number of error messages produced.  If -Wfatal-errors is also
           specified, then -Wfatal-errors takes precedence over this option.

       -w  Inhibit all warning messages.

       -Werror
           Make all warnings into errors.

       -Werror=
           Make the specified warning into an error.  The specifier for a
           warning is appended, for example -Werror=switch turns the warnings
           controlled by -Wswitch into errors.  This switch takes a negative
           form, to be used to negate -Werror for specific warnings, for
           example -Wno-error=switch makes -Wswitch warnings not be errors,
           even when -Werror is in effect.

           The warning message for each controllable warning includes the
           option which controls the warning.  That option can then be used
           with -Werror= and -Wno-error= as described above.  (Printing of the
           option in the warning message can be disabled using the
           -fno-diagnostics-show-option flag.)

           Note that specifying -Werror=foo automatically implies -Wfoo.
           However, -Wno-error=foo does not imply anything.

       -Wfatal-errors
           This option causes the compiler to abort compilation on the first
           error occurred rather than trying to keep going and printing
           further error messages.

       You can request many specific warnings with options beginning -W, for
       example -Wimplicit to request warnings on implicit declarations.  Each
       of these specific warning options also has a negative form beginning
       -Wno- to turn off warnings; for example, -Wno-implicit.  This manual
       lists only one of the two forms, whichever is not the default.  For
       further, language-specific options also refer to C++ Dialect Options
       and Objective-C and Objective-C++ Dialect Options.

       When an unrecognized warning option is requested (e.g.,
       -Wunknown-warning), GCC will emit a diagnostic stating that the option
       is not recognized.  However, if the -Wno- form is used, the behavior is
       slightly different: No diagnostic will be produced for
       -Wno-unknown-warning unless other diagnostics are being produced.  This
       allows the use of new -Wno- options with old compilers, but if
       something goes wrong, the compiler will warn that an unrecognized
       option was used.

       -pedantic
           Issue all the warnings demanded by strict ISO C and ISO C++; reject
           all programs that use forbidden extensions, and some other programs
           that do not follow ISO C and ISO C++.  For ISO C, follows the
           version of the ISO C standard specified by any -std option used.

           Valid ISO C and ISO C++ programs should compile properly with or
           without this option (though a rare few will require -ansi or a -std
           option specifying the required version of ISO C).  However, without
           this option, certain GNU extensions and traditional C and C++
           features are supported as well.  With this option, they are
           rejected.

           -pedantic does not cause warning messages for use of the alternate
           keywords whose names begin and end with __.  Pedantic warnings are
           also disabled in the expression that follows "__extension__".
           However, only system header files should use these escape routes;
           application programs should avoid them.

           Some users try to use -pedantic to check programs for strict ISO C
           conformance.  They soon find that it does not do quite what they
           want: it finds some non-ISO practices, but not all---only those for
           which ISO C requires a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C might be useful
           in some instances, but would require considerable additional work
           and would be quite different from -pedantic.  We don't have plans
           to support such a feature in the near future.

           Where the standard specified with -std represents a GNU extended
           dialect of C, such as gnu90 or gnu99, there is a corresponding base
           standard, the version of ISO C on which the GNU extended dialect is
           based.  Warnings from -pedantic are given where they are required
           by the base standard.  (It would not make sense for such warnings
           to be given only for features not in the specified GNU C dialect,
           since by definition the GNU dialects of C include all features the
           compiler supports with the given option, and there would be nothing
           to warn about.)

       -pedantic-errors
           Like -pedantic, except that errors are produced rather than
           warnings.

       -Wall
           This enables all the warnings about constructions that some users
           consider questionable, and that are easy to avoid (or modify to
           prevent the warning), even in conjunction with macros.  This also
           enables some language-specific warnings described in C++ Dialect
           Options and Objective-C and Objective-C++ Dialect Options.

           -Wall turns on the following warning flags:

           -Waddress -Warray-bounds (only with -O2) -Wc++0x-compat
           -Wchar-subscripts -Wenum-compare (in C/Objc; this is on by default
           in C++) -Wimplicit-int (C and Objective-C only)
           -Wimplicit-function-declaration (C and Objective-C only) -Wcomment
           -Wformat -Wmain (only for C/ObjC and unless -ffreestanding)
           -Wmissing-braces -Wnonnull -Wparentheses -Wpointer-sign -Wreorder
           -Wreturn-type -Wsequence-point -Wsign-compare (only in C++)
           -Wstrict-aliasing -Wstrict-overflow=1 -Wswitch -Wtrigraphs
           -Wuninitialized -Wunknown-pragmas -Wunused-function -Wunused-label
           -Wunused-value -Wunused-variable -Wvolatile-register-var

           Note that some warning flags are not implied by -Wall.  Some of
           them warn about constructions that users generally do not consider
           questionable, but which occasionally you might wish to check for;
           others warn about constructions that are necessary or hard to avoid
           in some cases, and there is no simple way to modify the code to
           suppress the warning. Some of them are enabled by -Wextra but many
           of them must be enabled individually.

       -Wextra
           This enables some extra warning flags that are not enabled by
           -Wall. (This option used to be called -W.  The older name is still
           supported, but the newer name is more descriptive.)

           -Wclobbered -Wempty-body -Wignored-qualifiers
           -Wmissing-field-initializers -Wmissing-parameter-type (C only)
           -Wold-style-declaration (C only) -Woverride-init -Wsign-compare
           -Wtype-limits -Wuninitialized -Wunused-parameter (only with
           -Wunused or -Wall) -Wunused-but-set-parameter (only with -Wunused
           or -Wall)

           The option -Wextra also prints warning messages for the following
           cases:

           o   A pointer is compared against integer zero with <, <=, >, or
               >=.

           o   (C++ only) An enumerator and a non-enumerator both appear in a
               conditional expression.

           o   (C++ only) Ambiguous virtual bases.

           o   (C++ only) Subscripting an array which has been declared
               register.

           o   (C++ only) Taking the address of a variable which has been
               declared register.

           o   (C++ only) A base class is not initialized in a derived class'
               copy constructor.

       -Wchar-subscripts
           Warn if an array subscript has type "char".  This is a common cause
           of error, as programmers often forget that this type is signed on
           some machines.  This warning is enabled by -Wall.

       -Wcomment
           Warn whenever a comment-start sequence /* appears in a /* comment,
           or whenever a Backslash-Newline appears in a // comment.  This
           warning is enabled by -Wall.

       -Wno-cpp
           (C, Objective-C, C++, Objective-C++ and Fortran only)

           Suppress warning messages emitted by "#warning" directives.

       -Wdouble-promotion (C, C++, Objective-C and Objective-C++ only)
           Give a warning when a value of type "float" is implicitly promoted
           to "double".  CPUs with a 32-bit "single-precision" floating-point
           unit implement "float" in hardware, but emulate "double" in
           software.  On such a machine, doing computations using "double"
           values is much more expensive because of the overhead required for
           software emulation.

           It is easy to accidentally do computations with "double" because
           floating-point literals are implicitly of type "double".  For
           example, in:

                   float area(float radius)
                   {
                      return 3.14159 * radius * radius;
                   }

           the compiler will perform the entire computation with "double"
           because the floating-point literal is a "double".

       -Wformat
           Check calls to "printf" and "scanf", etc., to make sure that the
           arguments supplied have types appropriate to the format string
           specified, and that the conversions specified in the format string
           make sense.  This includes standard functions, and others specified
           by format attributes, in the "printf", "scanf", "strftime" and
           "strfmon" (an X/Open extension, not in the C standard) families (or
           other target-specific families).  Which functions are checked
           without format attributes having been specified depends on the
           standard version selected, and such checks of functions without the
           attribute specified are disabled by -ffreestanding or -fno-builtin.

           The formats are checked against the format features supported by
           GNU libc version 2.2.  These include all ISO C90 and C99 features,
           as well as features from the Single Unix Specification and some BSD
           and GNU extensions.  Other library implementations may not support
           all these features; GCC does not support warning about features
           that go beyond a particular library's limitations.  However, if
           -pedantic is used with -Wformat, warnings will be given about
           format features not in the selected standard version (but not for
           "strfmon" formats, since those are not in any version of the C
           standard).

           Since -Wformat also checks for null format arguments for several
           functions, -Wformat also implies -Wnonnull.

           -Wformat is included in -Wall.  For more control over some aspects
           of format checking, the options -Wformat-y2k,
           -Wno-format-extra-args, -Wno-format-zero-length,
           -Wformat-nonliteral, -Wformat-security, and -Wformat=2 are
           available, but are not included in -Wall.

           NOTE: In Ubuntu 8.10 and later versions this option is enabled by
           default for C, C++, ObjC, ObjC++.  To disable, use -Wformat=0.

       -Wformat-y2k
           If -Wformat is specified, also warn about "strftime" formats which
           may yield only a two-digit year.

       -Wno-format-contains-nul
           If -Wformat is specified, do not warn about format strings that
           contain NUL bytes.

       -Wno-format-extra-args
           If -Wformat is specified, do not warn about excess arguments to a
           "printf" or "scanf" format function.  The C standard specifies that
           such arguments are ignored.

           Where the unused arguments lie between used arguments that are
           specified with $ operand number specifications, normally warnings
           are still given, since the implementation could not know what type
           to pass to "va_arg" to skip the unused arguments.  However, in the
           case of "scanf" formats, this option will suppress the warning if
           the unused arguments are all pointers, since the Single Unix
           Specification says that such unused arguments are allowed.

       -Wno-format-zero-length (C and Objective-C only)
           If -Wformat is specified, do not warn about zero-length formats.
           The C standard specifies that zero-length formats are allowed.

       -Wformat-nonliteral
           If -Wformat is specified, also warn if the format string is not a
           string literal and so cannot be checked, unless the format function
           takes its format arguments as a "va_list".

       -Wformat-security
           If -Wformat is specified, also warn about uses of format functions
           that represent possible security problems.  At present, this warns
           about calls to "printf" and "scanf" functions where the format
           string is not a string literal and there are no format arguments,
           as in "printf (foo);".  This may be a security hole if the format
           string came from untrusted input and contains %n.  (This is
           currently a subset of what -Wformat-nonliteral warns about, but in
           future warnings may be added to -Wformat-security that are not
           included in -Wformat-nonliteral.)

           NOTE: In Ubuntu 8.10 and later versions this option is enabled by
           default for C, C++, ObjC, ObjC++.  To disable, use
           -Wno-format-security, or disable all format warnings with
           -Wformat=0.  To make format security warnings fatal, specify
           -Werror=format-security.

       -Wformat=2
           Enable -Wformat plus format checks not included in -Wformat.
           Currently equivalent to -Wformat -Wformat-nonliteral
           -Wformat-security -Wformat-y2k.

       -Wnonnull (C and Objective-C only)
           Warn about passing a null pointer for arguments marked as requiring
           a non-null value by the "nonnull" function attribute.

           -Wnonnull is included in -Wall and -Wformat.  It can be disabled
           with the -Wno-nonnull option.

       -Winit-self (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables which are initialized with
           themselves.  Note this option can only be used with the
           -Wuninitialized option.

           For example, GCC will warn about "i" being uninitialized in the
           following snippet only when -Winit-self has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

       -Wimplicit-int (C and Objective-C only)
           Warn when a declaration does not specify a type.  This warning is
           enabled by -Wall.

       -Wimplicit-function-declaration (C and Objective-C only)
           Give a warning whenever a function is used before being declared.
           In C99 mode (-std=c99 or -std=gnu99), this warning is enabled by
           default and it is made into an error by -pedantic-errors. This
           warning is also enabled by -Wall.

       -Wimplicit (C and Objective-C only)
           Same as -Wimplicit-int and -Wimplicit-function-declaration.  This
           warning is enabled by -Wall.

       -Wignored-qualifiers (C and C++ only)
           Warn if the return type of a function has a type qualifier such as
           "const".  For ISO C such a type qualifier has no effect, since the
           value returned by a function is not an lvalue.  For C++, the
           warning is only emitted for scalar types or "void".  ISO C
           prohibits qualified "void" return types on function definitions, so
           such return types always receive a warning even without this
           option.

           This warning is also enabled by -Wextra.

       -Wmain
           Warn if the type of main is suspicious.  main should be a function
           with external linkage, returning int, taking either zero arguments,
           two, or three arguments of appropriate types.  This warning is
           enabled by default in C++ and is enabled by either -Wall or
           -pedantic.

       -Wmissing-braces
           Warn if an aggregate or union initializer is not fully bracketed.
           In the following example, the initializer for a is not fully
           bracketed, but that for b is fully bracketed.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by -Wall.

       -Wmissing-include-dirs (C, C++, Objective-C and Objective-C++ only)
           Warn if a user-supplied include directory does not exist.

       -Wparentheses
           Warn if parentheses are omitted in certain contexts, such as when
           there is an assignment in a context where a truth value is
           expected, or when operators are nested whose precedence people
           often get confused about.

           Also warn if a comparison like x<=y<=z appears; this is equivalent
           to (x<=y ? 1 : 0) <= z, which is a different interpretation from
           that of ordinary mathematical notation.

           Also warn about constructions where there may be confusion to which
           "if" statement an "else" branch belongs.  Here is an example of
           such a case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost possible
           "if" statement, which in this example is "if (b)".  This is often
           not what the programmer expected, as illustrated in the above
           example by indentation the programmer chose.  When there is the
           potential for this confusion, GCC will issue a warning when this
           flag is specified.  To eliminate the warning, add explicit braces
           around the innermost "if" statement so there is no way the "else"
           could belong to the enclosing "if".  The resulting code would look
           like this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           Also warn for dangerous uses of the ?: with omitted middle operand
           GNU extension. When the condition in the ?: operator is a boolean
           expression the omitted value will be always 1. Often the user
           expects it to be a value computed inside the conditional expression
           instead.

           This warning is enabled by -Wall.

       -Wsequence-point
           Warn about code that may have undefined semantics because of
           violations of sequence point rules in the C and C++ standards.

           The C and C++ standards defines the order in which expressions in a
           C/C++ program are evaluated in terms of sequence points, which
           represent a partial ordering between the execution of parts of the
           program: those executed before the sequence point, and those
           executed after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger expression), after
           the evaluation of the first operand of a "&&", "||", "? :" or ","
           (comma) operator, before a function is called (but after the
           evaluation of its arguments and the expression denoting the called
           function), and in certain other places.  Other than as expressed by
           the sequence point rules, the order of evaluation of subexpressions
           of an expression is not specified.  All these rules describe only a
           partial order rather than a total order, since, for example, if two
           functions are called within one expression with no sequence point
           between them, the order in which the functions are called is not
           specified.  However, the standards committee have ruled that
           function calls do not overlap.

           It is not specified when between sequence points modifications to
           the values of objects take effect.  Programs whose behavior depends
           on this have undefined behavior; the C and C++ standards specify
           that "Between the previous and next sequence point an object shall
           have its stored value modified at most once by the evaluation of an
           expression.  Furthermore, the prior value shall be read only to
           determine the value to be stored.".  If a program breaks these
           rules, the results on any particular implementation are entirely
           unpredictable.

           Examples of code with undefined behavior are "a = a++;", "a[n] =
           b[n++]" and "a[i++] = i;".  Some more complicated cases are not
           diagnosed by this option, and it may give an occasional false
           positive result, but in general it has been found fairly effective
           at detecting this sort of problem in programs.

           The standard is worded confusingly, therefore there is some debate
           over the precise meaning of the sequence point rules in subtle
           cases.  Links to discussions of the problem, including proposed
           formal definitions, may be found on the GCC readings page, at
           <http://gcc.gnu.org/readings.html>.

           This warning is enabled by -Wall for C and C++.

       -Wreturn-type
           Warn whenever a function is defined with a return-type that
           defaults to "int".  Also warn about any "return" statement with no
           return-value in a function whose return-type is not "void" (falling
           off the end of the function body is considered returning without a
           value), and about a "return" statement with an expression in a
           function whose return-type is "void".

           For C++, a function without return type always produces a
           diagnostic message, even when -Wno-return-type is specified.  The
           only exceptions are main and functions defined in system headers.

           This warning is enabled by -Wall.

       -Wswitch
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  (The presence of a "default" label prevents this
           warning.)  "case" labels outside the enumeration range also provoke
           warnings when this option is used (even if there is a "default"
           label).  This warning is enabled by -Wall.

       -Wswitch-default
           Warn whenever a "switch" statement does not have a "default" case.

       -Wswitch-enum
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  "case" labels outside the enumeration range also
           provoke warnings when this option is used.  The only difference
           between -Wswitch and this option is that this option gives a
           warning about an omitted enumeration code even if there is a
           "default" label.

       -Wsync-nand (C and C++ only)
           Warn when "__sync_fetch_and_nand" and "__sync_nand_and_fetch"
           built-in functions are used.  These functions changed semantics in
           GCC 4.4.

       -Wtrigraphs
           Warn if any trigraphs are encountered that might change the meaning
           of the program (trigraphs within comments are not warned about).
           This warning is enabled by -Wall.

       -Wunused-but-set-parameter
           Warn whenever a function parameter is assigned to, but otherwise
           unused (aside from its declaration).

           To suppress this warning use the unused attribute.

           This warning is also enabled by -Wunused together with -Wextra.

       -Wunused-but-set-variable
           Warn whenever a local variable is assigned to, but otherwise unused
           (aside from its declaration).  This warning is enabled by -Wall.

           To suppress this warning use the unused attribute.

           This warning is also enabled by -Wunused, which is enabled by
           -Wall.

       -Wunused-function
           Warn whenever a static function is declared but not defined or a
           non-inline static function is unused.  This warning is enabled by
           -Wall.

       -Wunused-label
           Warn whenever a label is declared but not used.  This warning is
           enabled by -Wall.

           To suppress this warning use the unused attribute.

       -Wunused-parameter
           Warn whenever a function parameter is unused aside from its
           declaration.

           To suppress this warning use the unused attribute.

       -Wno-unused-result
           Do not warn if a caller of a function marked with attribute
           "warn_unused_result" does not use its return value. The default is
           -Wunused-result.

       -Wunused-variable
           Warn whenever a local variable or non-constant static variable is
           unused aside from its declaration.  This warning is enabled by
           -Wall.

           To suppress this warning use the unused attribute.

       -Wunused-value
           Warn whenever a statement computes a result that is explicitly not
           used. To suppress this warning cast the unused expression to void.
           This includes an expression-statement or the left-hand side of a
           comma expression that contains no side effects. For example, an
           expression such as x[i,j] will cause a warning, while x[(void)i,j]
           will not.

           This warning is enabled by -Wall.

       -Wunused
           All the above -Wunused options combined.

           In order to get a warning about an unused function parameter, you
           must either specify -Wextra -Wunused (note that -Wall implies
           -Wunused), or separately specify -Wunused-parameter.

       -Wuninitialized
           Warn if an automatic variable is used without first being
           initialized or if a variable may be clobbered by a "setjmp" call.
           In C++, warn if a non-static reference or non-static const member
           appears in a class without constructors.

           If you want to warn about code which uses the uninitialized value
           of the variable in its own initializer, use the -Winit-self option.

           These warnings occur for individual uninitialized or clobbered
           elements of structure, union or array variables as well as for
           variables which are uninitialized or clobbered as a whole.  They do
           not occur for variables or elements declared "volatile".  Because
           these warnings depend on optimization, the exact variables or
           elements for which there are warnings will depend on the precise
           optimization options and version of GCC used.

           Note that there may be no warning about a variable that is used
           only to compute a value that itself is never used, because such
           computations may be deleted by data flow analysis before the
           warnings are printed.

           These warnings are made optional because GCC is not smart enough to
           see all the reasons why the code might be correct despite appearing
           to have an error.  Here is one example of how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is always
           initialized, but GCC doesn't know this.  Here is another common
           case:

                   {
                     int save_y;
                     if (change_y) save_y = y, y = new_y;
                     ...
                     if (change_y) y = save_y;
                   }

           This has no bug because "save_y" is used only if it is set.

           This option also warns when a non-volatile automatic variable might
           be changed by a call to "longjmp".  These warnings as well are
           possible only in optimizing compilation.

           The compiler sees only the calls to "setjmp".  It cannot know where
           "longjmp" will be called; in fact, a signal handler could call it
           at any point in the code.  As a result, you may get a warning even
           when there is in fact no problem because "longjmp" cannot in fact
           be called at the place which would cause a problem.

           Some spurious warnings can be avoided if you declare all the
           functions you use that never return as "noreturn".

           This warning is enabled by -Wall or -Wextra.

       -Wunknown-pragmas
           Warn when a #pragma directive is encountered which is not
           understood by GCC.  If this command line option is used, warnings
           will even be issued for unknown pragmas in system header files.
           This is not the case if the warnings were only enabled by the -Wall
           command line option.

       -Wno-pragmas
           Do not warn about misuses of pragmas, such as incorrect parameters,
           invalid syntax, or conflicts between pragmas.  See also
           -Wunknown-pragmas.

       -Wstrict-aliasing
           This option is only active when -fstrict-aliasing is active.  It
           warns about code which might break the strict aliasing rules that
           the compiler is using for optimization.  The warning does not catch
           all cases, but does attempt to catch the more common pitfalls.  It
           is included in -Wall.  It is equivalent to -Wstrict-aliasing=3

       -Wstrict-aliasing=n
           This option is only active when -fstrict-aliasing is active.  It
           warns about code which might break the strict aliasing rules that
           the compiler is using for optimization.  Higher levels correspond
           to higher accuracy (fewer false positives).  Higher levels also
           correspond to more effort, similar to the way -O works.
           -Wstrict-aliasing is equivalent to -Wstrict-aliasing=n, with n=3.

           Level 1: Most aggressive, quick, least accurate.  Possibly useful
           when higher levels do not warn but -fstrict-aliasing still breaks
           the code, as it has very few false negatives.  However, it has many
           false positives.  Warns for all pointer conversions between
           possibly incompatible types, even if never dereferenced.  Runs in
           the frontend only.

           Level 2: Aggressive, quick, not too precise.  May still have many
           false positives (not as many as level 1 though), and few false
           negatives (but possibly more than level 1).  Unlike level 1, it
           only warns when an address is taken.  Warns about incomplete types.
           Runs in the frontend only.

           Level 3 (default for -Wstrict-aliasing): Should have very few false
           positives and few false negatives.  Slightly slower than levels 1
           or 2 when optimization is enabled.  Takes care of the common
           pun+dereference pattern in the frontend: "*(int*)&some_float".  If
           optimization is enabled, it also runs in the backend, where it
           deals with multiple statement cases using flow-sensitive points-to
           information.  Only warns when the converted pointer is
           dereferenced.  Does not warn about incomplete types.

       -Wstrict-overflow
       -Wstrict-overflow=n
           This option is only active when -fstrict-overflow is active.  It
           warns about cases where the compiler optimizes based on the
           assumption that signed overflow does not occur.  Note that it does
           not warn about all cases where the code might overflow: it only
           warns about cases where the compiler implements some optimization.
           Thus this warning depends on the optimization level.

           An optimization which assumes that signed overflow does not occur
           is perfectly safe if the values of the variables involved are such
           that overflow never does, in fact, occur.  Therefore this warning
           can easily give a false positive: a warning about code which is not
           actually a problem.  To help focus on important issues, several
           warning levels are defined.  No warnings are issued for the use of
           undefined signed overflow when estimating how many iterations a
           loop will require, in particular when determining whether a loop
           will be executed at all.

           -Wstrict-overflow=1
               Warn about cases which are both questionable and easy to avoid.
               For example: "x + 1 > x"; with -fstrict-overflow, the compiler
               will simplify this to 1.  This level of -Wstrict-overflow is
               enabled by -Wall; higher levels are not, and must be explicitly
               requested.

           -Wstrict-overflow=2
               Also warn about other cases where a comparison is simplified to
               a constant.  For example: "abs (x) >= 0".  This can only be
               simplified when -fstrict-overflow is in effect, because "abs
               (INT_MIN)" overflows to "INT_MIN", which is less than zero.
               -Wstrict-overflow (with no level) is the same as
               -Wstrict-overflow=2.

           -Wstrict-overflow=3
               Also warn about other cases where a comparison is simplified.
               For example: "x + 1 > 1" will be simplified to "x > 0".

           -Wstrict-overflow=4
               Also warn about other simplifications not covered by the above
               cases.  For example: "(x * 10) / 5" will be simplified to "x *
               2".

           -Wstrict-overflow=5
               Also warn about cases where the compiler reduces the magnitude
               of a constant involved in a comparison.  For example: "x + 2 >
               y" will be simplified to "x + 1 >= y".  This is reported only
               at the highest warning level because this simplification
               applies to many comparisons, so this warning level will give a
               very large number of false positives.

       -Wsuggest-attribute=[pure|const|noreturn]
           Warn for cases where adding an attribute may be beneficial. The
           attributes currently supported are listed below.

           -Wsuggest-attribute=pure
           -Wsuggest-attribute=const
           -Wsuggest-attribute=noreturn
               Warn about functions which might be candidates for attributes
               "pure", "const" or "noreturn".  The compiler only warns for
               functions visible in other compilation units or (in the case of
               "pure" and "const") if it cannot prove that the function
               returns normally. A function returns normally if it doesn't
               contain an infinite loop nor returns abnormally by throwing,
               calling "abort()" or trapping.  This analysis requires option
               -fipa-pure-const, which is enabled by default at -O and higher.
               Higher optimization levels improve the accuracy of the
               analysis.

       -Warray-bounds
           This option is only active when -ftree-vrp is active (default for
           -O2 and above). It warns about subscripts to arrays that are always
           out of bounds. This warning is enabled by -Wall.

       -Wno-div-by-zero
           Do not warn about compile-time integer division by zero.  Floating
           point division by zero is not warned about, as it can be a
           legitimate way of obtaining infinities and NaNs.

       -Wsystem-headers
           Print warning messages for constructs found in system header files.
           Warnings from system headers are normally suppressed, on the
           assumption that they usually do not indicate real problems and
           would only make the compiler output harder to read.  Using this
           command line option tells GCC to emit warnings from system headers
           as if they occurred in user code.  However, note that using -Wall
           in conjunction with this option will not warn about unknown pragmas
           in system headers---for that, -Wunknown-pragmas must also be used.

       -Wtrampolines
            Warn about trampolines generated for pointers to nested functions.

            A trampoline is a small piece of data or code that is created at run
            time on the stack when the address of a nested function is taken, and
            is used to call the nested function indirectly.  For some targets, it
            is made up of data only and thus requires no special treatment.  But,
            for most targets, it is made up of code and thus requires the stack
            to be made executable in order for the program to work properly.

       -Wfloat-equal
           Warn if floating point values are used in equality comparisons.

           The idea behind this is that sometimes it is convenient (for the
           programmer) to consider floating-point values as approximations to
           infinitely precise real numbers.  If you are doing this, then you
           need to compute (by analyzing the code, or in some other way) the
           maximum or likely maximum error that the computation introduces,
           and allow for it when performing comparisons (and when producing
           output, but that's a different problem).  In particular, instead of
           testing for equality, you would check to see whether the two values
           have ranges that overlap; and this is done with the relational
           operators, so equality comparisons are probably mistaken.

       -Wtraditional (C and Objective-C only)
           Warn about certain constructs that behave differently in
           traditional and ISO C.  Also warn about ISO C constructs that have
           no traditional C equivalent, and/or problematic constructs which
           should be avoided.

           o   Macro parameters that appear within string literals in the
               macro body.  In traditional C macro replacement takes place
               within string literals, but does not in ISO C.

           o   In traditional C, some preprocessor directives did not exist.
               Traditional preprocessors would only consider a line to be a
               directive if the # appeared in column 1 on the line.  Therefore
               -Wtraditional warns about directives that traditional C
               understands but would ignore because the # does not appear as
               the first character on the line.  It also suggests you hide
               directives like #pragma not understood by traditional C by
               indenting them.  Some traditional implementations would not
               recognize #elif, so it suggests avoiding it altogether.

           o   A function-like macro that appears without arguments.

           o   The unary plus operator.

           o   The U integer constant suffix, or the F or L floating point
               constant suffixes.  (Traditional C does support the L suffix on
               integer constants.)  Note, these suffixes appear in macros
               defined in the system headers of most modern systems, e.g. the
               _MIN/_MAX macros in "<limits.h>".  Use of these macros in user
               code might normally lead to spurious warnings, however GCC's
               integrated preprocessor has enough context to avoid warning in
               these cases.

           o   A function declared external in one block and then used after
               the end of the block.

           o   A "switch" statement has an operand of type "long".

           o   A non-"static" function declaration follows a "static" one.
               This construct is not accepted by some traditional C compilers.

           o   The ISO type of an integer constant has a different width or
               signedness from its traditional type.  This warning is only
               issued if the base of the constant is ten.  I.e. hexadecimal or
               octal values, which typically represent bit patterns, are not
               warned about.

           o   Usage of ISO string concatenation is detected.

           o   Initialization of automatic aggregates.

           o   Identifier conflicts with labels.  Traditional C lacks a
               separate namespace for labels.

           o   Initialization of unions.  If the initializer is zero, the
               warning is omitted.  This is done under the assumption that the
               zero initializer in user code appears conditioned on e.g.
               "__STDC__" to avoid missing initializer warnings and relies on
               default initialization to zero in the traditional C case.

           o   Conversions by prototypes between fixed/floating point values
               and vice versa.  The absence of these prototypes when compiling
               with traditional C would cause serious problems.  This is a
               subset of the possible conversion warnings, for the full set
               use -Wtraditional-conversion.

           o   Use of ISO C style function definitions.  This warning
               intentionally is not issued for prototype declarations or
               variadic functions because these ISO C features will appear in
               your code when using libiberty's traditional C compatibility
               macros, "PARAMS" and "VPARAMS".  This warning is also bypassed
               for nested functions because that feature is already a GCC
               extension and thus not relevant to traditional C compatibility.

       -Wtraditional-conversion (C and Objective-C only)
           Warn if a prototype causes a type conversion that is different from
           what would happen to the same argument in the absence of a
           prototype.  This includes conversions of fixed point to floating
           and vice versa, and conversions changing the width or signedness of
           a fixed point argument except when the same as the default
           promotion.

       -Wdeclaration-after-statement (C and Objective-C only)
           Warn when a declaration is found after a statement in a block.
           This construct, known from C++, was introduced with ISO C99 and is
           by default allowed in GCC.  It is not supported by ISO C90 and was
           not supported by GCC versions before GCC 3.0.

       -Wundef
           Warn if an undefined identifier is evaluated in an #if directive.

       -Wno-endif-labels
           Do not warn whenever an #else or an #endif are followed by text.

       -Wshadow
           Warn whenever a local variable or type declaration shadows another
           variable, parameter, type, or class member (in C++), or whenever a
           built-in function is shadowed. Note that in C++, the compiler will
           not warn if a local variable shadows a struct/class/enum, but will
           warn if it shadows an explicit typedef.

       -Wlarger-than=len
           Warn whenever an object of larger than len bytes is defined.

       -Wframe-larger-than=len
           Warn if the size of a function frame is larger than len bytes.  The
           computation done to determine the stack frame size is approximate
           and not conservative.  The actual requirements may be somewhat
           greater than len even if you do not get a warning.  In addition,
           any space allocated via "alloca", variable-length arrays, or
           related constructs is not included by the compiler when determining
           whether or not to issue a warning.

       -Wunsafe-loop-optimizations
           Warn if the loop cannot be optimized because the compiler could not
           assume anything on the bounds of the loop indices.  With
           -funsafe-loop-optimizations warn if the compiler made such
           assumptions.

       -Wno-pedantic-ms-format (MinGW targets only)
           Disables the warnings about non-ISO "printf" / "scanf" format width
           specifiers "I32", "I64", and "I" used on Windows targets depending
           on the MS runtime, when you are using the options -Wformat and
           -pedantic without gnu-extensions.

       -Wpointer-arith
           Warn about anything that depends on the "size of" a function type
           or of "void".  GNU C assigns these types a size of 1, for
           convenience in calculations with "void *" pointers and pointers to
           functions.  In C++, warn also when an arithmetic operation involves
           "NULL".  This warning is also enabled by -pedantic.

       -Wtype-limits
           Warn if a comparison is always true or always false due to the
           limited range of the data type, but do not warn for constant
           expressions.  For example, warn if an unsigned variable is compared
           against zero with < or >=.  This warning is also enabled by
           -Wextra.

       -Wbad-function-cast (C and Objective-C only)
           Warn whenever a function call is cast to a non-matching type.  For
           example, warn if "int malloc()" is cast to "anything *".

       -Wc++-compat (C and Objective-C only)
           Warn about ISO C constructs that are outside of the common subset
           of ISO C and ISO C++, e.g. request for implicit conversion from
           "void *" to a pointer to non-"void" type.

       -Wc++0x-compat (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++
           1998 and ISO C++ 200x, e.g., identifiers in ISO C++ 1998 that will
           become keywords in ISO C++ 200x.  This warning is enabled by -Wall.

       -Wcast-qual
           Warn whenever a pointer is cast so as to remove a type qualifier
           from the target type.  For example, warn if a "const char *" is
           cast to an ordinary "char *".

           Also warn when making a cast which introduces a type qualifier in
           an unsafe way.  For example, casting "char **" to "const char **"
           is unsafe, as in this example:

                     /* p is char ** value.  */
                     const char **q = (const char **) p;
                     /* Assignment of readonly string to const char * is OK.  */
                     *q = "string";
                     /* Now char** pointer points to read-only memory.  */
                     **p = 'b';

       -Wcast-align
           Warn whenever a pointer is cast such that the required alignment of
           the target is increased.  For example, warn if a "char *" is cast
           to an "int *" on machines where integers can only be accessed at
           two- or four-byte boundaries.

       -Wwrite-strings
           When compiling C, give string constants the type "const
           char[length]" so that copying the address of one into a non-"const"
           "char *" pointer will get a warning.  These warnings will help you
           find at compile time code that can try to write into a string
           constant, but only if you have been very careful about using
           "const" in declarations and prototypes.  Otherwise, it will just be
           a nuisance. This is why we did not make -Wall request these
           warnings.

           When compiling C++, warn about the deprecated conversion from
           string literals to "char *".  This warning is enabled by default
           for C++ programs.

       -Wclobbered
           Warn for variables that might be changed by longjmp or vfork.  This
           warning is also enabled by -Wextra.

       -Wconversion
           Warn for implicit conversions that may alter a value. This includes
           conversions between real and integer, like "abs (x)" when "x" is
           "double"; conversions between signed and unsigned, like "unsigned
           ui = -1"; and conversions to smaller types, like "sqrtf (M_PI)". Do
           not warn for explicit casts like "abs ((int) x)" and "ui =
           (unsigned) -1", or if the value is not changed by the conversion
           like in "abs (2.0)".  Warnings about conversions between signed and
           unsigned integers can be disabled by using -Wno-sign-conversion.

           For C++, also warn for confusing overload resolution for user-
           defined conversions; and conversions that will never use a type
           conversion operator: conversions to "void", the same type, a base
           class or a reference to them. Warnings about conversions between
           signed and unsigned integers are disabled by default in C++ unless
           -Wsign-conversion is explicitly enabled.

       -Wno-conversion-null (C++ and Objective-C++ only)
           Do not warn for conversions between "NULL" and non-pointer types.
           -Wconversion-null is enabled by default.

       -Wempty-body
           Warn if an empty body occurs in an if, else or do while statement.
           This warning is also enabled by -Wextra.

       -Wenum-compare
           Warn about a comparison between values of different enum types. In
           C++ this warning is enabled by default.  In C this warning is
           enabled by -Wall.

       -Wjump-misses-init (C, Objective-C only)
           Warn if a "goto" statement or a "switch" statement jumps forward
           across the initialization of a variable, or jumps backward to a
           label after the variable has been initialized.  This only warns
           about variables which are initialized when they are declared.  This
           warning is only supported for C and Objective C; in C++ this sort
           of branch is an error in any case.

           -Wjump-misses-init is included in -Wc++-compat.  It can be disabled
           with the -Wno-jump-misses-init option.

       -Wsign-compare
           Warn when a comparison between signed and unsigned values could
           produce an incorrect result when the signed value is converted to
           unsigned.  This warning is also enabled by -Wextra; to get the
           other warnings of -Wextra without this warning, use -Wextra
           -Wno-sign-compare.

       -Wsign-conversion
           Warn for implicit conversions that may change the sign of an
           integer value, like assigning a signed integer expression to an
           unsigned integer variable. An explicit cast silences the warning.
           In C, this option is enabled also by -Wconversion.

       -Waddress
           Warn about suspicious uses of memory addresses. These include using
           the address of a function in a conditional expression, such as
           "void func(void); if (func)", and comparisons against the memory
           address of a string literal, such as "if (x == "abc")".  Such uses
           typically indicate a programmer error: the address of a function
           always evaluates to true, so their use in a conditional usually
           indicate that the programmer forgot the parentheses in a function
           call; and comparisons against string literals result in unspecified
           behavior and are not portable in C, so they usually indicate that
           the programmer intended to use "strcmp".  This warning is enabled
           by -Wall.

       -Wlogical-op
           Warn about suspicious uses of logical operators in expressions.
           This includes using logical operators in contexts where a bit-wise
           operator is likely to be expected.

       -Waggregate-return
           Warn if any functions that return structures or unions are defined
           or called.  (In languages where you can return an array, this also
           elicits a warning.)

       -Wno-attributes
           Do not warn if an unexpected "__attribute__" is used, such as
           unrecognized attributes, function attributes applied to variables,
           etc.  This will not stop errors for incorrect use of supported
           attributes.

       -Wno-builtin-macro-redefined
           Do not warn if certain built-in macros are redefined.  This
           suppresses warnings for redefinition of "__TIMESTAMP__",
           "__TIME__", "__DATE__", "__FILE__", and "__BASE_FILE__".

       -Wstrict-prototypes (C and Objective-C only)
           Warn if a function is declared or defined without specifying the
           argument types.  (An old-style function definition is permitted
           without a warning if preceded by a declaration which specifies the
           argument types.)

       -Wold-style-declaration (C and Objective-C only)
           Warn for obsolescent usages, according to the C Standard, in a
           declaration. For example, warn if storage-class specifiers like
           "static" are not the first things in a declaration.  This warning
           is also enabled by -Wextra.

       -Wold-style-definition (C and Objective-C only)
           Warn if an old-style function definition is used.  A warning is
           given even if there is a previous prototype.

       -Wmissing-parameter-type (C and Objective-C only)
           A function parameter is declared without a type specifier in
           K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by -Wextra.

       -Wmissing-prototypes (C and Objective-C only)
           Warn if a global function is defined without a previous prototype
           declaration.  This warning is issued even if the definition itself
           provides a prototype.  The aim is to detect global functions that
           fail to be declared in header files.

       -Wmissing-declarations
           Warn if a global function is defined without a previous
           declaration.  Do so even if the definition itself provides a
           prototype.  Use this option to detect global functions that are not
           declared in header files.  In C++, no warnings are issued for
           function templates, or for inline functions, or for functions in
           anonymous namespaces.

       -Wmissing-field-initializers
           Warn if a structure's initializer has some fields missing.  For
           example, the following code would cause such a warning, because
           "x.h" is implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated initializers, so the
           following modification would not trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           This warning is included in -Wextra.  To get other -Wextra warnings
           without this one, use -Wextra -Wno-missing-field-initializers.

       -Wmissing-format-attribute
           Warn about function pointers which might be candidates for "format"
           attributes.  Note these are only possible candidates, not absolute
           ones.  GCC will guess that function pointers with "format"
           attributes that are used in assignment, initialization, parameter
           passing or return statements should have a corresponding "format"
           attribute in the resulting type.  I.e. the left-hand side of the
           assignment or initialization, the type of the parameter variable,
           or the return type of the containing function respectively should
           also have a "format" attribute to avoid the warning.

           GCC will also warn about function definitions which might be
           candidates for "format" attributes.  Again, these are only possible
           candidates.  GCC will guess that "format" attributes might be
           appropriate for any function that calls a function like "vprintf"
           or "vscanf", but this might not always be the case, and some
           functions for which "format" attributes are appropriate may not be
           detected.

       -Wno-multichar
           Do not warn if a multicharacter constant ('FOOF') is used.  Usually
           they indicate a typo in the user's code, as they have
           implementation-defined values, and should not be used in portable
           code.

       -Wnormalized=<none|id|nfc|nfkc>
           In ISO C and ISO C++, two identifiers are different if they are
           different sequences of characters.  However, sometimes when
           characters outside the basic ASCII character set are used, you can
           have two different character sequences that look the same.  To
           avoid confusion, the ISO 10646 standard sets out some normalization
           rules which when applied ensure that two sequences that look the
           same are turned into the same sequence.  GCC can warn you if you
           are using identifiers which have not been normalized; this option
           controls that warning.

           There are four levels of warning that GCC supports.  The default is
           -Wnormalized=nfc, which warns about any identifier which is not in
           the ISO 10646 "C" normalized form, NFC.  NFC is the recommended
           form for most uses.

           Unfortunately, there are some characters which ISO C and ISO C++
           allow in identifiers that when turned into NFC aren't allowable as
           identifiers.  That is, there's no way to use these symbols in
           portable ISO C or C++ and have all your identifiers in NFC.
           -Wnormalized=id suppresses the warning for these characters.  It is
           hoped that future versions of the standards involved will correct
           this, which is why this option is not the default.

           You can switch the warning off for all characters by writing
           -Wnormalized=none.  You would only want to do this if you were
           using some other normalization scheme (like "D"), because otherwise
           you can easily create bugs that are literally impossible to see.

           Some characters in ISO 10646 have distinct meanings but look
           identical in some fonts or display methodologies, especially once
           formatting has been applied.  For instance "\u207F", "SUPERSCRIPT
           LATIN SMALL LETTER N", will display just like a regular "n" which
           has been placed in a superscript.  ISO 10646 defines the NFKC
           normalization scheme to convert all these into a standard form as
           well, and GCC will warn if your code is not in NFKC if you use
           -Wnormalized=nfkc.  This warning is comparable to warning about
           every identifier that contains the letter O because it might be
           confused with the digit 0, and so is not the default, but may be
           useful as a local coding convention if the programming environment
           is unable to be fixed to display these characters distinctly.

       -Wno-deprecated
           Do not warn about usage of deprecated features.

       -Wno-deprecated-declarations
           Do not warn about uses of functions, variables, and types marked as
           deprecated by using the "deprecated" attribute.

       -Wno-overflow
           Do not warn about compile-time overflow in constant expressions.

       -Woverride-init (C and Objective-C only)
           Warn if an initialized field without side effects is overridden
           when using designated initializers.

           This warning is included in -Wextra.  To get other -Wextra warnings
           without this one, use -Wextra -Wno-override-init.

       -Wpacked
           Warn if a structure is given the packed attribute, but the packed
           attribute has no effect on the layout or size of the structure.
           Such structures may be mis-aligned for little benefit.  For
           instance, in this code, the variable "f.x" in "struct bar" will be
           misaligned even though "struct bar" does not itself have the packed
           attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       -Wpacked-bitfield-compat
           The 4.1, 4.2 and 4.3 series of GCC ignore the "packed" attribute on
           bit-fields of type "char".  This has been fixed in GCC 4.4 but the
           change can lead to differences in the structure layout.  GCC
           informs you when the offset of such a field has changed in GCC 4.4.
           For example there is no longer a 4-bit padding between field "a"
           and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use
           -Wno-packed-bitfield-compat to disable this warning.

       -Wpadded
           Warn if padding is included in a structure, either to align an
           element of the structure or to align the whole structure.
           Sometimes when this happens it is possible to rearrange the fields
           of the structure to reduce the padding and so make the structure
           smaller.

       -Wredundant-decls
           Warn if anything is declared more than once in the same scope, even
           in cases where multiple declaration is valid and changes nothing.

       -Wnested-externs (C and Objective-C only)
           Warn if an "extern" declaration is encountered within a function.

       -Winline
           Warn if a function can not be inlined and it was declared as
           inline.  Even with this option, the compiler will not warn about
           failures to inline functions declared in system headers.

           The compiler uses a variety of heuristics to determine whether or
           not to inline a function.  For example, the compiler takes into
           account the size of the function being inlined and the amount of
           inlining that has already been done in the current function.
           Therefore, seemingly insignificant changes in the source program
           can cause the warnings produced by -Winline to appear or disappear.

       -Wno-invalid-offsetof (C++ and Objective-C++ only)
           Suppress warnings from applying the offsetof macro to a non-POD
           type.  According to the 1998 ISO C++ standard, applying offsetof to
           a non-POD type is undefined.  In existing C++ implementations,
           however, offsetof typically gives meaningful results even when
           applied to certain kinds of non-POD types. (Such as a simple struct
           that fails to be a POD type only by virtue of having a
           constructor.)  This flag is for users who are aware that they are
           writing nonportable code and who have deliberately chosen to ignore
           the warning about it.

           The restrictions on offsetof may be relaxed in a future version of
           the C++ standard.

       -Wno-int-to-pointer-cast
           Suppress warnings from casts to pointer type of an integer of a
           different size. In C++, casting to a pointer type of smaller size
           is an error. Wint-to-pointer-cast is enabled by default.

       -Wno-pointer-to-int-cast (C and Objective-C only)
           Suppress warnings from casts from a pointer to an integer type of a
           different size.

       -Winvalid-pch
           Warn if a precompiled header is found in the search path but can't
           be used.

       -Wlong-long
           Warn if long long type is used.  This is enabled by either
           -pedantic or -Wtraditional in ISO C90 and C++98 modes.  To inhibit
           the warning messages, use -Wno-long-long.

       -Wvariadic-macros
           Warn if variadic macros are used in pedantic ISO C90 mode, or the
           GNU alternate syntax when in pedantic ISO C99 mode.  This is
           default.  To inhibit the warning messages, use
           -Wno-variadic-macros.

       -Wvla
           Warn if variable length array is used in the code.  -Wno-vla will
           prevent the -pedantic warning of the variable length array.

       -Wvolatile-register-var
           Warn if a register variable is declared volatile.  The volatile
           modifier does not inhibit all optimizations that may eliminate
           reads and/or writes to register variables.  This warning is enabled
           by -Wall.

       -Wdisabled-optimization
           Warn if a requested optimization pass is disabled.  This warning
           does not generally indicate that there is anything wrong with your
           code; it merely indicates that GCC's optimizers were unable to
           handle the code effectively.  Often, the problem is that your code
           is too big or too complex; GCC will refuse to optimize programs
           when the optimization itself is likely to take inordinate amounts
           of time.

       -Wpointer-sign (C and Objective-C only)
           Warn for pointer argument passing or assignment with different
           signedness.  This option is only supported for C and Objective-C.
           It is implied by -Wall and by -pedantic, which can be disabled with
           -Wno-pointer-sign.

       -Wstack-protector
           This option is only active when -fstack-protector is active.  It
           warns about functions that will not be protected against stack
           smashing.

       -Wno-mudflap
           Suppress warnings about constructs that cannot be instrumented by
           -fmudflap.

       -Woverlength-strings
           Warn about string constants which are longer than the "minimum
           maximum" length specified in the C standard.  Modern compilers
           generally allow string constants which are much longer than the
           standard's minimum limit, but very portable programs should avoid
           using longer strings.

           The limit applies after string constant concatenation, and does not
           count the trailing NUL.  In C90, the limit was 509 characters; in
           C99, it was raised to 4095.  C++98 does not specify a normative
           minimum maximum, so we do not diagnose overlength strings in C++.

           This option is implied by -pedantic, and can be disabled with
           -Wno-overlength-strings.

       -Wunsuffixed-float-constants (C and Objective-C only)
           GCC will issue a warning for any floating constant that does not
           have a suffix.  When used together with -Wsystem-headers it will
           warn about such constants in system header files.  This can be
           useful when preparing code to use with the "FLOAT_CONST_DECIMAL64"
           pragma from the decimal floating-point extension to C99.

   Options for Debugging Your Program or GCC
       GCC has various special options that are used for debugging either your
       program or GCC:

       -g  Produce debugging information in the operating system's native
           format (stabs, COFF, XCOFF, or DWARF 2).  GDB can work with this
           debugging information.

           On most systems that use stabs format, -g enables use of extra
           debugging information that only GDB can use; this extra information
           makes debugging work better in GDB but will probably make other
           debuggers crash or refuse to read the program.  If you want to
           control for certain whether to generate the extra information, use
           -gstabs+, -gstabs, -gxcoff+, -gxcoff, or -gvms (see below).

           GCC allows you to use -g with -O.  The shortcuts taken by optimized
           code may occasionally produce surprising results: some variables
           you declared may not exist at all; flow of control may briefly move
           where you did not expect it; some statements may not be executed
           because they compute constant results or their values were already
           at hand; some statements may execute in different places because
           they were moved out of loops.

           Nevertheless it proves possible to debug optimized output.  This
           makes it reasonable to use the optimizer for programs that might
           have bugs.

           The following options are useful when GCC is generated with the
           capability for more than one debugging format.

       -ggdb
           Produce debugging information for use by GDB.  This means to use
           the most expressive format available (DWARF 2, stabs, or the native
           format if neither of those are supported), including GDB extensions
           if at all possible.

       -gstabs
           Produce debugging information in stabs format (if that is
           supported), without GDB extensions.  This is the format used by DBX
           on most BSD systems.  On MIPS, Alpha and System V Release 4 systems
           this option produces stabs debugging output which is not understood
           by DBX or SDB.  On System V Release 4 systems this option requires
           the GNU assembler.

       -feliminate-unused-debug-symbols
           Produce debugging information in stabs format (if that is
           supported), for only symbols that are actually used.

       -femit-class-debug-always
           Instead of emitting debugging information for a C++ class in only
           one object file, emit it in all object files using the class.  This
           option should be used only with debuggers that are unable to handle
           the way GCC normally emits debugging information for classes
           because using this option will increase the size of debugging
           information by as much as a factor of two.

       -gstabs+
           Produce debugging information in stabs format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program.

       -gcoff
           Produce debugging information in COFF format (if that is
           supported).  This is the format used by SDB on most System V
           systems prior to System V Release 4.

       -gxcoff
           Produce debugging information in XCOFF format (if that is
           supported).  This is the format used by the DBX debugger on IBM
           RS/6000 systems.

       -gxcoff+
           Produce debugging information in XCOFF format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program, and may cause
           assemblers other than the GNU assembler (GAS) to fail with an
           error.

       -gdwarf-version
           Produce debugging information in DWARF format (if that is
           supported).  This is the format used by DBX on IRIX 6.  The value
           of version may be either 2, 3 or 4; the default version is 2.

           Note that with DWARF version 2 some ports require, and will always
           use, some non-conflicting DWARF 3 extensions in the unwind tables.

           Version 4 may require GDB 7.0 and -fvar-tracking-assignments for
           maximum benefit.

       -gstrict-dwarf
           Disallow using extensions of later DWARF standard version than
           selected with -gdwarf-version.  On most targets using non-
           conflicting DWARF extensions from later standard versions is
           allowed.

       -gno-strict-dwarf
           Allow using extensions of later DWARF standard version than
           selected with -gdwarf-version.

       -gvms
           Produce debugging information in VMS debug format (if that is
           supported).  This is the format used by DEBUG on VMS systems.

       -glevel
       -ggdblevel
       -gstabslevel
       -gcofflevel
       -gxcofflevel
       -gvmslevel
           Request debugging information and also use level to specify how
           much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus, -g0 negates
           -g.

           Level 1 produces minimal information, enough for making backtraces
           in parts of the program that you don't plan to debug.  This
           includes descriptions of functions and external variables, but no
           information about local variables and no line numbers.

           Level 3 includes extra information, such as all the macro
           definitions present in the program.  Some debuggers support macro
           expansion when you use -g3.

           -gdwarf-2 does not accept a concatenated debug level, because GCC
           used to support an option -gdwarf that meant to generate debug
           information in version 1 of the DWARF format (which is very
           different from version 2), and it would have been too confusing.
           That debug format is long obsolete, but the option cannot be
           changed now.  Instead use an additional -glevel option to change
           the debug level for DWARF.

       -gtoggle
           Turn off generation of debug info, if leaving out this option would
           have generated it, or turn it on at level 2 otherwise.  The
           position of this argument in the command line does not matter, it
           takes effect after all other options are processed, and it does so
           only once, no matter how many times it is given.  This is mainly
           intended to be used with -fcompare-debug.

       -fdump-final-insns[=file]
           Dump the final internal representation (RTL) to file.  If the
           optional argument is omitted (or if file is "."), the name of the
           dump file will be determined by appending ".gkd" to the compilation
           output file name.

       -fcompare-debug[=opts]
           If no error occurs during compilation, run the compiler a second
           time, adding opts and -fcompare-debug-second to the arguments
           passed to the second compilation.  Dump the final internal
           representation in both compilations, and print an error if they
           differ.

           If the equal sign is omitted, the default -gtoggle is used.

           The environment variable GCC_COMPARE_DEBUG, if defined, non-empty
           and nonzero, implicitly enables -fcompare-debug.  If
           GCC_COMPARE_DEBUG is defined to a string starting with a dash, then
           it is used for opts, otherwise the default -gtoggle is used.

           -fcompare-debug=, with the equal sign but without opts, is
           equivalent to -fno-compare-debug, which disables the dumping of the
           final representation and the second compilation, preventing even
           GCC_COMPARE_DEBUG from taking effect.

           To verify full coverage during -fcompare-debug testing, set
           GCC_COMPARE_DEBUG to say -fcompare-debug-not-overridden, which GCC
           will reject as an invalid option in any actual compilation (rather
           than preprocessing, assembly or linking).  To get just a warning,
           setting GCC_COMPARE_DEBUG to -w%n-fcompare-debug not overridden
           will do.

       -fcompare-debug-second
           This option is implicitly passed to the compiler for the second
           compilation requested by -fcompare-debug, along with options to
           silence warnings, and omitting other options that would cause side-
           effect compiler outputs to files or to the standard output.  Dump
           files and preserved temporary files are renamed so as to contain
           the ".gk" additional extension during the second compilation, to
           avoid overwriting those generated by the first.

           When this option is passed to the compiler driver, it causes the
           first compilation to be skipped, which makes it useful for little
           other than debugging the compiler proper.

       -feliminate-dwarf2-dups
           Compress DWARF2 debugging information by eliminating duplicated
           information about each symbol.  This option only makes sense when
           generating DWARF2 debugging information with -gdwarf-2.

       -femit-struct-debug-baseonly
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the struct was defined.

           This option substantially reduces the size of debugging
           information, but at significant potential loss in type information
           to the debugger.  See -femit-struct-debug-reduced for a less
           aggressive option.  See -femit-struct-debug-detailed for more
           detailed control.

           This option works only with DWARF 2.

       -femit-struct-debug-reduced
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the type was defined, unless the struct is a template or
           defined in a system header.

           This option significantly reduces the size of debugging
           information, with some potential loss in type information to the
           debugger.  See -femit-struct-debug-baseonly for a more aggressive
           option.  See -femit-struct-debug-detailed for more detailed
           control.

           This option works only with DWARF 2.

       -femit-struct-debug-detailed[=spec-list]
           Specify the struct-like types for which the compiler will generate
           debug information.  The intent is to reduce duplicate struct debug
           information between different object files within the same program.

           This option is a detailed version of -femit-struct-debug-reduced
           and -femit-struct-debug-baseonly, which will serve for most needs.

           A specification has the
           syntax[dir:|ind:][ord:|gen:](any|sys|base|none)

           The optional first word limits the specification to structs that
           are used directly (dir:) or used indirectly (ind:).  A struct type
           is used directly when it is the type of a variable, member.
           Indirect uses arise through pointers to structs.  That is, when use
           of an incomplete struct would be legal, the use is indirect.  An
           example is struct one direct; struct two * indirect;.

           The optional second word limits the specification to ordinary
           structs (ord:) or generic structs (gen:).  Generic structs are a
           bit complicated to explain.  For C++, these are non-explicit
           specializations of template classes, or non-template classes within
           the above.  Other programming languages have generics, but
           -femit-struct-debug-detailed does not yet implement them.

           The third word specifies the source files for those structs for
           which the compiler will emit debug information.  The values none
           and any have the normal meaning.  The value base means that the
           base of name of the file in which the type declaration appears must
           match the base of the name of the main compilation file.  In
           practice, this means that types declared in foo.c and foo.h will
           have debug information, but types declared in other header will
           not.  The value sys means those types satisfying base or declared
           in system or compiler headers.

           You may need to experiment to determine the best settings for your
           application.

           The default is -femit-struct-debug-detailed=all.

           This option works only with DWARF 2.

       -fenable-icf-debug
           Generate additional debug information to support identical code
           folding (ICF).  This option only works with DWARF version 2 or
           higher.

       -fno-merge-debug-strings
           Direct the linker to not merge together strings in the debugging
           information which are identical in different object files.  Merging
           is not supported by all assemblers or linkers.  Merging decreases
           the size of the debug information in the output file at the cost of
           increasing link processing time.  Merging is enabled by default.

       -fdebug-prefix-map=old=new
           When compiling files in directory old, record debugging information
           describing them as in new instead.

       -fno-dwarf2-cfi-asm
           Emit DWARF 2 unwind info as compiler generated ".eh_frame" section
           instead of using GAS ".cfi_*" directives.

       -p  Generate extra code to write profile information suitable for the
           analysis program prof.  You must use this option when compiling the
           source files you want data about, and you must also use it when
           linking.

       -pg Generate extra code to write profile information suitable for the
           analysis program gprof.  You must use this option when compiling
           the source files you want data about, and you must also use it when
           linking.

       -Q  Makes the compiler print out each function name as it is compiled,
           and print some statistics about each pass when it finishes.

       -ftime-report
           Makes the compiler print some statistics about the time consumed by
           each pass when it finishes.

       -fmem-report
           Makes the compiler print some statistics about permanent memory
           allocation when it finishes.

       -fpre-ipa-mem-report
       -fpost-ipa-mem-report
           Makes the compiler print some statistics about permanent memory
           allocation before or after interprocedural optimization.

       -fstack-usage
           Makes the compiler output stack usage information for the program,
           on a per-function basis.  The filename for the dump is made by
           appending .su to the auxname.  auxname is generated from the name
           of the output file, if explicitly specified and it is not an
           executable, otherwise it is the basename of the source file.  An
           entry is made up of three fields:

           o   The name of the function.

           o   A number of bytes.

           o   One or more qualifiers: "static", "dynamic", "bounded".

           The qualifier "static" means that the function manipulates the
           stack statically: a fixed number of bytes are allocated for the
           frame on function entry and released on function exit; no stack
           adjustments are otherwise made in the function.  The second field
           is this fixed number of bytes.

           The qualifier "dynamic" means that the function manipulates the
           stack dynamically: in addition to the static allocation described
           above, stack adjustments are made in the body of the function, for
           example to push/pop arguments around function calls.  If the
           qualifier "bounded" is also present, the amount of these
           adjustments is bounded at compile-time and the second field is an
           upper bound of the total amount of stack used by the function.  If
           it is not present, the amount of these adjustments is not bounded
           at compile-time and the second field only represents the bounded
           part.

       -fprofile-arcs
           Add code so that program flow arcs are instrumented.  During
           execution the program records how many times each branch and call
           is executed and how many times it is taken or returns.  When the
           compiled program exits it saves this data to a file called
           auxname.gcda for each source file.  The data may be used for
           profile-directed optimizations (-fbranch-probabilities), or for
           test coverage analysis (-ftest-coverage).  Each object file's
           auxname is generated from the name of the output file, if
           explicitly specified and it is not the final executable, otherwise
           it is the basename of the source file.  In both cases any suffix is
           removed (e.g. foo.gcda for input file dir/foo.c, or dir/foo.gcda
           for output file specified as -o dir/foo.o).

       --coverage
           This option is used to compile and link code instrumented for
           coverage analysis.  The option is a synonym for -fprofile-arcs
           -ftest-coverage (when compiling) and -lgcov (when linking).  See
           the documentation for those options for more details.

           o   Compile the source files with -fprofile-arcs plus optimization
               and code generation options.  For test coverage analysis, use
               the additional -ftest-coverage option.  You do not need to
               profile every source file in a program.

           o   Link your object files with -lgcov or -fprofile-arcs (the
               latter implies the former).

           o   Run the program on a representative workload to generate the
               arc profile information.  This may be repeated any number of
               times.  You can run concurrent instances of your program, and
               provided that the file system supports locking, the data files
               will be correctly updated.  Also "fork" calls are detected and
               correctly handled (double counting will not happen).

           o   For profile-directed optimizations, compile the source files
               again with the same optimization and code generation options
               plus -fbranch-probabilities.

           o   For test coverage analysis, use gcov to produce human readable
               information from the .gcno and .gcda files.  Refer to the gcov
               documentation for further information.

           With -fprofile-arcs, for each function of your program GCC creates
           a program flow graph, then finds a spanning tree for the graph.
           Only arcs that are not on the spanning tree have to be
           instrumented: the compiler adds code to count the number of times
           that these arcs are executed.  When an arc is the only exit or only
           entrance to a block, the instrumentation code can be added to the
           block; otherwise, a new basic block must be created to hold the
           instrumentation code.

       -ftest-coverage
           Produce a notes file that the gcov code-coverage utility can use to
           show program coverage.  Each source file's note file is called
           auxname.gcno.  Refer to the -fprofile-arcs option above for a
           description of auxname and instructions on how to generate test
           coverage data.  Coverage data will match the source files more
           closely, if you do not optimize.

       -fdbg-cnt-list
           Print the name and the counter upper bound for all debug counters.

       -fdbg-cnt=counter-value-list
           Set the internal debug counter upper bound.  counter-value-list is
           a comma-separated list of name:value pairs which sets the upper
           bound of each debug counter name to value.  All debug counters have
           the initial upper bound of UINT_MAX, thus dbg_cnt() returns true
           always unless the upper bound is set by this option.  e.g. With
           -fdbg-cnt=dce:10,tail_call:0 dbg_cnt(dce) will return true only for
           first 10 invocations and dbg_cnt(tail_call) will return false
           always.

       -dletters
       -fdump-rtl-pass
           Says to make debugging dumps during compilation at times specified
           by letters.  This is used for debugging the RTL-based passes of the
           compiler.  The file names for most of the dumps are made by
           appending a pass number and a word to the dumpname, and the files
           are created in the directory of the output file.  Note that the
           pass number is computed statically as passes get registered into
           the pass manager.  Thus the numbering is not related to the dynamic
           order of execution of passes.  In particular, a pass installed by a
           plugin could have a number over 200 even if it executed quite
           early.  dumpname is generated from the name of the output file, if
           explicitly specified and it is not an executable, otherwise it is
           the basename of the source file. These switches may have different
           effects when -E is used for preprocessing.

           Debug dumps can be enabled with a -fdump-rtl switch or some -d
           option letters.  Here are the possible letters for use in pass and
           letters, and their meanings:

           -fdump-rtl-alignments
               Dump after branch alignments have been computed.

           -fdump-rtl-asmcons
               Dump after fixing rtl statements that have unsatisfied in/out
               constraints.

           -fdump-rtl-auto_inc_dec
               Dump after auto-inc-dec discovery.  This pass is only run on
               architectures that have auto inc or auto dec instructions.

           -fdump-rtl-barriers
               Dump after cleaning up the barrier instructions.

           -fdump-rtl-bbpart
               Dump after partitioning hot and cold basic blocks.

           -fdump-rtl-bbro
               Dump after block reordering.

           -fdump-rtl-btl1
           -fdump-rtl-btl2
               -fdump-rtl-btl1 and -fdump-rtl-btl2 enable dumping after the
               two branch target load optimization passes.

           -fdump-rtl-bypass
               Dump after jump bypassing and control flow optimizations.

           -fdump-rtl-combine
               Dump after the RTL instruction combination pass.

           -fdump-rtl-compgotos
               Dump after duplicating the computed gotos.

           -fdump-rtl-ce1
           -fdump-rtl-ce2
           -fdump-rtl-ce3
               -fdump-rtl-ce1, -fdump-rtl-ce2, and -fdump-rtl-ce3 enable
               dumping after the three if conversion passes.

           -fdump-rtl-cprop_hardreg
               Dump after hard register copy propagation.

           -fdump-rtl-csa
               Dump after combining stack adjustments.

           -fdump-rtl-cse1
           -fdump-rtl-cse2
               -fdump-rtl-cse1 and -fdump-rtl-cse2 enable dumping after the
               two common sub-expression elimination passes.

           -fdump-rtl-dce
               Dump after the standalone dead code elimination passes.

           -fdump-rtl-dbr
               Dump after delayed branch scheduling.

           -fdump-rtl-dce1
           -fdump-rtl-dce2
               -fdump-rtl-dce1 and -fdump-rtl-dce2 enable dumping after the
               two dead store elimination passes.

           -fdump-rtl-eh
               Dump after finalization of EH handling code.

           -fdump-rtl-eh_ranges
               Dump after conversion of EH handling range regions.

           -fdump-rtl-expand
               Dump after RTL generation.

           -fdump-rtl-fwprop1
           -fdump-rtl-fwprop2
               -fdump-rtl-fwprop1 and -fdump-rtl-fwprop2 enable dumping after
               the two forward propagation passes.

           -fdump-rtl-gcse1
           -fdump-rtl-gcse2
               -fdump-rtl-gcse1 and -fdump-rtl-gcse2 enable dumping after
               global common subexpression elimination.

           -fdump-rtl-init-regs
               Dump after the initialization of the registers.

           -fdump-rtl-initvals
               Dump after the computation of the initial value sets.

           -fdump-rtl-into_cfglayout
               Dump after converting to cfglayout mode.

           -fdump-rtl-ira
               Dump after iterated register allocation.

           -fdump-rtl-jump
               Dump after the second jump optimization.

           -fdump-rtl-loop2
               -fdump-rtl-loop2 enables dumping after the rtl loop
               optimization passes.

           -fdump-rtl-mach
               Dump after performing the machine dependent reorganization
               pass, if that pass exists.

           -fdump-rtl-mode_sw
               Dump after removing redundant mode switches.

           -fdump-rtl-rnreg
               Dump after register renumbering.

           -fdump-rtl-outof_cfglayout
               Dump after converting from cfglayout mode.

           -fdump-rtl-peephole2
               Dump after the peephole pass.

           -fdump-rtl-postreload
               Dump after post-reload optimizations.

           -fdump-rtl-pro_and_epilogue
               Dump after generating the function pro and epilogues.

           -fdump-rtl-regmove
               Dump after the register move pass.

           -fdump-rtl-sched1
           -fdump-rtl-sched2
               -fdump-rtl-sched1 and -fdump-rtl-sched2 enable dumping after
               the basic block scheduling passes.

           -fdump-rtl-see
               Dump after sign extension elimination.

           -fdump-rtl-seqabstr
               Dump after common sequence discovery.

           -fdump-rtl-shorten
               Dump after shortening branches.

           -fdump-rtl-sibling
               Dump after sibling call optimizations.

           -fdump-rtl-split1
           -fdump-rtl-split2
           -fdump-rtl-split3
           -fdump-rtl-split4
           -fdump-rtl-split5
               -fdump-rtl-split1, -fdump-rtl-split2, -fdump-rtl-split3,
               -fdump-rtl-split4 and -fdump-rtl-split5 enable dumping after
               five rounds of instruction splitting.

           -fdump-rtl-sms
               Dump after modulo scheduling.  This pass is only run on some
               architectures.

           -fdump-rtl-stack
               Dump after conversion from GCC's "flat register file" registers
               to the x87's stack-like registers.  This pass is only run on
               x86 variants.

           -fdump-rtl-subreg1
           -fdump-rtl-subreg2
               -fdump-rtl-subreg1 and -fdump-rtl-subreg2 enable dumping after
               the two subreg expansion passes.

           -fdump-rtl-unshare
               Dump after all rtl has been unshared.

           -fdump-rtl-vartrack
               Dump after variable tracking.

           -fdump-rtl-vregs
               Dump after converting virtual registers to hard registers.

           -fdump-rtl-web
               Dump after live range splitting.

           -fdump-rtl-regclass
           -fdump-rtl-subregs_of_mode_init
           -fdump-rtl-subregs_of_mode_finish
           -fdump-rtl-dfinit
           -fdump-rtl-dfinish
               These dumps are defined but always produce empty files.

           -da
           -fdump-rtl-all
               Produce all the dumps listed above.

           -dA Annotate the assembler output with miscellaneous debugging
               information.

           -dD Dump all macro definitions, at the end of preprocessing, in
               addition to normal output.

           -dH Produce a core dump whenever an error occurs.

           -dp Annotate the assembler output with a comment indicating which
               pattern and alternative was used.  The length of each
               instruction is also printed.

           -dP Dump the RTL in the assembler output as a comment before each
               instruction.  Also turns on -dp annotation.

           -dv For each of the other indicated dump files (-fdump-rtl-pass),
               dump a representation of the control flow graph suitable for
               viewing with VCG to file.pass.vcg.

           -dx Just generate RTL for a function instead of compiling it.
               Usually used with -fdump-rtl-expand.

       -fdump-noaddr
           When doing debugging dumps, suppress address output.  This makes it
           more feasible to use diff on debugging dumps for compiler
           invocations with different compiler binaries and/or different text
           / bss / data / heap / stack / dso start locations.

       -fdump-unnumbered
           When doing debugging dumps, suppress instruction numbers and
           address output.  This makes it more feasible to use diff on
           debugging dumps for compiler invocations with different options, in
           particular with and without -g.

       -fdump-unnumbered-links
           When doing debugging dumps (see -d option above), suppress
           instruction numbers for the links to the previous and next
           instructions in a sequence.

       -fdump-translation-unit (C++ only)
       -fdump-translation-unit-options (C++ only)
           Dump a representation of the tree structure for the entire
           translation unit to a file.  The file name is made by appending .tu
           to the source file name, and the file is created in the same
           directory as the output file.  If the -options form is used,
           options controls the details of the dump as described for the
           -fdump-tree options.

       -fdump-class-hierarchy (C++ only)
       -fdump-class-hierarchy-options (C++ only)
           Dump a representation of each class's hierarchy and virtual
           function table layout to a file.  The file name is made by
           appending .class to the source file name, and the file is created
           in the same directory as the output file.  If the -options form is
           used, options controls the details of the dump as described for the
           -fdump-tree options.

       -fdump-ipa-switch
           Control the dumping at various stages of inter-procedural analysis
           language tree to a file.  The file name is generated by appending a
           switch specific suffix to the source file name, and the file is
           created in the same directory as the output file.  The following
           dumps are possible:

           all Enables all inter-procedural analysis dumps.

           cgraph
               Dumps information about call-graph optimization, unused
               function removal, and inlining decisions.

           inline
               Dump after function inlining.

       -fdump-statistics-option
           Enable and control dumping of pass statistics in a separate file.
           The file name is generated by appending a suffix ending in
           .statistics to the source file name, and the file is created in the
           same directory as the output file.  If the -option form is used,
           -stats will cause counters to be summed over the whole compilation
           unit while -details will dump every event as the passes generate
           them.  The default with no option is to sum counters for each
           function compiled.

       -fdump-tree-switch
       -fdump-tree-switch-options
           Control the dumping at various stages of processing the
           intermediate language tree to a file.  The file name is generated
           by appending a switch specific suffix to the source file name, and
           the file is created in the same directory as the output file.  If
           the -options form is used, options is a list of - separated options
           that control the details of the dump.  Not all options are
           applicable to all dumps, those which are not meaningful will be
           ignored.  The following options are available

           address
               Print the address of each node.  Usually this is not meaningful
               as it changes according to the environment and source file.
               Its primary use is for tying up a dump file with a debug
               environment.

           asmname
               If "DECL_ASSEMBLER_NAME" has been set for a given decl, use
               that in the dump instead of "DECL_NAME".  Its primary use is
               ease of use working backward from mangled names in the assembly
               file.

           slim
               Inhibit dumping of members of a scope or body of a function
               merely because that scope has been reached.  Only dump such
               items when they are directly reachable by some other path.
               When dumping pretty-printed trees, this option inhibits dumping
               the bodies of control structures.

           raw Print a raw representation of the tree.  By default, trees are
               pretty-printed into a C-like representation.

           details
               Enable more detailed dumps (not honored by every dump option).

           stats
               Enable dumping various statistics about the pass (not honored
               by every dump option).

           blocks
               Enable showing basic block boundaries (disabled in raw dumps).

           vops
               Enable showing virtual operands for every statement.

           lineno
               Enable showing line numbers for statements.

           uid Enable showing the unique ID ("DECL_UID") for each variable.

           verbose
               Enable showing the tree dump for each statement.

           eh  Enable showing the EH region number holding each statement.

           all Turn on all options, except raw, slim, verbose and lineno.

           The following tree dumps are possible:

           original
               Dump before any tree based optimization, to file.original.

           optimized
               Dump after all tree based optimization, to file.optimized.

           gimple
               Dump each function before and after the gimplification pass to
               a file.  The file name is made by appending .gimple to the
               source file name.

           cfg Dump the control flow graph of each function to a file.  The
               file name is made by appending .cfg to the source file name.

           vcg Dump the control flow graph of each function to a file in VCG
               format.  The file name is made by appending .vcg to the source
               file name.  Note that if the file contains more than one
               function, the generated file cannot be used directly by VCG.
               You will need to cut and paste each function's graph into its
               own separate file first.

           ch  Dump each function after copying loop headers.  The file name
               is made by appending .ch to the source file name.

           ssa Dump SSA related information to a file.  The file name is made
               by appending .ssa to the source file name.

           alias
               Dump aliasing information for each function.  The file name is
               made by appending .alias to the source file name.

           ccp Dump each function after CCP.  The file name is made by
               appending .ccp to the source file name.

           storeccp
               Dump each function after STORE-CCP.  The file name is made by
               appending .storeccp to the source file name.

           pre Dump trees after partial redundancy elimination.  The file name
               is made by appending .pre to the source file name.

           fre Dump trees after full redundancy elimination.  The file name is
               made by appending .fre to the source file name.

           copyprop
               Dump trees after copy propagation.  The file name is made by
               appending .copyprop to the source file name.

           store_copyprop
               Dump trees after store copy-propagation.  The file name is made
               by appending .store_copyprop to the source file name.

           dce Dump each function after dead code elimination.  The file name
               is made by appending .dce to the source file name.

           mudflap
               Dump each function after adding mudflap instrumentation.  The
               file name is made by appending .mudflap to the source file
               name.

           sra Dump each function after performing scalar replacement of
               aggregates.  The file name is made by appending .sra to the
               source file name.

           sink
               Dump each function after performing code sinking.  The file
               name is made by appending .sink to the source file name.

           dom Dump each function after applying dominator tree optimizations.
               The file name is made by appending .dom to the source file
               name.

           dse Dump each function after applying dead store elimination.  The
               file name is made by appending .dse to the source file name.

           phiopt
               Dump each function after optimizing PHI nodes into straightline
               code.  The file name is made by appending .phiopt to the source
               file name.

           forwprop
               Dump each function after forward propagating single use
               variables.  The file name is made by appending .forwprop to the
               source file name.

           copyrename
               Dump each function after applying the copy rename optimization.
               The file name is made by appending .copyrename to the source
               file name.

           nrv Dump each function after applying the named return value
               optimization on generic trees.  The file name is made by
               appending .nrv to the source file name.

           vect
               Dump each function after applying vectorization of loops.  The
               file name is made by appending .vect to the source file name.

           slp Dump each function after applying vectorization of basic
               blocks.  The file name is made by appending .slp to the source
               file name.

           vrp Dump each function after Value Range Propagation (VRP).  The
               file name is made by appending .vrp to the source file name.

           all Enable all the available tree dumps with the flags provided in
               this option.

       -ftree-vectorizer-verbose=n
           This option controls the amount of debugging output the vectorizer
           prints.  This information is written to standard error, unless
           -fdump-tree-all or -fdump-tree-vect is specified, in which case it
           is output to the usual dump listing file, .vect.  For n=0 no
           diagnostic information is reported.  If n=1 the vectorizer reports
           each loop that got vectorized, and the total number of loops that
           got vectorized.  If n=2 the vectorizer also reports non-vectorized
           loops that passed the first analysis phase (vect_analyze_loop_form)
           - i.e. countable, inner-most, single-bb, single-entry/exit loops.
           This is the same verbosity level that -fdump-tree-vect-stats uses.
           Higher verbosity levels mean either more information dumped for
           each reported loop, or same amount of information reported for more
           loops: if n=3, vectorizer cost model information is reported.  If
           n=4, alignment related information is added to the reports.  If
           n=5, data-references related information (e.g. memory dependences,
           memory access-patterns) is added to the reports.  If n=6, the
           vectorizer reports also non-vectorized inner-most loops that did
           not pass the first analysis phase (i.e., may not be countable, or
           may have complicated control-flow).  If n=7, the vectorizer reports
           also non-vectorized nested loops.  If n=8, SLP related information
           is added to the reports.  For n=9, all the information the
           vectorizer generates during its analysis and transformation is
           reported.  This is the same verbosity level that
           -fdump-tree-vect-details uses.

       -frandom-seed=string
           This option provides a seed that GCC uses when it would otherwise
           use random numbers.  It is used to generate certain symbol names
           that have to be different in every compiled file.  It is also used
           to place unique stamps in coverage data files and the object files
           that produce them.  You can use the -frandom-seed option to produce
           reproducibly identical object files.

           The string should be different for every file you compile.

       -fsched-verbose=n
           On targets that use instruction scheduling, this option controls
           the amount of debugging output the scheduler prints.  This
           information is written to standard error, unless -fdump-rtl-sched1
           or -fdump-rtl-sched2 is specified, in which case it is output to
           the usual dump listing file, .sched1 or .sched2 respectively.
           However for n greater than nine, the output is always printed to
           standard error.

           For n greater than zero, -fsched-verbose outputs the same
           information as -fdump-rtl-sched1 and -fdump-rtl-sched2.  For n
           greater than one, it also output basic block probabilities,
           detailed ready list information and unit/insn info.  For n greater
           than two, it includes RTL at abort point, control-flow and regions
           info.  And for n over four, -fsched-verbose also includes
           dependence info.

       -save-temps
       -save-temps=cwd
           Store the usual "temporary" intermediate files permanently; place
           them in the current directory and name them based on the source
           file.  Thus, compiling foo.c with -c -save-temps would produce
           files foo.i and foo.s, as well as foo.o.  This creates a
           preprocessed foo.i output file even though the compiler now
           normally uses an integrated preprocessor.

           When used in combination with the -x command line option,
           -save-temps is sensible enough to avoid over writing an input
           source file with the same extension as an intermediate file.  The
           corresponding intermediate file may be obtained by renaming the
           source file before using -save-temps.

           If you invoke GCC in parallel, compiling several different source
           files that share a common base name in different subdirectories or
           the same source file compiled for multiple output destinations, it
           is likely that the different parallel compilers will interfere with
           each other, and overwrite the temporary files.  For instance:

                   gcc -save-temps -o outdir1/foo.o indir1/foo.c&
                   gcc -save-temps -o outdir2/foo.o indir2/foo.c&

           may result in foo.i and foo.o being written to simultaneously by
           both compilers.

       -save-temps=obj
           Store the usual "temporary" intermediate files permanently.  If the
           -o option is used, the temporary files are based on the object
           file.  If the -o option is not used, the -save-temps=obj switch
           behaves like -save-temps.

           For example:

                   gcc -save-temps=obj -c foo.c
                   gcc -save-temps=obj -c bar.c -o dir/xbar.o
                   gcc -save-temps=obj foobar.c -o dir2/yfoobar

           would create foo.i, foo.s, dir/xbar.i, dir/xbar.s, dir2/yfoobar.i,
           dir2/yfoobar.s, and dir2/yfoobar.o.

       -time[=file]
           Report the CPU time taken by each subprocess in the compilation
           sequence.  For C source files, this is the compiler proper and
           assembler (plus the linker if linking is done).

           Without the specification of an output file, the output looks like
           this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The first number on each line is the "user time", that is time
           spent executing the program itself.  The second number is "system
           time", time spent executing operating system routines on behalf of
           the program.  Both numbers are in seconds.

           With the specification of an output file, the output is appended to
           the named file, and it looks like this:

                   0.12 0.01 cc1 <options>
                   0.00 0.01 as <options>

           The "user time" and the "system time" are moved before the program
           name, and the options passed to the program are displayed, so that
           one can later tell what file was being compiled, and with which
           options.

       -fvar-tracking
           Run variable tracking pass.  It computes where variables are stored
           at each position in code.  Better debugging information is then
           generated (if the debugging information format supports this
           information).

           It is enabled by default when compiling with optimization (-Os, -O,
           -O2, ...), debugging information (-g) and the debug info format
           supports it.

       -fvar-tracking-assignments
           Annotate assignments to user variables early in the compilation and
           attempt to carry the annotations over throughout the compilation
           all the way to the end, in an attempt to improve debug information
           while optimizing.  Use of -gdwarf-4 is recommended along with it.

           It can be enabled even if var-tracking is disabled, in which case
           annotations will be created and maintained, but discarded at the
           end.

       -fvar-tracking-assignments-toggle
           Toggle -fvar-tracking-assignments, in the same way that -gtoggle
           toggles -g.

       -print-file-name=library
           Print the full absolute name of the library file library that would
           be used when linking---and don't do anything else.  With this
           option, GCC does not compile or link anything; it just prints the
           file name.

       -print-multi-directory
           Print the directory name corresponding to the multilib selected by
           any other switches present in the command line.  This directory is
           supposed to exist in GCC_EXEC_PREFIX.

       -print-multi-lib
           Print the mapping from multilib directory names to compiler
           switches that enable them.  The directory name is separated from
           the switches by ;, and each switch starts with an @ instead of the
           -, without spaces between multiple switches.  This is supposed to
           ease shell-processing.

       -print-multi-os-directory
           Print the path to OS libraries for the selected multilib, relative
           to some lib subdirectory.  If OS libraries are present in the lib
           subdirectory and no multilibs are used, this is usually just ., if
           OS libraries are present in libsuffix sibling directories this
           prints e.g. ../lib64, ../lib or ../lib32, or if OS libraries are
           present in lib/subdir subdirectories it prints e.g. amd64, sparcv9
           or ev6.

       -print-multiarch
           Print the path to OS libraries for the selected multiarch, relative
           to some lib subdirectory.

       -print-multiarch
           Print the path to OS libraries for the selected multiarch, relative
           to some lib subdirectory.

       -print-prog-name=program
           Like -print-file-name, but searches for a program such as cpp.

       -print-libgcc-file-name
           Same as -print-file-name=libgcc.a.

           This is useful when you use -nostdlib or -nodefaultlibs but you do
           want to link with libgcc.a.  You can do

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       -print-search-dirs
           Print the name of the configured installation directory and a list
           of program and library directories gcc will search---and don't do
           anything else.

           This is useful when gcc prints the error message installation
           problem, cannot exec cpp0: No such file or directory.  To resolve
           this you either need to put cpp0 and the other compiler components
           where gcc expects to find them, or you can set the environment
           variable GCC_EXEC_PREFIX to the directory where you installed them.
           Don't forget the trailing /.

       -print-sysroot
           Print the target sysroot directory that will be used during
           compilation.  This is the target sysroot specified either at
           configure time or using the --sysroot option, possibly with an
           extra suffix that depends on compilation options.  If no target
           sysroot is specified, the option prints nothing.

       -print-sysroot-headers-suffix
           Print the suffix added to the target sysroot when searching for
           headers, or give an error if the compiler is not configured with
           such a suffix---and don't do anything else.

       -dumpmachine
           Print the compiler's target machine (for example,
           i686-pc-linux-gnu)---and don't do anything else.

       -dumpversion
           Print the compiler version (for example, 3.0)---and don't do
           anything else.

       -dumpspecs
           Print the compiler's built-in specs---and don't do anything else.
           (This is used when GCC itself is being built.)

       -feliminate-unused-debug-types
           Normally, when producing DWARF2 output, GCC will emit debugging
           information for all types declared in a compilation unit,
           regardless of whether or not they are actually used in that
           compilation unit.  Sometimes this is useful, such as if, in the
           debugger, you want to cast a value to a type that is not actually
           used in your program (but is declared).  More often, however, this
           results in a significant amount of wasted space.  With this option,
           GCC will avoid producing debug symbol output for types that are
           nowhere used in the source file being compiled.

   Options That Control Optimization
       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to reduce the
       cost of compilation and to make debugging produce the expected results.
       Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or
       change the program counter to any other statement in the function and
       get exactly the results you would expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the
       performance and/or code size at the expense of compilation time and
       possibly the ability to debug the program.

       The compiler performs optimization based on the knowledge it has of the
       program.  Compiling multiple files at once to a single output file mode
       allows the compiler to use information gained from all of the files
       when compiling each of them.

       Not all optimizations are controlled directly by a flag.  Only
       optimizations that have a flag are listed in this section.

       Most optimizations are only enabled if an -O level is set on the
       command line.  Otherwise they are disabled, even if individual
       optimization flags are specified.

       Depending on the target and how GCC was configured, a slightly
       different set of optimizations may be enabled at each -O level than
       those listed here.  You can invoke GCC with -Q --help=optimizers to
       find out the exact set of optimizations that are enabled at each level.

       -O
       -O1 Optimize.  Optimizing compilation takes somewhat more time, and a
           lot more memory for a large function.

           With -O, the compiler tries to reduce code size and execution time,
           without performing any optimizations that take a great deal of
           compilation time.

           -O turns on the following optimization flags:

           -fauto-inc-dec -fcompare-elim -fcprop-registers -fdce -fdefer-pop
           -fdelayed-branch -fdse -fguess-branch-probability -fif-conversion2
           -fif-conversion -fipa-pure-const -fipa-profile -fipa-reference
           -fmerge-constants -fsplit-wide-types -ftree-bit-ccp
           -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copyrename
           -ftree-dce -ftree-dominator-opts -ftree-dse -ftree-forwprop
           -ftree-fre -ftree-phiprop -ftree-sra -ftree-pta -ftree-ter
           -funit-at-a-time

           -O also turns on -fomit-frame-pointer on machines where doing so
           does not interfere with debugging.

       -O2 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed tradeoff.  As
           compared to -O, this option increases both compilation time and the
           performance of the generated code.

           -O2 turns on all optimization flags specified by -O.  It also turns
           on the following optimization flags: -fthread-jumps
           -falign-functions  -falign-jumps -falign-loops  -falign-labels
           -fcaller-saves -fcrossjumping -fcse-follow-jumps  -fcse-skip-blocks
           -fdelete-null-pointer-checks -fdevirtualize
           -fexpensive-optimizations -fgcse  -fgcse-lm
           -finline-small-functions -findirect-inlining -fipa-sra
           -foptimize-sibling-calls -fpartial-inlining -fpeephole2 -fregmove
           -freorder-blocks  -freorder-functions -frerun-cse-after-loop
           -fsched-interblock  -fsched-spec -fschedule-insns
           -fschedule-insns2 -fstrict-aliasing -fstrict-overflow
           -ftree-switch-conversion -ftree-pre -ftree-vrp

           Please note the warning under -fgcse about invoking -O2 on programs
           that use computed gotos.

           NOTE: In Ubuntu 8.10 and later versions, -D_FORTIFY_SOURCE=2 is set
           by default, and is activated when -O is set to 2 or higher.  This
           enables additional compile-time and run-time checks for several
           libc functions.  To disable, specify either -U_FORTIFY_SOURCE or
           -D_FORTIFY_SOURCE=0.

       -O3 Optimize yet more.  -O3 turns on all optimizations specified by -O2
           and also turns on the -finline-functions, -funswitch-loops,
           -fpredictive-commoning, -fgcse-after-reload, -ftree-vectorize and
           -fipa-cp-clone options.

       -O0 Reduce compilation time and make debugging produce the expected
           results.  This is the default.

       -Os Optimize for size.  -Os enables all -O2 optimizations that do not
           typically increase code size.  It also performs further
           optimizations designed to reduce code size.

           -Os disables the following optimization flags: -falign-functions
           -falign-jumps  -falign-loops -falign-labels  -freorder-blocks
           -freorder-blocks-and-partition -fprefetch-loop-arrays
           -ftree-vect-loop-version

       -Ofast
           Disregard strict standards compliance.  -Ofast enables all -O3
           optimizations.  It also enables optimizations that are not valid
           for all standard compliant programs.  It turns on -ffast-math.

           If you use multiple -O options, with or without level numbers, the
           last such option is the one that is effective.

       Options of the form -fflag specify machine-independent flags.  Most
       flags have both positive and negative forms; the negative form of -ffoo
       would be -fno-foo.  In the table below, only one of the forms is
       listed---the one you typically will use.  You can figure out the other
       form by either removing no- or adding it.

       The following options control specific optimizations.  They are either
       activated by -O options or are related to ones that are.  You can use
       the following flags in the rare cases when "fine-tuning" of
       optimizations to be performed is desired.

       -fno-default-inline
           Do not make member functions inline by default merely because they
           are defined inside the class scope (C++ only).  Otherwise, when you
           specify -O, member functions defined inside class scope are
           compiled inline by default; i.e., you don't need to add inline in
           front of the member function name.

       -fno-defer-pop
           Always pop the arguments to each function call as soon as that
           function returns.  For machines which must pop arguments after a
           function call, the compiler normally lets arguments accumulate on
           the stack for several function calls and pops them all at once.

           Disabled at levels -O, -O2, -O3, -Os.

       -fforward-propagate
           Perform a forward propagation pass on RTL.  The pass tries to
           combine two instructions and checks if the result can be
           simplified.  If loop unrolling is active, two passes are performed
           and the second is scheduled after loop unrolling.

           This option is enabled by default at optimization levels -O, -O2,
           -O3, -Os.

       -ffp-contract=style
           -ffp-contract=off disables floating-point expression contraction.
           -ffp-contract=fast enables floating-point expression contraction
           such as forming of fused multiply-add operations if the target has
           native support for them.  -ffp-contract=on enables floating-point
           expression contraction if allowed by the language standard.  This
           is currently not implemented and treated equal to
           -ffp-contract=off.

           The default is -ffp-contract=fast.

       -fomit-frame-pointer
           Don't keep the frame pointer in a register for functions that don't
           need one.  This avoids the instructions to save, set up and restore
           frame pointers; it also makes an extra register available in many
           functions.  It also makes debugging impossible on some machines.

           On some machines, such as the VAX, this flag has no effect, because
           the standard calling sequence automatically handles the frame
           pointer and nothing is saved by pretending it doesn't exist.  The
           machine-description macro "FRAME_POINTER_REQUIRED" controls whether
           a target machine supports this flag.

           Starting with GCC version 4.6, the default setting (when not
           optimizing for size) for 32-bit Linux x86 and 32-bit Darwin x86
           targets has been changed to -fomit-frame-pointer.  The default can
           be reverted to -fno-omit-frame-pointer by configuring GCC with the
           --enable-frame-pointer configure option.

           Enabled at levels -O, -O2, -O3, -Os.

       -foptimize-sibling-calls
           Optimize sibling and tail recursive calls.

           Enabled at levels -O2, -O3, -Os.

       -fno-inline
           Don't pay attention to the "inline" keyword.  Normally this option
           is used to keep the compiler from expanding any functions inline.
           Note that if you are not optimizing, no functions can be expanded
           inline.

       -finline-small-functions
           Integrate functions into their callers when their body is smaller
           than expected function call code (so overall size of program gets
           smaller).  The compiler heuristically decides which functions are
           simple enough to be worth integrating in this way.

           Enabled at level -O2.

       -findirect-inlining
           Inline also indirect calls that are discovered to be known at
           compile time thanks to previous inlining.  This option has any
           effect only when inlining itself is turned on by the
           -finline-functions or -finline-small-functions options.

           Enabled at level -O2.

       -finline-functions
           Integrate all simple functions into their callers.  The compiler
           heuristically decides which functions are simple enough to be worth
           integrating in this way.

           If all calls to a given function are integrated, and the function
           is declared "static", then the function is normally not output as
           assembler code in its own right.

           Enabled at level -O3.

       -finline-functions-called-once
           Consider all "static" functions called once for inlining into their
           caller even if they are not marked "inline".  If a call to a given
           function is integrated, then the function is not output as
           assembler code in its own right.

           Enabled at levels -O1, -O2, -O3 and -Os.

       -fearly-inlining
           Inline functions marked by "always_inline" and functions whose body
           seems smaller than the function call overhead early before doing
           -fprofile-generate instrumentation and real inlining pass.  Doing
           so makes profiling significantly cheaper and usually inlining
           faster on programs having large chains of nested wrapper functions.

           Enabled by default.

       -fipa-sra
           Perform interprocedural scalar replacement of aggregates, removal
           of unused parameters and replacement of parameters passed by
           reference by parameters passed by value.

           Enabled at levels -O2, -O3 and -Os.

       -finline-limit=n
           By default, GCC limits the size of functions that can be inlined.
           This flag allows coarse control of this limit.  n is the size of
           functions that can be inlined in number of pseudo instructions.

           Inlining is actually controlled by a number of parameters, which
           may be specified individually by using --param name=value.  The
           -finline-limit=n option sets some of these parameters as follows:

           max-inline-insns-single
               is set to n/2.

           max-inline-insns-auto
               is set to n/2.

           See below for a documentation of the individual parameters
           controlling inlining and for the defaults of these parameters.

           Note: there may be no value to -finline-limit that results in
           default behavior.

           Note: pseudo instruction represents, in this particular context, an
           abstract measurement of function's size.  In no way does it
           represent a count of assembly instructions and as such its exact
           meaning might change from one release to an another.

       -fno-keep-inline-dllexport
           This is a more fine-grained version of -fkeep-inline-functions,
           which applies only to functions that are declared using the
           "dllexport" attribute or declspec

       -fkeep-inline-functions
           In C, emit "static" functions that are declared "inline" into the
           object file, even if the function has been inlined into all of its
           callers.  This switch does not affect functions using the "extern
           inline" extension in GNU C90.  In C++, emit any and all inline
           functions into the object file.

       -fkeep-static-consts
           Emit variables declared "static const" when optimization isn't
           turned on, even if the variables aren't referenced.

           GCC enables this option by default.  If you want to force the
           compiler to check if the variable was referenced, regardless of
           whether or not optimization is turned on, use the
           -fno-keep-static-consts option.

       -fmerge-constants
           Attempt to merge identical constants (string constants and floating
           point constants) across compilation units.

           This option is the default for optimized compilation if the
           assembler and linker support it.  Use -fno-merge-constants to
           inhibit this behavior.

           Enabled at levels -O, -O2, -O3, -Os.

       -fmerge-all-constants
           Attempt to merge identical constants and identical variables.

           This option implies -fmerge-constants.  In addition to
           -fmerge-constants this considers e.g. even constant initialized
           arrays or initialized constant variables with integral or floating
           point types.  Languages like C or C++ require each variable,
           including multiple instances of the same variable in recursive
           calls, to have distinct locations, so using this option will result
           in non-conforming behavior.

       -fmodulo-sched
           Perform swing modulo scheduling immediately before the first
           scheduling pass.  This pass looks at innermost loops and reorders
           their instructions by overlapping different iterations.

       -fmodulo-sched-allow-regmoves
           Perform more aggressive SMS based modulo scheduling with register
           moves allowed.  By setting this flag certain anti-dependences edges
           will be deleted which will trigger the generation of reg-moves
           based on the life-range analysis.  This option is effective only
           with -fmodulo-sched enabled.

       -fno-branch-count-reg
           Do not use "decrement and branch" instructions on a count register,
           but instead generate a sequence of instructions that decrement a
           register, compare it against zero, then branch based upon the
           result.  This option is only meaningful on architectures that
           support such instructions, which include x86, PowerPC, IA-64 and
           S/390.

           The default is -fbranch-count-reg.

       -fno-function-cse
           Do not put function addresses in registers; make each instruction
           that calls a constant function contain the function's address
           explicitly.

           This option results in less efficient code, but some strange hacks
           that alter the assembler output may be confused by the
           optimizations performed when this option is not used.

           The default is -ffunction-cse

       -fno-zero-initialized-in-bss
           If the target supports a BSS section, GCC by default puts variables
           that are initialized to zero into BSS.  This can save space in the
           resulting code.

           This option turns off this behavior because some programs
           explicitly rely on variables going to the data section.  E.g., so
           that the resulting executable can find the beginning of that
           section and/or make assumptions based on that.

           The default is -fzero-initialized-in-bss.

       -fmudflap -fmudflapth -fmudflapir
           For front-ends that support it (C and C++), instrument all risky
           pointer/array dereferencing operations, some standard library
           string/heap functions, and some other associated constructs with
           range/validity tests.  Modules so instrumented should be immune to
           buffer overflows, invalid heap use, and some other classes of C/C++
           programming errors.  The instrumentation relies on a separate
           runtime library (libmudflap), which will be linked into a program
           if -fmudflap is given at link time.  Run-time behavior of the
           instrumented program is controlled by the MUDFLAP_OPTIONS
           environment variable.  See "env MUDFLAP_OPTIONS=-help a.out" for
           its options.

           Use -fmudflapth instead of -fmudflap to compile and to link if your
           program is multi-threaded.  Use -fmudflapir, in addition to
           -fmudflap or -fmudflapth, if instrumentation should ignore pointer
           reads.  This produces less instrumentation (and therefore faster
           execution) and still provides some protection against outright
           memory corrupting writes, but allows erroneously read data to
           propagate within a program.

       -fthread-jumps
           Perform optimizations where we check to see if a jump branches to a
           location where another comparison subsumed by the first is found.
           If so, the first branch is redirected to either the destination of
           the second branch or a point immediately following it, depending on
           whether the condition is known to be true or false.

           Enabled at levels -O2, -O3, -Os.

       -fsplit-wide-types
           When using a type that occupies multiple registers, such as "long
           long" on a 32-bit system, split the registers apart and allocate
           them independently.  This normally generates better code for those
           types, but may make debugging more difficult.

           Enabled at levels -O, -O2, -O3, -Os.

       -fcse-follow-jumps
           In common subexpression elimination (CSE), scan through jump
           instructions when the target of the jump is not reached by any
           other path.  For example, when CSE encounters an "if" statement
           with an "else" clause, CSE will follow the jump when the condition
           tested is false.

           Enabled at levels -O2, -O3, -Os.

       -fcse-skip-blocks
           This is similar to -fcse-follow-jumps, but causes CSE to follow
           jumps which conditionally skip over blocks.  When CSE encounters a
           simple "if" statement with no else clause, -fcse-skip-blocks causes
           CSE to follow the jump around the body of the "if".

           Enabled at levels -O2, -O3, -Os.

       -frerun-cse-after-loop
           Re-run common subexpression elimination after loop optimizations
           has been performed.

           Enabled at levels -O2, -O3, -Os.

       -fgcse
           Perform a global common subexpression elimination pass.  This pass
           also performs global constant and copy propagation.

           Note: When compiling a program using computed gotos, a GCC
           extension, you may get better runtime performance if you disable
           the global common subexpression elimination pass by adding
           -fno-gcse to the command line.

           Enabled at levels -O2, -O3, -Os.

       -fgcse-lm
           When -fgcse-lm is enabled, global common subexpression elimination
           will attempt to move loads which are only killed by stores into
           themselves.  This allows a loop containing a load/store sequence to
           be changed to a load outside the loop, and a copy/store within the
           loop.

           Enabled by default when gcse is enabled.

       -fgcse-sm
           When -fgcse-sm is enabled, a store motion pass is run after global
           common subexpression elimination.  This pass will attempt to move
           stores out of loops.  When used in conjunction with -fgcse-lm,
           loops containing a load/store sequence can be changed to a load
           before the loop and a store after the loop.

           Not enabled at any optimization level.

       -fgcse-las
           When -fgcse-las is enabled, the global common subexpression
           elimination pass eliminates redundant loads that come after stores
           to the same memory location (both partial and full redundancies).

           Not enabled at any optimization level.

       -fgcse-after-reload
           When -fgcse-after-reload is enabled, a redundant load elimination
           pass is performed after reload.  The purpose of this pass is to
           cleanup redundant spilling.

       -funsafe-loop-optimizations
           If given, the loop optimizer will assume that loop indices do not
           overflow, and that the loops with nontrivial exit condition are not
           infinite.  This enables a wider range of loop optimizations even if
           the loop optimizer itself cannot prove that these assumptions are
           valid.  Using -Wunsafe-loop-optimizations, the compiler will warn
           you if it finds this kind of loop.

       -fcrossjumping
           Perform cross-jumping transformation.  This transformation unifies
           equivalent code and save code size.  The resulting code may or may
           not perform better than without cross-jumping.

           Enabled at levels -O2, -O3, -Os.

       -fauto-inc-dec
           Combine increments or decrements of addresses with memory accesses.
           This pass is always skipped on architectures that do not have
           instructions to support this.  Enabled by default at -O and higher
           on architectures that support this.

       -fdce
           Perform dead code elimination (DCE) on RTL.  Enabled by default at
           -O and higher.

       -fdse
           Perform dead store elimination (DSE) on RTL.  Enabled by default at
           -O and higher.

       -fif-conversion
           Attempt to transform conditional jumps into branch-less
           equivalents.  This include use of conditional moves, min, max, set
           flags and abs instructions, and some tricks doable by standard
           arithmetics.  The use of conditional execution on chips where it is
           available is controlled by "if-conversion2".

           Enabled at levels -O, -O2, -O3, -Os.

       -fif-conversion2
           Use conditional execution (where available) to transform
           conditional jumps into branch-less equivalents.

           Enabled at levels -O, -O2, -O3, -Os.

       -fdelete-null-pointer-checks
           Assume that programs cannot safely dereference null pointers, and
           that no code or data element resides there.  This enables simple
           constant folding optimizations at all optimization levels.  In
           addition, other optimization passes in GCC use this flag to control
           global dataflow analyses that eliminate useless checks for null
           pointers; these assume that if a pointer is checked after it has
           already been dereferenced, it cannot be null.

           Note however that in some environments this assumption is not true.
           Use -fno-delete-null-pointer-checks to disable this optimization
           for programs which depend on that behavior.

           Some targets, especially embedded ones, disable this option at all
           levels.  Otherwise it is enabled at all levels: -O0, -O1, -O2, -O3,
           -Os.  Passes that use the information are enabled independently at
           different optimization levels.

       -fdevirtualize
           Attempt to convert calls to virtual functions to direct calls.
           This is done both within a procedure and interprocedurally as part
           of indirect inlining ("-findirect-inlining") and interprocedural
           constant propagation (-fipa-cp).  Enabled at levels -O2, -O3, -Os.

       -fexpensive-optimizations
           Perform a number of minor optimizations that are relatively
           expensive.

           Enabled at levels -O2, -O3, -Os.

       -foptimize-register-move
       -fregmove
           Attempt to reassign register numbers in move instructions and as
           operands of other simple instructions in order to maximize the
           amount of register tying.  This is especially helpful on machines
           with two-operand instructions.

           Note -fregmove and -foptimize-register-move are the same
           optimization.

           Enabled at levels -O2, -O3, -Os.

       -fira-algorithm=algorithm
           Use specified coloring algorithm for the integrated register
           allocator.  The algorithm argument should be "priority" or "CB".
           The first algorithm specifies Chow's priority coloring, the second
           one specifies Chaitin-Briggs coloring.  The second algorithm can be
           unimplemented for some architectures.  If it is implemented, it is
           the default because Chaitin-Briggs coloring as a rule generates a
           better code.

       -fira-region=region
           Use specified regions for the integrated register allocator.  The
           region argument should be one of "all", "mixed", or "one".  The
           first value means using all loops as register allocation regions,
           the second value which is the default means using all loops except
           for loops with small register pressure as the regions, and third
           one means using all function as a single region.  The first value
           can give best result for machines with small size and irregular
           register set, the third one results in faster and generates decent
           code and the smallest size code, and the default value usually give
           the best results in most cases and for most architectures.

       -fira-loop-pressure
           Use IRA to evaluate register pressure in loops for decision to move
           loop invariants.  Usage of this option usually results in
           generation of faster and smaller code on machines with big register
           files (>= 32 registers) but it can slow compiler down.

           This option is enabled at level -O3 for some targets.

       -fno-ira-share-save-slots
           Switch off sharing stack slots used for saving call used hard
           registers living through a call.  Each hard register will get a
           separate stack slot and as a result function stack frame will be
           bigger.

       -fno-ira-share-spill-slots
           Switch off sharing stack slots allocated for pseudo-registers.
           Each pseudo-register which did not get a hard register will get a
           separate stack slot and as a result function stack frame will be
           bigger.

       -fira-verbose=n
           Set up how verbose dump file for the integrated register allocator
           will be.  Default value is 5.  If the value is greater or equal to
           10, the dump file will be stderr as if the value were n minus 10.

       -fdelayed-branch
           If supported for the target machine, attempt to reorder
           instructions to exploit instruction slots available after delayed
           branch instructions.

           Enabled at levels -O, -O2, -O3, -Os.

       -fschedule-insns
           If supported for the target machine, attempt to reorder
           instructions to eliminate execution stalls due to required data
           being unavailable.  This helps machines that have slow floating
           point or memory load instructions by allowing other instructions to
           be issued until the result of the load or floating point
           instruction is required.

           Enabled at levels -O2, -O3.

       -fschedule-insns2
           Similar to -fschedule-insns, but requests an additional pass of
           instruction scheduling after register allocation has been done.
           This is especially useful on machines with a relatively small
           number of registers and where memory load instructions take more
           than one cycle.

           Enabled at levels -O2, -O3, -Os.

       -fno-sched-interblock
           Don't schedule instructions across basic blocks.  This is normally
           enabled by default when scheduling before register allocation, i.e.
           with -fschedule-insns or at -O2 or higher.

       -fno-sched-spec
           Don't allow speculative motion of non-load instructions.  This is
           normally enabled by default when scheduling before register
           allocation, i.e.  with -fschedule-insns or at -O2 or higher.

       -fsched-pressure
           Enable register pressure sensitive insn scheduling before the
           register allocation.  This only makes sense when scheduling before
           register allocation is enabled, i.e. with -fschedule-insns or at
           -O2 or higher.  Usage of this option can improve the generated code
           and decrease its size by preventing register pressure increase
           above the number of available hard registers and as a consequence
           register spills in the register allocation.

       -fsched-spec-load
           Allow speculative motion of some load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           -fschedule-insns or at -O2 or higher.

       -fsched-spec-load-dangerous
           Allow speculative motion of more load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           -fschedule-insns or at -O2 or higher.

       -fsched-stalled-insns
       -fsched-stalled-insns=n
           Define how many insns (if any) can be moved prematurely from the
           queue of stalled insns into the ready list, during the second
           scheduling pass.  -fno-sched-stalled-insns means that no insns will
           be moved prematurely, -fsched-stalled-insns=0 means there is no
           limit on how many queued insns can be moved prematurely.
           -fsched-stalled-insns without a value is equivalent to
           -fsched-stalled-insns=1.

       -fsched-stalled-insns-dep
       -fsched-stalled-insns-dep=n
           Define how many insn groups (cycles) will be examined for a
           dependency on a stalled insn that is candidate for premature
           removal from the queue of stalled insns.  This has an effect only
           during the second scheduling pass, and only if
           -fsched-stalled-insns is used.  -fno-sched-stalled-insns-dep is
           equivalent to -fsched-stalled-insns-dep=0.
           -fsched-stalled-insns-dep without a value is equivalent to
           -fsched-stalled-insns-dep=1.

       -fsched2-use-superblocks
           When scheduling after register allocation, do use superblock
           scheduling algorithm.  Superblock scheduling allows motion across
           basic block boundaries resulting on faster schedules.  This option
           is experimental, as not all machine descriptions used by GCC model
           the CPU closely enough to avoid unreliable results from the
           algorithm.

           This only makes sense when scheduling after register allocation,
           i.e. with -fschedule-insns2 or at -O2 or higher.

       -fsched-group-heuristic
           Enable the group heuristic in the scheduler.  This heuristic favors
           the instruction that belongs to a schedule group.  This is enabled
           by default when scheduling is enabled, i.e. with -fschedule-insns
           or -fschedule-insns2 or at -O2 or higher.

       -fsched-critical-path-heuristic
           Enable the critical-path heuristic in the scheduler.  This
           heuristic favors instructions on the critical path.  This is
           enabled by default when scheduling is enabled, i.e. with
           -fschedule-insns or -fschedule-insns2 or at -O2 or higher.

       -fsched-spec-insn-heuristic
           Enable the speculative instruction heuristic in the scheduler.
           This heuristic favors speculative instructions with greater
           dependency weakness.  This is enabled by default when scheduling is
           enabled, i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2
           or higher.

       -fsched-rank-heuristic
           Enable the rank heuristic in the scheduler.  This heuristic favors
           the instruction belonging to a basic block with greater size or
           frequency.  This is enabled by default when scheduling is enabled,
           i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2 or
           higher.

       -fsched-last-insn-heuristic
           Enable the last-instruction heuristic in the scheduler.  This
           heuristic favors the instruction that is less dependent on the last
           instruction scheduled.  This is enabled by default when scheduling
           is enabled, i.e. with -fschedule-insns or -fschedule-insns2 or at
           -O2 or higher.

       -fsched-dep-count-heuristic
           Enable the dependent-count heuristic in the scheduler.  This
           heuristic favors the instruction that has more instructions
           depending on it.  This is enabled by default when scheduling is
           enabled, i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2
           or higher.

       -freschedule-modulo-scheduled-loops
           The modulo scheduling comes before the traditional scheduling, if a
           loop was modulo scheduled we may want to prevent the later
           scheduling passes from changing its schedule, we use this option to
           control that.

       -fselective-scheduling
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the first scheduler pass.

       -fselective-scheduling2
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the second scheduler pass.

       -fsel-sched-pipelining
           Enable software pipelining of innermost loops during selective
           scheduling.  This option has no effect until one of
           -fselective-scheduling or -fselective-scheduling2 is turned on.

       -fsel-sched-pipelining-outer-loops
           When pipelining loops during selective scheduling, also pipeline
           outer loops.  This option has no effect until
           -fsel-sched-pipelining is turned on.

       -fcaller-saves
           Enable values to be allocated in registers that will be clobbered
           by function calls, by emitting extra instructions to save and
           restore the registers around such calls.  Such allocation is done
           only when it seems to result in better code than would otherwise be
           produced.

           This option is always enabled by default on certain machines,
           usually those which have no call-preserved registers to use
           instead.

           Enabled at levels -O2, -O3, -Os.

       -fcombine-stack-adjustments
           Tracks stack adjustments (pushes and pops) and stack memory
           references and then tries to find ways to combine them.

           Enabled by default at -O1 and higher.

       -fconserve-stack
           Attempt to minimize stack usage.  The compiler will attempt to use
           less stack space, even if that makes the program slower.  This
           option implies setting the large-stack-frame parameter to 100 and
           the large-stack-frame-growth parameter to 400.

       -ftree-reassoc
           Perform reassociation on trees.  This flag is enabled by default at
           -O and higher.

       -ftree-pre
           Perform partial redundancy elimination (PRE) on trees.  This flag
           is enabled by default at -O2 and -O3.

       -ftree-forwprop
           Perform forward propagation on trees.  This flag is enabled by
           default at -O and higher.

       -ftree-fre
           Perform full redundancy elimination (FRE) on trees.  The difference
           between FRE and PRE is that FRE only considers expressions that are
           computed on all paths leading to the redundant computation.  This
           analysis is faster than PRE, though it exposes fewer redundancies.
           This flag is enabled by default at -O and higher.

       -ftree-phiprop
           Perform hoisting of loads from conditional pointers on trees.  This
           pass is enabled by default at -O and higher.

       -ftree-copy-prop
           Perform copy propagation on trees.  This pass eliminates
           unnecessary copy operations.  This flag is enabled by default at -O
           and higher.

       -fipa-pure-const
           Discover which functions are pure or constant.  Enabled by default
           at -O and higher.

       -fipa-reference
           Discover which static variables do not escape cannot escape the
           compilation unit.  Enabled by default at -O and higher.

       -fipa-struct-reorg
           Perform structure reorganization optimization, that change C-like
           structures layout in order to better utilize spatial locality.
           This transformation is affective for programs containing arrays of
           structures.  Available in two compilation modes: profile-based
           (enabled with -fprofile-generate) or static (which uses built-in
           heuristics).  It works only in whole program mode, so it requires
           -fwhole-program to be enabled.  Structures considered cold by this
           transformation are not affected (see --param
           struct-reorg-cold-struct-ratio=value).

           With this flag, the program debug info reflects a new structure
           layout.

       -fipa-pta
           Perform interprocedural pointer analysis and interprocedural
           modification and reference analysis.  This option can cause
           excessive memory and compile-time usage on large compilation units.
           It is not enabled by default at any optimization level.

       -fipa-profile
           Perform interprocedural profile propagation.  The functions called
           only from cold functions are marked as cold. Also functions
           executed once (such as "cold", "noreturn", static constructors or
           destructors) are identified. Cold functions and loop less parts of
           functions executed once are then optimized for size.  Enabled by
           default at -O and higher.

       -fipa-cp
           Perform interprocedural constant propagation.  This optimization
           analyzes the program to determine when values passed to functions
           are constants and then optimizes accordingly.  This optimization
           can substantially increase performance if the application has
           constants passed to functions.  This flag is enabled by default at
           -O2, -Os and -O3.

       -fipa-cp-clone
           Perform function cloning to make interprocedural constant
           propagation stronger.  When enabled, interprocedural constant
           propagation will perform function cloning when externally visible
           function can be called with constant arguments.  Because this
           optimization can create multiple copies of functions, it may
           significantly increase code size (see --param
           ipcp-unit-growth=value).  This flag is enabled by default at -O3.

       -fipa-matrix-reorg
           Perform matrix flattening and transposing.  Matrix flattening tries
           to replace an m-dimensional matrix with its equivalent
           n-dimensional matrix, where n < m.  This reduces the level of
           indirection needed for accessing the elements of the matrix. The
           second optimization is matrix transposing that attempts to change
           the order of the matrix's dimensions in order to improve cache
           locality.  Both optimizations need the -fwhole-program flag.
           Transposing is enabled only if profiling information is available.

       -ftree-sink
           Perform forward store motion  on trees.  This flag is enabled by
           default at -O and higher.

       -ftree-bit-ccp
           Perform sparse conditional bit constant propagation on trees and
           propagate pointer alignment information.  This pass only operates
           on local scalar variables and is enabled by default at -O and
           higher.  It requires that -ftree-ccp is enabled.

       -ftree-ccp
           Perform sparse conditional constant propagation (CCP) on trees.
           This pass only operates on local scalar variables and is enabled by
           default at -O and higher.

       -ftree-switch-conversion
           Perform conversion of simple initializations in a switch to
           initializations from a scalar array.  This flag is enabled by
           default at -O2 and higher.

       -ftree-dce
           Perform dead code elimination (DCE) on trees.  This flag is enabled
           by default at -O and higher.

       -ftree-builtin-call-dce
           Perform conditional dead code elimination (DCE) for calls to
           builtin functions that may set "errno" but are otherwise side-
           effect free.  This flag is enabled by default at -O2 and higher if
           -Os is not also specified.

       -ftree-dominator-opts
           Perform a variety of simple scalar cleanups (constant/copy
           propagation, redundancy elimination, range propagation and
           expression simplification) based on a dominator tree traversal.
           This also performs jump threading (to reduce jumps to jumps). This
           flag is enabled by default at -O and higher.

       -ftree-dse
           Perform dead store elimination (DSE) on trees.  A dead store is a
           store into a memory location which will later be overwritten by
           another store without any intervening loads.  In this case the
           earlier store can be deleted.  This flag is enabled by default at
           -O and higher.

       -ftree-ch
           Perform loop header copying on trees.  This is beneficial since it
           increases effectiveness of code motion optimizations.  It also
           saves one jump.  This flag is enabled by default at -O and higher.
           It is not enabled for -Os, since it usually increases code size.

       -ftree-loop-optimize
           Perform loop optimizations on trees.  This flag is enabled by
           default at -O and higher.

       -ftree-loop-linear
           Perform loop interchange transformations on tree.  Same as
           -floop-interchange.  To use this code transformation, GCC has to be
           configured with --with-ppl and --with-cloog to enable the Graphite
           loop transformation infrastructure.

       -floop-interchange
           Perform loop interchange transformations on loops.  Interchanging
           two nested loops switches the inner and outer loops.  For example,
           given a loop like:

                   DO J = 1, M
                     DO I = 1, N
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           loop interchange will transform the loop as if the user had
           written:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = A(J, I) * C
                     ENDDO
                   ENDDO

           which can be beneficial when "N" is larger than the caches, because
           in Fortran, the elements of an array are stored in memory
           contiguously by column, and the original loop iterates over rows,
           potentially creating at each access a cache miss.  This
           optimization applies to all the languages supported by GCC and is
           not limited to Fortran.  To use this code transformation, GCC has
           to be configured with --with-ppl and --with-cloog to enable the
           Graphite loop transformation infrastructure.

       -floop-strip-mine
           Perform loop strip mining transformations on loops.  Strip mining
           splits a loop into two nested loops.  The outer loop has strides
           equal to the strip size and the inner loop has strides of the
           original loop within a strip.  The strip length can be changed
           using the loop-block-tile-size parameter.  For example, given a
           loop like:

                   DO I = 1, N
                     A(I) = A(I) + C
                   ENDDO

           loop strip mining will transform the loop as if the user had
           written:

                   DO II = 1, N, 51
                     DO I = II, min (II + 50, N)
                       A(I) = A(I) + C
                     ENDDO
                   ENDDO

           This optimization applies to all the languages supported by GCC and
           is not limited to Fortran.  To use this code transformation, GCC
           has to be configured with --with-ppl and --with-cloog to enable the
           Graphite loop transformation infrastructure.

       -floop-block
           Perform loop blocking transformations on loops.  Blocking strip
           mines each loop in the loop nest such that the memory accesses of
           the element loops fit inside caches.  The strip length can be
           changed using the loop-block-tile-size parameter.  For example,
           given a loop like:

                   DO I = 1, N
                     DO J = 1, M
                       A(J, I) = B(I) + C(J)
                     ENDDO
                   ENDDO

           loop blocking will transform the loop as if the user had written:

                   DO II = 1, N, 51
                     DO JJ = 1, M, 51
                       DO I = II, min (II + 50, N)
                         DO J = JJ, min (JJ + 50, M)
                           A(J, I) = B(I) + C(J)
                         ENDDO
                       ENDDO
                     ENDDO
                   ENDDO

           which can be beneficial when "M" is larger than the caches, because
           the innermost loop will iterate over a smaller amount of data that
           can be kept in the caches.  This optimization applies to all the
           languages supported by GCC and is not limited to Fortran.  To use
           this code transformation, GCC has to be configured with --with-ppl
           and --with-cloog to enable the Graphite loop transformation
           infrastructure.

       -fgraphite-identity
           Enable the identity transformation for graphite.  For every SCoP we
           generate the polyhedral representation and transform it back to
           gimple.  Using -fgraphite-identity we can check the costs or
           benefits of the GIMPLE -> GRAPHITE -> GIMPLE transformation.  Some
           minimal optimizations are also performed by the code generator
           CLooG, like index splitting and dead code elimination in loops.

       -floop-flatten
           Removes the loop nesting structure: transforms the loop nest into a
           single loop.  This transformation can be useful to vectorize all
           the levels of the loop nest.

       -floop-parallelize-all
           Use the Graphite data dependence analysis to identify loops that
           can be parallelized.  Parallelize all the loops that can be
           analyzed to not contain loop carried dependences without checking
           that it is profitable to parallelize the loops.

       -fcheck-data-deps
           Compare the results of several data dependence analyzers.  This
           option is used for debugging the data dependence analyzers.

       -ftree-loop-if-convert
           Attempt to transform conditional jumps in the innermost loops to
           branch-less equivalents.  The intent is to remove control-flow from
           the innermost loops in order to improve the ability of the
           vectorization pass to handle these loops.  This is enabled by
           default if vectorization is enabled.

       -ftree-loop-if-convert-stores
           Attempt to also if-convert conditional jumps containing memory
           writes.  This transformation can be unsafe for multi-threaded
           programs as it transforms conditional memory writes into
           unconditional memory writes.  For example,

                   for (i = 0; i < N; i++)
                     if (cond)
                       A[i] = expr;

           would be transformed to

                   for (i = 0; i < N; i++)
                     A[i] = cond ? expr : A[i];

           potentially producing data races.

       -ftree-loop-distribution
           Perform loop distribution.  This flag can improve cache performance
           on big loop bodies and allow further loop optimizations, like
           parallelization or vectorization, to take place.  For example, the
           loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

       -ftree-loop-distribute-patterns
           Perform loop distribution of patterns that can be code generated
           with calls to a library.  This flag is enabled by default at -O3.

           This pass distributes the initialization loops and generates a call
           to memset zero.  For example, the loop

                   DO I = 1, N
                     A(I) = 0
                     B(I) = A(I) + I
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = 0
                   ENDDO
                   DO I = 1, N
                      B(I) = A(I) + I
                   ENDDO

           and the initialization loop is transformed into a call to memset
           zero.

       -ftree-loop-im
           Perform loop invariant motion on trees.  This pass moves only
           invariants that would be hard to handle at RTL level (function
           calls, operations that expand to nontrivial sequences of insns).
           With -funswitch-loops it also moves operands of conditions that are
           invariant out of the loop, so that we can use just trivial
           invariantness analysis in loop unswitching.  The pass also includes
           store motion.

       -ftree-loop-ivcanon
           Create a canonical counter for number of iterations in the loop for
           that determining number of iterations requires complicated
           analysis.  Later optimizations then may determine the number
           easily.  Useful especially in connection with unrolling.

       -fivopts
           Perform induction variable optimizations (strength reduction,
           induction variable merging and induction variable elimination) on
           trees.

       -ftree-parallelize-loops=n
           Parallelize loops, i.e., split their iteration space to run in n
           threads.  This is only possible for loops whose iterations are
           independent and can be arbitrarily reordered.  The optimization is
           only profitable on multiprocessor machines, for loops that are CPU-
           intensive, rather than constrained e.g. by memory bandwidth.  This
           option implies -pthread, and thus is only supported on targets that
           have support for -pthread.

       -ftree-pta
           Perform function-local points-to analysis on trees.  This flag is
           enabled by default at -O and higher.

       -ftree-sra
           Perform scalar replacement of aggregates.  This pass replaces
           structure references with scalars to prevent committing structures
           to memory too early.  This flag is enabled by default at -O and
           higher.

       -ftree-copyrename
           Perform copy renaming on trees.  This pass attempts to rename
           compiler temporaries to other variables at copy locations, usually
           resulting in variable names which more closely resemble the
           original variables.  This flag is enabled by default at -O and
           higher.

       -ftree-ter
           Perform temporary expression replacement during the SSA->normal
           phase.  Single use/single def temporaries are replaced at their use
           location with their defining expression.  This results in non-
           GIMPLE code, but gives the expanders much more complex trees to
           work on resulting in better RTL generation.  This is enabled by
           default at -O and higher.

       -ftree-vectorize
           Perform loop vectorization on trees. This flag is enabled by
           default at -O3.

       -ftree-slp-vectorize
           Perform basic block vectorization on trees. This flag is enabled by
           default at -O3 and when -ftree-vectorize is enabled.

       -ftree-vect-loop-version
           Perform loop versioning when doing loop vectorization on trees.
           When a loop appears to be vectorizable except that data alignment
           or data dependence cannot be determined at compile time then
           vectorized and non-vectorized versions of the loop are generated
           along with runtime checks for alignment or dependence to control
           which version is executed.  This option is enabled by default
           except at level -Os where it is disabled.

       -fvect-cost-model
           Enable cost model for vectorization.

       -ftree-vrp
           Perform Value Range Propagation on trees.  This is similar to the
           constant propagation pass, but instead of values, ranges of values
           are propagated.  This allows the optimizers to remove unnecessary
           range checks like array bound checks and null pointer checks.  This
           is enabled by default at -O2 and higher.  Null pointer check
           elimination is only done if -fdelete-null-pointer-checks is
           enabled.

       -ftracer
           Perform tail duplication to enlarge superblock size.  This
           transformation simplifies the control flow of the function allowing
           other optimizations to do better job.

       -funroll-loops
           Unroll loops whose number of iterations can be determined at
           compile time or upon entry to the loop.  -funroll-loops implies
           -frerun-cse-after-loop.  This option makes code larger, and may or
           may not make it run faster.

       -funroll-all-loops
           Unroll all loops, even if their number of iterations is uncertain
           when the loop is entered.  This usually makes programs run more
           slowly.  -funroll-all-loops implies the same options as
           -funroll-loops,

       -fsplit-ivs-in-unroller
           Enables expressing of values of induction variables in later
           iterations of the unrolled loop using the value in the first
           iteration.  This breaks long dependency chains, thus improving
           efficiency of the scheduling passes.

           Combination of -fweb and CSE is often sufficient to obtain the same
           effect.  However in cases the loop body is more complicated than a
           single basic block, this is not reliable.  It also does not work at
           all on some of the architectures due to restrictions in the CSE
           pass.

           This optimization is enabled by default.

       -fvariable-expansion-in-unroller
           With this option, the compiler will create multiple copies of some
           local variables when unrolling a loop which can result in superior
           code.

       -fpartial-inlining
           Inline parts of functions.  This option has any effect only when
           inlining itself is turned on by the -finline-functions or
           -finline-small-functions options.

           Enabled at level -O2.

       -fpredictive-commoning
           Perform predictive commoning optimization, i.e., reusing
           computations (especially memory loads and stores) performed in
           previous iterations of loops.

           This option is enabled at level -O3.

       -fprefetch-loop-arrays
           If supported by the target machine, generate instructions to
           prefetch memory to improve the performance of loops that access
           large arrays.

           This option may generate better or worse code; results are highly
           dependent on the structure of loops within the source code.

           Disabled at level -Os.

       -fno-peephole
       -fno-peephole2
           Disable any machine-specific peephole optimizations.  The
           difference between -fno-peephole and -fno-peephole2 is in how they
           are implemented in the compiler; some targets use one, some use the
           other, a few use both.

           -fpeephole is enabled by default.  -fpeephole2 enabled at levels
           -O2, -O3, -Os.

       -fno-guess-branch-probability
           Do not guess branch probabilities using heuristics.

           GCC will use heuristics to guess branch probabilities if they are
           not provided by profiling feedback (-fprofile-arcs).  These
           heuristics are based on the control flow graph.  If some branch
           probabilities are specified by __builtin_expect, then the
           heuristics will be used to guess branch probabilities for the rest
           of the control flow graph, taking the __builtin_expect info into
           account.  The interactions between the heuristics and
           __builtin_expect can be complex, and in some cases, it may be
           useful to disable the heuristics so that the effects of
           __builtin_expect are easier to understand.

           The default is -fguess-branch-probability at levels -O, -O2, -O3,
           -Os.

       -freorder-blocks
           Reorder basic blocks in the compiled function in order to reduce
           number of taken branches and improve code locality.

           Enabled at levels -O2, -O3.

       -freorder-blocks-and-partition
           In addition to reordering basic blocks in the compiled function, in
           order to reduce number of taken branches, partitions hot and cold
           basic blocks into separate sections of the assembly and .o files,
           to improve paging and cache locality performance.

           This optimization is automatically turned off in the presence of
           exception handling, for linkonce sections, for functions with a
           user-defined section attribute and on any architecture that does
           not support named sections.

       -freorder-functions
           Reorder functions in the object file in order to improve code
           locality.  This is implemented by using special subsections
           ".text.hot" for most frequently executed functions and
           ".text.unlikely" for unlikely executed functions.  Reordering is
           done by the linker so object file format must support named
           sections and linker must place them in a reasonable way.

           Also profile feedback must be available in to make this option
           effective.  See -fprofile-arcs for details.

           Enabled at levels -O2, -O3, -Os.

       -fstrict-aliasing
           Allow the compiler to assume the strictest aliasing rules
           applicable to the language being compiled.  For C (and C++), this
           activates optimizations based on the type of expressions.  In
           particular, an object of one type is assumed never to reside at the
           same address as an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can alias an
           "int", but not a "void*" or a "double".  A character type may alias
           any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member than the one
           most recently written to (called "type-punning") is common.  Even
           with -fstrict-aliasing, type-punning is allowed, provided the
           memory is accessed through the union type.  So, the code above will
           work as expected.    However, this code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the resulting
           pointer and dereferencing the result has undefined behavior, even
           if the cast uses a union type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The -fstrict-aliasing option is enabled at levels -O2, -O3, -Os.

       -fstrict-overflow
           Allow the compiler to assume strict signed overflow rules,
           depending on the language being compiled.  For C (and C++) this
           means that overflow when doing arithmetic with signed numbers is
           undefined, which means that the compiler may assume that it will
           not happen.  This permits various optimizations.  For example, the
           compiler will assume that an expression like "i + 10 > i" will
           always be true for signed "i".  This assumption is only valid if
           signed overflow is undefined, as the expression is false if "i +
           10" overflows when using twos complement arithmetic.  When this
           option is in effect any attempt to determine whether an operation
           on signed numbers will overflow must be written carefully to not
           actually involve overflow.

           This option also allows the compiler to assume strict pointer
           semantics: given a pointer to an object, if adding an offset to
           that pointer does not produce a pointer to the same object, the
           addition is undefined.  This permits the compiler to conclude that
           "p + u > p" is always true for a pointer "p" and unsigned integer
           "u".  This assumption is only valid because pointer wraparound is
           undefined, as the expression is false if "p + u" overflows using
           twos complement arithmetic.

           See also the -fwrapv option.  Using -fwrapv means that integer
           signed overflow is fully defined: it wraps.  When -fwrapv is used,
           there is no difference between -fstrict-overflow and
           -fno-strict-overflow for integers.  With -fwrapv certain types of
           overflow are permitted.  For example, if the compiler gets an
           overflow when doing arithmetic on constants, the overflowed value
           can still be used with -fwrapv, but not otherwise.

           The -fstrict-overflow option is enabled at levels -O2, -O3, -Os.

       -falign-functions
       -falign-functions=n
           Align the start of functions to the next power-of-two greater than
           n, skipping up to n bytes.  For instance, -falign-functions=32
           aligns functions to the next 32-byte boundary, but
           -falign-functions=24 would align to the next 32-byte boundary only
           if this can be done by skipping 23 bytes or less.

           -fno-align-functions and -falign-functions=1 are equivalent and
           mean that functions will not be aligned.

           Some assemblers only support this flag when n is a power of two; in
           that case, it is rounded up.

           If n is not specified or is zero, use a machine-dependent default.

           Enabled at levels -O2, -O3.

       -falign-labels
       -falign-labels=n
           Align all branch targets to a power-of-two boundary, skipping up to
           n bytes like -falign-functions.  This option can easily make code
           slower, because it must insert dummy operations for when the branch
           target is reached in the usual flow of the code.

           -fno-align-labels and -falign-labels=1 are equivalent and mean that
           labels will not be aligned.

           If -falign-loops or -falign-jumps are applicable and are greater
           than this value, then their values are used instead.

           If n is not specified or is zero, use a machine-dependent default
           which is very likely to be 1, meaning no alignment.

           Enabled at levels -O2, -O3.

       -falign-loops
       -falign-loops=n
           Align loops to a power-of-two boundary, skipping up to n bytes like
           -falign-functions.  The hope is that the loop will be executed many
           times, which will make up for any execution of the dummy
           operations.

           -fno-align-loops and -falign-loops=1 are equivalent and mean that
           loops will not be aligned.

           If n is not specified or is zero, use a machine-dependent default.

           Enabled at levels -O2, -O3.

       -falign-jumps
       -falign-jumps=n
           Align branch targets to a power-of-two boundary, for branch targets
           where the targets can only be reached by jumping, skipping up to n
           bytes like -falign-functions.  In this case, no dummy operations
           need be executed.

           -fno-align-jumps and -falign-jumps=1 are equivalent and mean that
           loops will not be aligned.

           If n is not specified or is zero, use a machine-dependent default.

           Enabled at levels -O2, -O3.

       -funit-at-a-time
           This option is left for compatibility reasons. -funit-at-a-time has
           no effect, while -fno-unit-at-a-time implies -fno-toplevel-reorder
           and -fno-section-anchors.

           Enabled by default.

       -fno-toplevel-reorder
           Do not reorder top-level functions, variables, and "asm"
           statements.  Output them in the same order that they appear in the
           input file.  When this option is used, unreferenced static
           variables will not be removed.  This option is intended to support
           existing code which relies on a particular ordering.  For new code,
           it is better to use attributes.

           Enabled at level -O0.  When disabled explicitly, it also imply
           -fno-section-anchors that is otherwise enabled at -O0 on some
           targets.

       -fweb
           Constructs webs as commonly used for register allocation purposes
           and assign each web individual pseudo register.  This allows the
           register allocation pass to operate on pseudos directly, but also
           strengthens several other optimization passes, such as CSE, loop
           optimizer and trivial dead code remover.  It can, however, make
           debugging impossible, since variables will no longer stay in a
           "home register".

           Enabled by default with -funroll-loops.

       -fwhole-program
           Assume that the current compilation unit represents the whole
           program being compiled.  All public functions and variables with
           the exception of "main" and those merged by attribute
           "externally_visible" become static functions and in effect are
           optimized more aggressively by interprocedural optimizers. If gold
           is used as the linker plugin, "externally_visible" attributes are
           automatically added to functions (not variable yet due to a current
           gold issue) that are accessed outside of LTO objects according to
           resolution file produced by gold.  For other linkers that cannot
           generate resolution file, explicit "externally_visible" attributes
           are still necessary.  While this option is equivalent to proper use
           of the "static" keyword for programs consisting of a single file,
           in combination with option -flto this flag can be used to compile
           many smaller scale programs since the functions and variables
           become local for the whole combined compilation unit, not for the
           single source file itself.

    