#include <type_traits>template<class ...>using void_t = void;template<class, class = void>struct has_iterator : std::false_type {};template<class T>struct has_iterator<T, void_t<typename T::iterator>> : std::true_type {};struct vector_int{    typedef int* iterator;};struct vector_bool{};int main(){    static_assert(has_iterator<vector_int>::value, compiler);    static_assert(!has_iterator<vector_bool>::value, compiler);}