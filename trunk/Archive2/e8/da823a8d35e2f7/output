main.cpp: In instantiation of 'void ActionQueuer::queueAction(callable&&, Instance&&, args&& ...) [with callable = void (TestPrinter::*)(const std::basic_string<char>&, const std::basic_string<char>&); Instance = TestPrinter*; args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]':
main.cpp:54:21:   required from 'void Model::addAction(Action, args&& ...) [with args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]'
main.cpp:76:35:   required from here
main.cpp:18:156: error: conversion from 'std::_Bind_helper<false, void (TestPrinter::*)(const std::basic_string<char>&, const std::basic_string<char>&), TestPrinter*, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type {aka std::_Bind<std::_Mem_fn<void (TestPrinter::*)(const std::basic_string<char>&, const std::basic_string<char>&)>(TestPrinter*, std::basic_string<char>)>}' to non-scalar type 'std::function<void()>' requested
             std::function<void()> newAction = std::bind(std::forward<callable>(action), std::forward<Instance>(instance), std::forward<args>(actionArgs)...);
                                                                                                                                                            ^
main.cpp: In instantiation of 'void ActionQueuer::queueAction(callable&&, Instance&&, args&& ...) [with callable = void (TestPrinter::*)(std::basic_string<char>); Instance = TestPrinter*; args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]':
main.cpp:52:21:   required from 'void Model::addAction(Action, args&& ...) [with args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]'
main.cpp:78:41:   required from here
main.cpp:18:156: error: conversion from 'std::_Bind_helper<false, void (TestPrinter::*)(std::basic_string<char>), TestPrinter*, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type {aka std::_Bind<std::_Mem_fn<void (TestPrinter::*)(std::basic_string<char>)>(TestPrinter*, std::basic_string<char>, std::basic_string<char>)>}' to non-scalar type 'std::function<void()>' requested
