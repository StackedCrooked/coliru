main.cpp:113:15: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:138:15: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:243:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:246:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:249:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:252:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:255:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:258:13: warning: unused parameter 'sig' [-Wunused-parameter]
main.cpp:258:13: warning: unused parameter 'si' [-Wunused-parameter]
main.cpp:258:13: warning: unused parameter 'unused' [-Wunused-parameter]
std::thread::hardware_concurrency() = 1
default value:
    corePoolSize = 1, maximumPoolSize = 1, keepAliveTime = 300000 ms.
new value:
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2000 ms.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
2外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
3外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
5外
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
32内
.    conditionVariable_.wait(lk);→exit.
2内
32内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
6外
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
23.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
notify.
4.    conditionVariable_.wait(lk);→exit.
notify.
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
notify.
3内
3内
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
notify.
2notify.
3.    conditionVariable_.wait(lk);→exit.
2内
内
2内
3内
23内
内
32.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
5.    conditionVariable_.wait(lk);→exit.
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.ok.
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
5.    conditionVariable_.wait(lk);→exit.
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.ok.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
3.    conditionVariable_.wait(lk);→exit.
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.ok.
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8外
7外
notify.
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
3内
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7notify.
4.    conditionVariable_.wait(lk);→exit.
notify.
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
43.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8notify.
内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
48.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
84.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
notify.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
notify.
3内
4notify.
.    conditionVariable_.wait(lk);→exit.
48.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
.    conditionVariable_.wait(lk);→exit.
38内
内
notify.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
48内
.    conditionVariable_.wait(lk);→exit.
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
84.    conditionVariable_.wait(lk);→exit.
3内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
.    conditionVariable_.wait(lk);→exit.
43内
notify.
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
87.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    conditionVariable_.wait(lk);→exit.
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8notify.
notify.
.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
37.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
8notify.
notify.
退出.if (!enabled) {
4notify.
.    conditionVariable_.wait(lk);→exit.
notify.
notify.
4内
4内
4内
4内
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
9外
notify.
notify.
notify.
notify.
notify.
notify.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
10外
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {3
.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
843.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
38内
内
.    conditionVariable_.wait(lk);→exit.
8内
38内
内
483内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
10.    conditionVariable_.wait(lk);→exit.
10.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
10退出.if (!enabled) {
3退出.if (!enabled) {
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.ok.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
10.    conditionVariable_.wait(lk);→exit.
10内
10内
10.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4内
4内
4内
4内
4内
94.    conditionVariable_.wait(lk);→exit.
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
34退出.if (!enabled) {
9.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.ok.
11外
12外
9退出.if (!enabled) {
10退出.if (!enabled) {
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
13notify.
notify.
notify.
外
notify.
8.    conditionVariable_.wait(lk);→exit.
notify.
8内
8内
8内
8内
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
4.    conditionVariable_.wait(lk);→exit.
4内
notify.
4notify.
notify.
notify.
内
notify.
notify.
notify.
notify.
4内
notify.
4内
4内
4内
notify.
4notify.
notify.
内
notify.
104内
notify.
.    conditionVariable_.wait(lk);→exit.
4108内
10内
.    conditionVariable_.wait(lk);→exit.
8内
1110内
.    conditionVariable_.wait(lk);→exit.
内
11内
10内
11810内
内
内
811内
11内
13.    conditionVariable_.wait(lk);→exit.
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
13退出.if (!enabled) {
内
14外
11.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
11退出.if (!enabled) {
10.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
10退出.if (!enabled) {
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.if (!enabled) {
notify.
notify.
9notify.
.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9退出.if (!enabled) {
notify.
notify.
notify.
13.    conditionVariable_.wait(lk);→exit.
13内
13内
13内
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
13退出.if (!enabled) {
124内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
144退出.if (!enabled) {
.    conditionVariable_.wait(lk);→exit.
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14退出.if (!enabled) {
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8退出.ok.
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9退出.ok.
10.    conditionVariable_.wait(lk);→exit.
10.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
10退出.ok.
.    conditionVariable_.wait(lk);→exit.
12.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
12退出.if (!enabled) {
11.    conditionVariable_.wait(lk);→exit.
11.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
11退出.ok.
notify.
notify.
notify.
notify.
notify.
13.    conditionVariable_.wait(lk);→exit.
13内
13内
13内
13内
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
15外
14.    conditionVariable_.wait(lk);→exit.
14内
14内
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14退出.if (!enabled) {
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
13.    conditionVariable_.wait(lk);→exit.
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
13退出.if (!enabled) {
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4notify.
1315.    conditionVariable_.wait(lk);→exit.
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15退出.if (!enabled) {
12.    conditionVariable_.wait(lk);→exit.
12.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
12退出.ok.
.    conditionVariable_.wait(lk);→exit.
13内
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
15.    conditionVariable_.wait(lk);→exit.
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
13.    conditionVariable_.wait(lk);→exit.
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
15.    conditionVariable_.wait(lk);→exit.
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15退出.if (!enabled) {
notify.
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
416内
notify.
413.    conditionVariable_.wait(lk);→exit.
notify.
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
内
notify.
13内
13内
134notify.
notify.
退出.if (!enabled) {
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15.    conditionVariable_.wait(lk);→exit.
13退出.if (!enabled) {
notify.
15内
15内
15内
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15退出.if (!enabled) {
notify.
外
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
notify.
notify.
15notify.
notify.
notify.
notify.
.    conditionVariable_.wait(lk);→exit.
15内
15内
15内
15内
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15退出.if (!enabled) {
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.ok.
13if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
.    conditionVariable_.wait(lk);→exit.
16.    conditionVariable_.wait(lk);→exit.
1613.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
16退出.if (!enabled) {
内
notify.
13notify.
notify.
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
13notify.
notify.
退出.if (!enabled) {
14.    conditionVariable_.wait(lk);→exit.
14内
14内
14内
14内
14内
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14退出.if (!enabled) {
17外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
18外
15.    conditionVariable_.wait(lk);→exit.
15内
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
15退出.if (!enabled) {
notify.
notify.
18.    conditionVariable_.wait(lk);→exit.
18内
18内
18.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
18退出.if (!enabled) {
16.    conditionVariable_.wait(lk);→exit.
16.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
16退出.ok.
notify.
notify.
notify.
14.    conditionVariable_.wait(lk);→exit.
17notify.
.    conditionVariable_.wait(lk);→exit.
17内
17内
17内
17内
17.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
17退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
14内
14内
14内
14内
14内
15.    conditionVariable_.wait(lk);→exit.
15.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {15
13.    conditionVariable_.wait(lk);→exit.
13.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
退出.ok.
18.    conditionVariable_.wait(lk);→exit.
18内
18.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
18退出.if (!enabled) {
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
13退出.ok.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
20外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
19外
21外
17.    conditionVariable_.wait(lk);→exit.
17内
17内
17内
17内
17内
17内
17内
17.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
17退出.if (!enabled) {
notify.
notify.
18.    conditionVariable_.wait(lk);→exit.
18内
18内
18.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
18退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
21.    conditionVariable_.wait(lk);→exit.
21内
21内
21内
21内
21内
21内
21.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
21退出.if (!enabled) {
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
22外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
23外
18.    conditionVariable_.wait(lk);→exit.
18内
18内
18内
18内
18内
18内
18内
18内
18内
18内
18.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
18退出.if (!enabled) {
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
notify.
14.    conditionVariable_.wait(lk);→exit.
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
14内
1714.    conditionVariable_.wait(lk);→exit.
内
17内
1417内
14内
内
1417内
17内
内
17内
14内
17内
14内
1714内
14内
内
14内
17内
14内
17内
14内
17内
1417内
内
1714内
14内
内
1417内
17内
内
17内
14内
17内
1417内
内
17内
17内
1417内
内
17内
17内
1417内
内
17内
17内
17内
14内
17内
14内
1714内
14内
内
14内
1714内
14内
内
14内
1714内
内
1417内
17内
内
17内
14内
1714内
内
1417内
17内
内
17内
1417内
内
14内
14内
14内
1714内
内
14内
14内
1417内
14内
14内
内
1417内
17内
内
17内
14内
1714内
14内
内
14内
14内
14内
1714内
内
14内
14内
14内
17内
1417内
内
1714内
14内
14内
内
17内
17内
1714内
17内
17内
内
17内
1417内
内
17内
17内
17内
1417内
内
14内
14内
14内
17内
1417内
17内
内
17内
1417内
内
17内
17内
1417内
14内
内
1417内
17内
内
1714内
14内
内
14内
17内
1417内
17内
17内
内
14内
14内
14内
1714内
内
17内
17内
17内
14内
17内
1417内
内
14内
14内
1714内
内
17内
17内
17内
1417内
内
1417内
内
14内
14内
14内
1714内
17内
内
17内
1417内
内
1417内
内
17内
17内
1417内
内
14内
14内
1714内
内
17内
17内
17内
1417内
内
17内
17内
1417内
内
17内
17内
1417内
内
17内
17内
1417内
14内
14内
内
14内
17内
1417内
内
14内
14内
14内
1714内
内
17内
17内
17内
1417内
内
14内
14内
14内
1714内
内
17内
1417内
内
14内
14内
1714内
内
14内
14内
14内
17内
1417内
17内
内
1714内
内
1417内
17内
内
17内
14内
1714内
内
17内
17内
17内
1417内
内
17内
17内
1417内
14内
14内
内
1417内
17内
内
1714内
内
17内
17内
17内
1417内
内
14内
14内
14内
1714内
内
17内
14内
17内
1417内
17内
内
17内
14内
17内
1417内
内
17内
17内
1417内
内
17内
17内
17内
14内
17内
14内
1714内
内
1714内
内
1714内
内
14内
14内
1714内
内
17内
17内
17内
14内
17内
14内
1714内
内
1417内
17内
内
1714内
14内
内
14内
1714内
内
14内
17内
1417内
17内
内
17内
14内
1714内
内
14内
1714内
内
17内
1417内
17内
内
17内
14内
1714内
内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
17内
1417内
内
1417内
内
17内
17内
17内
14内
1714内
14内
内
1417内
内
14内
14内
17内
14内
17内
14内
17内
14内
17内
14内
17内
14内
17内
14内
17内
14内
1714内
内
17内
14内
17内
14内
17内
14内
17内
1417内
17内
内
1714内
14内
内
14内
1714内
内
17内
17内
17内
1417内
内
1417内
内
17内
17内
17内
14内
17内
14内
1714内
内
1417内
内
1714内
14内
内
14内
17内
14内
1714内
内
14内
1714内
内
1714内
内
1714内
内
17内
17内
17内
14内
17内
14内
17内
1417内
17内
内
1714内
14内
内
14内
17内
1417内
17内
内
1417内
内
14内
14内
1714内
内
17内
17内
17内
14内
17内
14内
17内
1417内
17内
内
17内
14内
17内
14内
1714内
内
17内
14内
17内
14内
17内
14内
17内
14内
17内
1417内
内
1417内
内
14内
14内
14内
17内
14内
17内
1417内
17内
17内
内
14内
1714内
14内
内
14内
17内
14内
17内
14内
17内
14内
17内
1417内
内
14内
14内
14内
17内
14内
17内
1417内
17内
内
1714内
14内
内
1417内
17内
内
1714内
14内
内
14内
17内
14内
17内
14内
17内
14内
17内
1417内
内
1417内
内
14内
14内
14内
1714内
内
14内
14内
14内
1714内
内
14内
14内
14内
17内
14内
17内
1417内
17内
内
17内
1417内
17内
内
1714内
14内
内
1417内
17内
内
17内
14内
17内
1417内
内
14内
14内
14内
17内
14内
17内
14内
17内
14内
1714内
内
1714内
内
17内
17内
1417内
内
14内
1714内
内
1714内
内
17内
1417内
17内
内
1714内
14内
14内
内
1714内
内
17内
17内
17内
14内
17内
14内
17内
14内
17内
1417内
内
14内
14内
14内
1714内
内
17内
17内
1417内
内
1417内
内
1417内
内
14内
14内
1714内
17内
17内
内
14内
14内
14内
1714内
内
17内
17内
17内
14内
17内
14内
17内
14内
1714内
14内
内
1417内
17内
内
1714内
内
17内
17内
17内
14内
1714内
14内
14内
内
14内
14内
14内
1714内
内
14内
14内
14内
17内
1417内
内
14内
14内
1714内
内
1714内
内
17内
17内
1417内
内
1417内
内
14内
14内
14内
1714内
内
17内
17内
17内
1417内
内
14内
14内
14内
17内
1417内
17内
内
17内
1417内
内
17内
17内
17内
1417内
内
14内
14内
1714内
17内
内
1714内
14内
内
14内
1714内
内
17内
17内
17内
1417内
内
17内
17内
17内
1714.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
17退出.if (!enabled) {
内
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14退出.if (!enabled) {
22.    conditionVariable_.wait(lk);→exit.
22.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
22退出.if (!enabled) {
2119.    conditionVariable_.wait(lk);→exit.
21.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
21退出.ok.
.    conditionVariable_.wait(lk);→exit.
19.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
19退出.if (!enabled) {
17.    conditionVariable_.wait(lk);→exit.
17.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
17退出.ok.
1918.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
1918.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
18退出.ok.
19退出.ok.
22.    conditionVariable_.wait(lk);→exit.
22.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
14.    conditionVariable_.wait(lk);→exit.
14.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
Cleanup().
20.    conditionVariable_.wait(lk);→exit.
14.    conditionVariable_.wait(lk);→exit.
22.    conditionVariable_.wait(lk);→exit.
23.    conditionVariable_.wait(lk);→exit.
cnt = 499500
