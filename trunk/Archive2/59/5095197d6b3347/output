=== BENCHMARK ===
By val: 551 microseconds
By val: 551 microseconds
By ref: 1492 microseconds
By ref: 1280 microseconds
By val: 591 microseconds
By val: 578 microseconds
By ref: 1281 microseconds
By ref: 1304 microseconds


=== SOURCES ===
snapshot.h:
    #ifndef SNAPSHOT_H
    #define SNAPSHOT_H
    
    #include <cstdint>
    
    using Counter = int32_t;
    using Size = int16_t;
    using Time = int64_t;
    
    struct Snapshot
    {
        Snapshot();
    
        #ifdef REF
        void update(const Counter& repeats, const Size&, const Time&);
        #else // by value
        void update(Counter repeats, Size, Time);
        #endif
    
        Counter mPackets;
        Counter mBytes;
        Size mMinSize;
        Size mMaxSize;
        Time mTimeFirst;
        Time mTimeLast;
    };
    
    #endif // SNAPSHOT_H

snapshot.cpp:
    #include "snapshot.h"
    #include <algorithm>
    
    
    Snapshot::Snapshot() :
        mPackets(0),
        mBytes(0),
        mMinSize(0),
        mMaxSize(0),
        mTimeFirst(0),
        mTimeLast(0)
    {
    }
    
    #ifdef REF
    void Snapshot::update(const Counter& repeats, const Size& size, const Time& time)
    #else // by value
    void Snapshot::update(Counter repeats, Size size, Time time)
    #endif
    {
        for (auto i = 0 * repeats; i != repeats; ++i)
        {
            mPackets++;
            mBytes += size;
            mTimeLast = time;
    
            mMinSize = std::min(mMinSize, size);
            mMaxSize = std::max(mMaxSize, size);
        }
    }

main.cpp:
    #include "snapshot.h"
    #include <vector>
    #include <iostream>
    #include <chrono>
    #include <cstdint>
    
    
    struct Packet
    {
        Packet() : size(100), time(100), repeats(1000) {}
        Size size; Time time; Counter repeats;
    };
    
    
    std::vector<Packet> packets(20);
    std::vector<Snapshot> snapshots(20);
    
    
    int main()
    {
    
    using namespace std::chrono;
        auto start_time = steady_clock::now();
    
        for (Packet& packet : packets)
        {
            for (Snapshot& snapshot : snapshots)
            {
                snapshot.update(packet.repeats, packet.size, packet.size);
            }
        }
    
        auto elapsed = duration_cast<microseconds>(steady_clock::now() - start_time);
    
    #ifdef REF
        std::cout << "By ref: " << elapsed.count() << " microseconds" << std::endl;
    #else
        std::cout << "By val: " << elapsed.count() << " microseconds" << std::endl;
    #endif
    }

