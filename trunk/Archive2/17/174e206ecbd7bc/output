In file included from main.cpp:3:0:
/usr/local/include/boost/asio/spawn.hpp:79:11: error: 'caller_type' in 'struct boost::coroutines::coroutine<void()>' does not name a type
   typedef boost::coroutines::coroutine<void()>::caller_type caller_type;
           ^
/usr/local/include/boost/asio/spawn.hpp:90:7: error: 'caller_type' has not been declared
       caller_type& ca, Handler& handler)
       ^
/usr/local/include/boost/asio/spawn.hpp:128:3: error: 'caller_type' does not name a type
   caller_type& ca_;
   ^
/usr/local/include/boost/asio/spawn.hpp: In constructor 'boost::asio::basic_yield_context<Handler>::basic_yield_context(const std::weak_ptr<boost::coroutines::coroutine<void()> >&, int&, Handler&)':
/usr/local/include/boost/asio/spawn.hpp:92:7: error: class 'boost::asio::basic_yield_context<Handler>' does not have any field named 'ca_'
       ca_(ca),
       ^
In file included from /usr/local/include/boost/asio/spawn.hpp:265:0,
                 from main.cpp:3:
/usr/local/include/boost/asio/impl/spawn.hpp: In instantiation of 'class boost::asio::async_result<boost::asio::detail::coro_handler<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, void> >':
/usr/local/include/boost/asio/basic_socket_acceptor.hpp:1009:3:   required by substitution of 'template<class Protocol1, class SocketService, class AcceptHandler> typename boost::asio::async_result<typename boost::asio::handler_type<AcceptHandler, void(boost::system::error_code)>::type>::type boost::asio::basic_socket_acceptor<Protocol, SocketAcceptorService>::async_accept(boost::asio::basic_socket<Protocol1, SocketService1>&, AcceptHandler&&, typename std::enable_if<std::is_convertible<Protocol, Protocol1>::value>::type*) [with Protocol1 = Protocol1; SocketService = SocketService; AcceptHandler = AcceptHandler; Protocol = boost::asio::ip::tcp; SocketAcceptorService = boost::asio::socket_acceptor_service<boost::asio::ip::tcp>] [with Protocol1 = boost::asio::ip::tcp; SocketService = boost::asio::stream_socket_service<boost::asio::ip::tcp>; AcceptHandler = boost::asio::basic_yield_context<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running> >]'
main.cpp:23:45:   required from here
/usr/local/include/boost/asio/impl/spawn.hpp:215:55: error: no type named 'caller_type' in 'class boost::asio::basic_yield_context<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running> >'
   typename basic_yield_context<Handler>::caller_type& ca_;
                                                       ^
/usr/local/include/boost/asio/impl/spawn.hpp: In instantiation of 'class boost::asio::detail::coro_handler<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, void>':
/usr/local/include/boost/asio/detail/handler_type_requirements.hpp:87:11:   required by substitution of 'template<class Handler, class Arg1> decltype (((sizeof ((Handler)(static_cast<const Handler&>(h))), h((* a1))), (char)(0))) boost::asio::detail::one_arg_handler_test(Handler, Arg1*) [with Handler = boost::asio::detail::coro_handler<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, void>; Arg1 = const boost::system::error_code]'
/usr/local/include/boost/asio/basic_socket_acceptor.hpp:1015:5:   required from 'typename boost::asio::async_result<typename boost::asio::handler_type<AcceptHandler, void(boost::system::error_code)>::type>::type boost::asio::basic_socket_acceptor<Protocol, SocketAcceptorService>::async_accept(boost::asio::basic_socket<Protocol1, SocketService1>&, AcceptHandler&&, typename std::enable_if<std::is_convertible<Protocol, Protocol1>::value>::type*) [with Protocol1 = boost::asio::ip::tcp; SocketService = boost::asio::stream_socket_service<boost::asio::ip::tcp>; AcceptHandler = boost::asio::basic_yield_context<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running> >; Protocol = boost::asio::ip::tcp; SocketAcceptorService = boost::asio::socket_acceptor_service<boost::asio::ip::tcp>; typename boost::asio::async_result<typename boost::asio::handler_type<AcceptHandler, void(boost::system::error_code)>::type>::type = void; typename std::enable_if<std::is_convertible<Protocol, Protocol1>::value>::type = void]'
main.cpp:23:45:   required from here
/usr/local/include/boost/asio/impl/spawn.hpp:94:57: error: no type named 'caller_type' in 'class boost::asio::basic_yield_context<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running> >'
     typename basic_yield_context<Handler>::caller_type& ca_;
                                                         ^
/usr/local/include/boost/asio/impl/spawn.hpp: In instantiation of 'struct boost::asio::detail::coro_entry_point<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>':
/usr/local/include/boost/asio/impl/spawn.hpp:262:43:   required from 'void boost::asio::detail::spawn_helper<Handler, Function>::operator()() [with Handler = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>; Function = main(int, char**)::__lambda0]'
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:191:5:   required from 'void boost::asio::detail::rewrapped_handler<Handler, Context>::operator()() [with Handler = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = void (*)()]'
/usr/local/include/boost/asio/handler_invoke_hook.hpp:69:12:   required from 'void boost::asio::asio_handler_invoke(Function&, ...) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   required from 'void boost_asio_handler_invoke_helpers::invoke(Function&, Context&) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>; Context = void (*)()]'
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:276:39:   required from 'void boost::asio::detail::asio_handler_invoke(Function&, boost::asio::detail::rewrapped_handler<Handler, Context>*) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>; Handler = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = void (*)()]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:232:3:   required from 'void boost::asio::detail::asio_handler_invoke(Function&, boost::asio::detail::wrapped_handler<Dispatcher, Handler, IsContinuation>*) [with Function = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Dispatcher = boost::asio::io_service::strand; Handler = void (*)(); IsContinuation = boost::asio::detail::is_continuation_if_running]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   required from 'void boost_asio_handler_invoke_helpers::invoke(Function&, Context&) [with Function = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>]'
/usr/local/include/boost/asio/impl/spawn.hpp:287:75:   required from 'void boost::asio::spawn(Handler&&, Function&&, const boost::coroutines::attributes&) [with Handler = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>; Function = main(int, char**)::__lambda0]'
/usr/local/include/boost/asio/impl/spawn.hpp:311:59:   required from 'void boost::asio::spawn(boost::asio::io_service::strand, Function&&, const boost::coroutines::attributes&) [with Function = main(int, char**)::__lambda0]'
/usr/local/include/boost/asio/impl/spawn.hpp:320:59:   required from 'void boost::asio::spawn(boost::asio::io_service&, Function&&, const boost::coroutines::attributes&) [with Function = main(int, char**)::__lambda0]'
main.cpp:32:2:   required from here
/usr/local/include/boost/asio/impl/spawn.hpp:242:10: error: no type named 'caller_type' in 'class boost::asio::basic_yield_context<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running> >'
     void operator()(typename basic_yield_context<Handler>::caller_type& ca)
          ^
/usr/local/include/boost/asio/impl/spawn.hpp: In instantiation of 'void boost::asio::detail::spawn_helper<Handler, Function>::operator()() [with Handler = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>; Function = main(int, char**)::__lambda0]':
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:191:5:   required from 'void boost::asio::detail::rewrapped_handler<Handler, Context>::operator()() [with Handler = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = void (*)()]'
/usr/local/include/boost/asio/handler_invoke_hook.hpp:69:12:   required from 'void boost::asio::asio_handler_invoke(Function&, ...) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   required from 'void boost_asio_handler_invoke_helpers::invoke(Function&, Context&) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>; Context = void (*)()]'
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:276:39:   required from 'void boost::asio::detail::asio_handler_invoke(Function&, boost::asio::detail::rewrapped_handler<Handler, Context>*) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>; Handler = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = void (*)()]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   required from 'void boost_asio_handler_invoke_helpers::invoke(Function&, Context&) [with Function = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>; Context = boost::asio::detail::rewrapped_handler<boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>, void (*)()>]'
/usr/local/include/boost/asio/detail/impl/strand_service.hpp:62:63:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/asio/detail/wrapped_handler.hpp:232:3:   required from 'void boost::asio::detail::asio_handler_invoke(Function&, boost::asio::detail::wrapped_handler<Dispatcher, Handler, IsContinuation>*) [with Function = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Dispatcher = boost::asio::io_service::strand; Handler = void (*)(); IsContinuation = boost::asio::detail::is_continuation_if_running]'
/usr/local/include/boost/asio/detail/handler_invoke_helpers.hpp:37:72:   required from 'void boost_asio_handler_invoke_helpers::invoke(Function&, Context&) [with Function = boost::asio::detail::spawn_helper<boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>, main(int, char**)::__lambda0>; Context = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>]'
/usr/local/include/boost/asio/impl/spawn.hpp:287:75:   required from 'void boost::asio::spawn(Handler&&, Function&&, const boost::coroutines::attributes&) [with Handler = boost::asio::detail::wrapped_handler<boost::asio::io_service::strand, void (*)(), boost::asio::detail::is_continuation_if_running>; Function = main(int, char**)::__lambda0]'
/usr/local/include/boost/asio/impl/spawn.hpp:311:59:   required from 'void boost::asio::spawn(boost::asio::io_service::strand, Function&&, const boost::coroutines::attributes&) [with Function = main(int, char**)::__lambda0]'
/usr/local/include/boost/asio/impl/spawn.hpp:320:59:   required from 'void boost::asio::spawn(boost::asio::io_service&, Function&&, const boost::coroutines::attributes&) [with Function = main(int, char**)::__lambda0]'
main.cpp:32:2:   required from here
/usr/local/include/boost/asio/impl/spawn.hpp:263:77: error: new initializer expression list treated as compound expression [-fpermissive]
       shared_ptr<callee_type> coro(new callee_type(entry_point, attributes_));
                                                                             ^
/usr/local/include/boost/asio/impl/spawn.hpp:263:77: error: no matching function for call to 'boost::coroutines::coroutine<void()>::coroutine(boost::coroutines::attributes&)'
/usr/local/include/boost/asio/impl/spawn.hpp:263:77: note: candidates are:
In file included from /usr/local/include/boost/coroutine/coroutine.hpp:11:0,
                 from /usr/local/include/boost/coroutine/all.hpp:11,
                 from main.cpp:1:
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note: constexpr boost::coroutines::coroutine<void()>::coroutine()
 struct coroutine
        ^
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note:   candidate expects 0 arguments, 1 provided
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note: constexpr boost::coroutines::coroutine<void()>::coroutine(const boost::coroutines::coroutine<void()>&)
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note:   no known conversion for argument 1 from 'boost::coroutines::attributes' to 'const boost::coroutines::coroutine<void()>&'
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note: constexpr boost::coroutines::coroutine<void()>::coroutine(boost::coroutines::coroutine<void()>&&)
/usr/local/include/boost/coroutine/v2/coroutine.hpp:2919:8: note:   no known conversion for argument 1 from 'boost::coroutines::attributes' to 'boost::coroutines::coroutine<void()>&&'
In file included from /usr/local/include/boost/asio/spawn.hpp:265:0,
                 from main.cpp:3:
/usr/local/include/boost/asio/impl/spawn.hpp:265:8: error: no match for call to '(boost::coroutines::coroutine<void()>) ()'
       (*coro)();
        ^
