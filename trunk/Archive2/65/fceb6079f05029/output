Parsing: pp3.cpp as language CPP
Compilation of preprocessed file succeeded:
#include <boost/operators.hpp>
#include <boost/preprocessor.hpp>
#include <cstdint>
struct Stats2;
struct ByteCount : boost::operators<ByteCount>
{
    ByteCount() : t()
    {
    }

    explicit ByteCount(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    ByteCount& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    ByteCount& operator=(const ByteCount& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const ByteCount& lhs, const ByteCount& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const ByteCount& lhs, const ByteCount& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct FrameCount : boost::operators<FrameCount>
{
    FrameCount() : t()
    {
    }

    explicit FrameCount(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    FrameCount& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    FrameCount& operator=(const FrameCount& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const FrameCount& lhs, const FrameCount& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const FrameCount& lhs, const FrameCount& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct TimeFirstFrame : boost::operators<TimeFirstFrame>
{
    TimeFirstFrame() : t()
    {
    }

    explicit TimeFirstFrame(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    TimeFirstFrame& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    TimeFirstFrame& operator=(const TimeFirstFrame& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const TimeFirstFrame& lhs, const TimeFirstFrame& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const TimeFirstFrame& lhs, const TimeFirstFrame& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct TimeLastFrame : boost::operators<TimeLastFrame>
{
    TimeLastFrame() : t()
    {
    }

    explicit TimeLastFrame(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    TimeLastFrame& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    TimeLastFrame& operator=(const TimeLastFrame& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const TimeLastFrame& lhs, const TimeLastFrame& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const TimeLastFrame& lhs, const TimeLastFrame& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct TimeSnapshot : boost::operators<TimeSnapshot>
{
    TimeSnapshot() : t()
    {
    }

    explicit TimeSnapshot(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    TimeSnapshot& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    TimeSnapshot& operator=(const TimeSnapshot& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const TimeSnapshot& lhs, const TimeSnapshot& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const TimeSnapshot& lhs, const TimeSnapshot& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct SnapshotType : boost::operators<SnapshotType>
{
    SnapshotType() : t()
    {
    }

    explicit SnapshotType(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    SnapshotType& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    SnapshotType& operator=(const SnapshotType& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const SnapshotType& lhs, const SnapshotType& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const SnapshotType& lhs, const SnapshotType& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
struct ExtraStuff : boost::operators<ExtraStuff>
{
    ExtraStuff() : t()
    {
    }

    explicit ExtraStuff(const int64_t & t_) : t(t_)
    {
    }

    operator const int64_t&() const
    {
        return t;
    }

    operator int64_t&()
    {
        return t;
    }

    const int64_t& get() const
    {
        return t;
    }

    int64_t& get()
    {
        return t;
    }

    ExtraStuff& operator=(const int64_t& rhs_t)
    {
        t = rhs_t;
        return *this;
    }

    ExtraStuff& operator=(const ExtraStuff& rhs)
    {
        t = rhs.t;
        return *this;
    }

    friend bool operator<(const ExtraStuff& lhs, const ExtraStuff& rhs)
    {
        return lhs.t < rhs.t;
    }

    friend bool operator==(const ExtraStuff& lhs, const ExtraStuff& rhs)
    {
        return lhs.t == rhs.t;
    }

    int64_t t;
};
int main()
{
    FrameCount frameCount {1};
    return frameCount.get();
}


