In file included from main.cpp:4:0:
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> > >':
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<parts::NotEqualTo<example, example>, void>'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:282:5: error: static assertion failed: 

		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		::                                                     ::
		::  ^ Expression is not a model of expected concept ^  ::
		::                                                     ::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

     static_assert( check_requirements<Expected<Expr>>()
     ^
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<> >':
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:282:5: error: static assertion failed: 

		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		::                                                     ::
		::  ^ Expression is not a model of expected concept ^  ::
		::                                                     ::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example> > >':
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:282:5: error: static assertion failed: 

		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		::                                                     ::
		::  ^ Expression is not a model of expected concept ^  ::
		::                                                     ::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >':
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::EqualityComparable<example, example>, void>'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:301:8: warning: direct base 'Concepts::diagnose_requirements<parts::NotEqualTo<example, example>, void>' inaccessible in 'Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >' due to ambiguity
 struct diagnose_all_requirements<nested<Nested, Nesteds...>, Rest...>
        ^
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >':
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::EqualityComparable<example, example>, void>'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:301:8: warning: direct base 'Concepts::diagnose_requirements<parts::EqualTo<example, example>, void>' inaccessible in 'Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> > >' due to ambiguity
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<>, Concepts::nested<parts::LessThan<example, example> > >':
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
concepts.hpp:301:8:   recursively required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:282:5: error: static assertion failed: 

		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		::                                                     ::
		::  ^ Expression is not a model of expected concept ^  ::
		::                                                     ::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

     static_assert( check_requirements<Expected<Expr>>()
     ^
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::expr<inttable, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >':
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   recursively required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:282:5: error: static assertion failed: 

		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		::                                                     ::
		::  ^ Expression is not a model of expected concept ^  ::
		::                                                     ::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
		:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >':
concepts.hpp:280:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::expr<bool, Concepts::models<concepts::ContextualBool> >, Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   recursively required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >'
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:301:8: warning: direct base 'Concepts::diagnose_requirements<parts::NotEqualTo<example, example>, void>' inaccessible in 'Concepts::diagnose_all_requirements<Concepts::nested<parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >' due to ambiguity
 struct diagnose_all_requirements<nested<Nested, Nesteds...>, Rest...>
        ^
concepts.hpp: In instantiation of 'struct Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >':
concepts.hpp:301:8:   required from 'struct Concepts::diagnose_all_requirements<Concepts::nested<concepts::EqualityComparable<example, example>, parts::LessThan<example, example> > >'
concepts.hpp:325:8:   required from 'struct Concepts::diagnose_requirements<concepts::Comparable<example, example>, void>'
concepts.hpp:337:8:   required from 'struct Concepts::concept_check<concepts::Comparable<Concepts::diagnostic_type<example>, example>, std::integral_constant<bool, true> >'
concepts.hpp:352:8:   required from 'struct Concepts::constraints<concepts::Comparable<Concepts::diagnostic_type<example>, example> >'
main.cpp:121:6:   required by substitution of 'template<class X, class Y, typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> > auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]'
main.cpp:139:68:   required from here
concepts.hpp:301:8: warning: direct base 'Concepts::diagnose_requirements<parts::EqualTo<example, example>, void>' inaccessible in 'Concepts::diagnose_all_requirements<Concepts::nested<parts::EqualTo<example, example>, parts::EqualTo<example, example>, parts::NotEqualTo<example, example>, parts::NotEqualTo<example, example> >, Concepts::nested<parts::LessThan<example, example> > >' due to ambiguity
main.cpp: In instantiation of 'auto constrained_function(X&&, Y&&) [with X = Concepts::diagnostic_type<example>; Y = example; typename Concepts::constraints<concepts::Comparable<X, Y> >::type ...<anonymous> = {}]':
main.cpp:139:68:   required from here
main.cpp:122:12: error: no match for 'operator<' (operand types are 'Concepts::diagnostic_type<example>' and 'example')
 { return x < y; }
            ^
main.cpp:122:12: note: candidate is:
main.cpp:131:13: note: int operator<(const example&, const example&)
 int         operator<(example const&, example const&) { return 0; }
             ^
main.cpp:131:13: note:   no known conversion for argument 1 from 'Concepts::diagnostic_type<example>' to 'const example&'
In file included from main.cpp:4:0:
concepts.hpp:48:33: warning: inline function 'constexpr Concepts::diagnostic_type<Type> Concepts::diagnose(Type&&) [with Type = example]' used but never defined
 constexpr diagnostic_type<Type> diagnose(Type&& type) noexcept;
                                 ^
