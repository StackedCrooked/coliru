main.cpp:204:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:207:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:210:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:213:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:216:6: warning: unused parameter 'arg' [-Wunused-parameter]
main.cpp:219:13: warning: unused parameter 'sig' [-Wunused-parameter]
main.cpp:219:13: warning: unused parameter 'si' [-Wunused-parameter]
main.cpp:219:13: warning: unused parameter 'unused' [-Wunused-parameter]
std::thread::hardware_concurrency() = 1
default value:
    corePoolSize = 1, maximumPoolSize = 1, keepAliveTime = 300000 ms.
new value:
    corePoolSize = 4, maximumPoolSize = 8, keepAliveTime = 2000 ms.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
2外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
2内
2内
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
6notify.
notify.
2notify.
notify.
notify.
3.    conditionVariable_.wait(lk);→exit.
3内
3内
3内
3内
3内
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
.    conditionVariable_.wait(lk);→exit.
32.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
退出.if (!enabled) {
2退出.if (!enabled) {
外
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
4.    conditionVariable_.wait(lk);→exit.
4内
4内
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.if (!enabled) {
7外
notify.
notify.
notify.
notify.
notify.
notify.
notify.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
5.    conditionVariable_.wait(lk);→exit.
5内
5内
5内
5内
5内
5内
5内
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.if (!enabled) {
4.    conditionVariable_.wait(lk);→exit.
4.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
4退出.ok.
3.    conditionVariable_.wait(lk);→exit.
3.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
3退出.ok.
if (currentThreads_ < maximumPoolSize_ && taskQueueSize_ + 1 > currentThreads_) {
notify.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
2内
92内
2内
外
2内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2退出.if (!enabled) {
6.    conditionVariable_.wait(lk);→exit.
6.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
6退出.ok.
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7退出.if (!enabled) {
5.    conditionVariable_.wait(lk);→exit.
5.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
5退出.ok.
notify.
notify.
2.    conditionVariable_.wait(lk);→exit.
29内
.    conditionVariable_.wait(lk);→exit.
2内
8外
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
28.    conditionVariable_.wait(lk);→exit.
7.    conditionVariable_.wait(lk);→exit.
27内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
内
内
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
82.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
92.    conditionVariable_.wait(lk);→exit.
.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7内
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
8.    conditionVariable_.wait(lk);→exit.
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
9.    conditionVariable_.wait(lk);→exit.
9内
9内
9内
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
7.    conditionVariable_.wait(lk);→exit.
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
notify.
8.    conditionVariable_.wait(lk);→exit.
8内
8内
8内
8.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
2.    conditionVariable_.wait(lk);→exit.
2.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
9.    conditionVariable_.wait(lk);→exit.
9.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
notify.
notify.
7.    conditionVariable_.wait(lk);→exit.
7内
7.    std::lock_guard<std::mutex> lock(terminateTheThreadMutex_);
Cleanup().
2.    conditionVariable_.wait(lk);→exit.
8.    conditionVariable_.wait(lk);→exit.
cnt = 4950
9.    conditionVariable_.wait(lk);→exit.
7.    conditionVariable_.wait(lk);→exit.
