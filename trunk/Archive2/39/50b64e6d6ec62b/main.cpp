#define PASTE_I(A,B) A##B
#define PP_PASTE(A,B) PASTE_I(A,B)
#define EVAL(...) __VA_ARGS__
#ifdef _MSC_VER
#define VA_WRAP(X) X
#else
#define VA_WRAP(...) __VA_ARGS__
#endif

#define APPLY_E(...) __VA_ARGS__
#define PP_APPLY(MACRO_,PAR_,ARG_) APPLY_E(MACRO_ ( PAR_ , APPLY_E(APPLY_E ARG_)))

#define COUNT_I(_,_9,_8,_7,_6,_5,_4,_3,_2,X,...) X
#define PP_COUNT(...) COUNT_I(__VA_ARGS__,9,8,7,6,5,4,3,2,1,~)

#define EXTRACT1(A,...) A
#define EXTRACT2(A,...) EXTRACT1(__VA_ARGS__)
#define EXTRACT3(A,...) EXTRACT2(__VA_ARGS__)
#define EXTRACT4(A,...) EXTRACT3(__VA_ARGS__)
#define EXTRACT5(A,...) EXTRACT4(__VA_ARGS__)
#define EXTRACT6(A,...) EXTRACT5(__VA_ARGS__)
#define EXTRACT7(A,...) EXTRACT6(__VA_ARGS__)
#define EXTRACT8(A,...) EXTRACT7(__VA_ARGS__)
#define EXTRACT9(A,...) EXTRACT8(__VA_ARGS__)
#define EXTRACT_I(...) (__VA_ARGS__,,,,,,,,,)
#define EXTRACT_E(...) __VA_ARGS__
#define PP_EXTRACT(N,L) EXTRACT_E(PP_PASTE(EXTRACT,N) EXTRACT_I(EXTRACT_E L))

#define MAPPLY_M(X,ACTIONS_) PP_PASTE(CMD_MACRO_,PP_EXTRACT(1,PP_EXTRACT(X,ACTIONS_)))
#define MAPPLY_P(X,ACTIONS_) PP_EXTRACT(2,PP_EXTRACT(X,ACTIONS_))
#define MAPPLY_X(X,ACTIONS_,ARGS_) MAPPLY_M(X,ACTIONS_) (MAPPLY_P(X,ACTIONS_),ARGS_)
#define MAPPLY_1(ACTIONS_,ARGS_) MAPPLY_X(1,ACTIONS_,ARGS_)
#define MAPPLY_2(ACTIONS_,ARGS_) MAPPLY_1(ACTIONS_,ARGS_) MAPPLY_X(2,ACTIONS_,ARGS_)
#define MAPPLY_3(ACTIONS_,ARGS_) MAPPLY_2(ACTIONS_,ARGS_) MAPPLY_X(3,ACTIONS_,ARGS_)
#define MAPPLY_4(ACTIONS_,ARGS_) MAPPLY_3(ACTIONS_,ARGS_) MAPPLY_X(4,ACTIONS_,ARGS_)
#define MAPPLY_5(ACTIONS_,ARGS_) MAPPLY_4(ACTIONS_,ARGS_) MAPPLY_X(5,ACTIONS_,ARGS_)
#define MAPPLY_6(ACTIONS_,ARGS_) MAPPLY_5(ACTIONS_,ARGS_) MAPPLY_X(6,ACTIONS_,ARGS_)
#define MAPPLY_7(ACTIONS_,ARGS_) MAPPLY_6(ACTIONS_,ARGS_) MAPPLY_X(7,ACTIONS_,ARGS_)
#define MAPPLY_8(ACTIONS_,ARGS_) MAPPLY_7(ACTIONS_,ARGS_) MAPPLY_X(8,ACTIONS_,ARGS_)
#define MAPPLY_9(ACTIONS_,ARGS_) MAPPLY_8(ACTIONS_,ARGS_) MAPPLY_X(9,ACTIONS_,ARGS_)
#define MAPPLY_E(...) __VA_ARGS__
#define PP_MAPPLY(ACTIONS_,ARGS_) PP_PASTE(MAPPLY_,PP_COUNT ACTIONS_) (ACTIONS_,ARGS_)

#define EAPPLY_X(X,ACTIONS_,ARGS_) PP_MAPPLY(ACTIONS_,PP_EXTRACT(X,ARGS_))
#define EAPPLY_1(ACTIONS_,ARGS_,DELIMS_) EAPPLY_X(1,ACTIONS_,ARGS_)
#define EAPPLY_2(ACTIONS_,ARGS_,DELIMS_) EAPPLY_1(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(2,ACTIONS_,ARGS_)
#define EAPPLY_3(ACTIONS_,ARGS_,DELIMS_) EAPPLY_2(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(3,ACTIONS_,ARGS_)
#define EAPPLY_4(ACTIONS_,ARGS_,DELIMS_) EAPPLY_3(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(4,ACTIONS_,ARGS_)
#define EAPPLY_5(ACTIONS_,ARGS_,DELIMS_) EAPPLY_4(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(5,ACTIONS_,ARGS_)
#define EAPPLY_6(ACTIONS_,ARGS_,DELIMS_) EAPPLY_5(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(6,ACTIONS_,ARGS_)
#define EAPPLY_7(ACTIONS_,ARGS_,DELIMS_) EAPPLY_6(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(7,ACTIONS_,ARGS_)
#define EAPPLY_8(ACTIONS_,ARGS_,DELIMS_) EAPPLY_7(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(8,ACTIONS_,ARGS_)
#define EAPPLY_9(ACTIONS_,ARGS_,DELIMS_) EAPPLY_8(ACTIONS_,ARGS_,DELIMS_) DELIMS_ EAPPLY_X(9,ACTIONS_,ARGS_)
#define EAPPLY_E(...) __VA_ARGS__
#define PP_EAPPLY(ACTIONS_,ARGS_,DELIMS_) PP_PASTE(EAPPLY_,PP_COUNT ARGS_) (ACTIONS_,ARGS_,DELIMS_)

#define CMD_MACRO_0PRINT(A,B) A
#define CMD_MACRO_0PREPEND(A,B) PP_PASTE(A,B)
#define CMD_MACRO_0ARG(A,B) B
#define CMD_MACRO_0COMMA(A,B) B
#define CMD_MACRO_0OPENPAR(A,B) (
#define CMD_MACRO_0CLOSEPAR(A,B) )

Bar operator() (
PP_EAPPLY((
      (0PRINT,typename), (0PREPEND,Arg), (0PREPEND,arg) ), (1, 2, 3, 4, 5), | )
) {
   Variables v;
PP_EAPPLY((
      (0PRINT,assert), (0OPENPAR,) ,(0PRINT,arg[), (0PREPEND,a), (0PRINT,]), (0CLOSEPAR,) ,(0PRINT,;) )
   , (1, 2, 3, 4, 5), | )
   return foo;
}

#define MAKE_BAR_OP(X) \
   Bar operator() ( \
   PP_EAPPLY(( \
         (0PRINT,typename), (0PREPEND,Arg), (0PREPEND,arg) ), X, | ) \
            ) { \
         Variables v; \
   PP_EAPPLY(( \
            (0PRINT,assert), (0OPENPAR,) ,(0PRINT,arg[), (0PREPEND,a), (0PRINT,]), (0CLOSEPAR,) ,(0PRINT,;) ) \
         , X, | ) \
      return foo; \
   }


MAKE_BAR_OP((1))
MAKE_BAR_OP((1,2))
MAKE_BAR_OP((1,2,3))
