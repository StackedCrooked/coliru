	.file	"main.cpp"
# GNU C++ (Ubuntu 4.8.1-2ubuntu1~12.04) version 4.8.1 (x86_64-linux-gnu)
#	compiled by GNU C version 4.8.1, GMP version 5.0.2, MPFR version 3.1.0-p3, MPC version 0.9
# GGC heuristics: --param ggc-min-expand=30 --param ggc-min-heapsize=4096
# options passed:  -imultilib . -imultiarch x86_64-linux-gnu -D_GNU_SOURCE
# main.cpp -march=amdfam10 -mcx16 -msahf -mno-movbe -mno-aes -mno-pclmul
# -mpopcnt -mabm -mno-lwp -mno-fma -mno-fma4 -mno-xop -mno-bmi -mno-bmi2
# -mno-tbm -mno-avx -mno-avx2 -mno-sse4.2 -mno-sse4.1 -mlzcnt -mno-rtm
# -mno-hle -mno-rdrnd -mno-f16c -mno-fsgsbase -mno-rdseed -mprfchw -mno-adx
# -mfxsr -mno-xsave -mno-xsaveopt --param l1-cache-size=64
# --param l1-cache-line-size=64 --param l2-cache-size=512 -mtune=amdfam10
# -auxbase-strip foo.s -O3 -Wall -Wextra -Wpedantic -std=c++11
# -fverbose-asm -fstack-protector
# options enabled:  -faggressive-loop-optimizations
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
# -fcaller-saves -fcombine-stack-adjustments -fcommon -fcompare-elim
# -fcprop-registers -fcrossjumping -fcse-follow-jumps -fdefer-pop
# -fdelete-null-pointer-checks -fdevirtualize -fdwarf2-cfi-asm
# -fearly-inlining -feliminate-unused-debug-types -fexceptions
# -fexpensive-optimizations -fforward-propagate -ffunction-cse -fgcse
# -fgcse-after-reload -fgcse-lm -fgnu-runtime -fguess-branch-probability
# -fhoist-adjacent-loads -fident -fif-conversion -fif-conversion2
# -findirect-inlining -finline -finline-atomics -finline-functions
# -finline-functions-called-once -finline-small-functions -fipa-cp
# -fipa-cp-clone -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
# -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
# -fivopts -fkeep-static-consts -fleading-underscore -fmath-errno
# -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
# -fomit-frame-pointer -foptimize-register-move -foptimize-sibling-calls
# -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2
# -fpredictive-commoning -fprefetch-loop-arrays -free -freg-struct-return
# -fregmove -freorder-blocks -freorder-functions -frerun-cse-after-loop
# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
# -fsched-stalled-insns-dep -fschedule-insns2 -fshow-column -fshrink-wrap
# -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
# -fstack-protector -fstrict-aliasing -fstrict-overflow
# -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
# -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
# -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
# -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-partial-pre
# -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc -ftree-scev-cprop
# -ftree-sink -ftree-slp-vectorize -ftree-slsr -ftree-sra
# -ftree-switch-conversion -ftree-tail-merge -ftree-ter
# -ftree-vect-loop-version -ftree-vectorize -ftree-vrp -funit-at-a-time
# -funswitch-loops -funwind-tables -fvect-cost-model -fverbose-asm
# -fzero-initialized-in-bss -m128bit-long-double -m3dnow -m64 -m80387 -mabm
# -maccumulate-outgoing-args -malign-stringops -mcx16 -mfancy-math-387
# -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp -mlong-double-80 -mlzcnt -mmmx
# -mno-sse4 -mpopcnt -mprfchw -mpush-args -mred-zone -msahf -msse -msse2
# -msse3 -msse4a -mtls-direct-seg-refs

	.section	.text.startup,"ax",@progbits
	.p2align 5,,31
	.globl	main
	.type	main, @function
main:
.LFB3364:
	.cfi_startproc
	movq	(%rsi), %rax	# *argv_2(D), D.54954
	movsbl	(%rax), %edx	# *_3, *_3
	movl	%edx, -44(%rsp)	# *_3,
	movsbl	1(%rax), %edx	# MEM[(char *)_3 + 1B], MEM[(char *)_3 + 1B]
	movd	-44(%rsp), %xmm0	#, tmp174
	cvtdq2ps	%xmm0, %xmm0	# tmp174, tmp174
	movss	%xmm0, -40(%rsp)	# tmp174, a
	movl	%edx, -44(%rsp)	# MEM[(char *)_3 + 1B],
	movsbl	2(%rax), %eax	# MEM[(char *)_3 + 2B], MEM[(char *)_3 + 2B]
	movd	-44(%rsp), %xmm0	#, tmp176
	cvtdq2ps	%xmm0, %xmm0	# tmp176, tmp176
	movss	%xmm0, -36(%rsp)	# tmp176, a
	movl	%eax, -44(%rsp)	# MEM[(char *)_3 + 2B],
	leaq	-40(%rsp), %rax	#, tmp260
	movd	-44(%rsp), %xmm0	#, D.54956
	cvtdq2ps	%xmm0, %xmm0	# D.54956, D.54956
	leaq	16(%rax), %rdx	#, tmp206
	leaq	4(%rax), %rcx	#, __first
	movss	%xmm0, -32(%rsp)	# D.54956, a
	cmpq	%rcx, %rdx	# __first, tmp206
	movss	%xmm0, -28(%rsp)	# D.54956, a
	movss	(%rax), %xmm0	# *__first_59, D.54956
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -24(%rsp)	# D.54956, *__result_61
	je	.L5	#,
	movss	4(%rax), %xmm0	# MEM[(float *)__first_59 + 4B], D.54956
	leaq	8(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -20(%rsp)	# D.54956, MEM[(float *)__result_61 + 4B]
	je	.L5	#,
	movss	8(%rax), %xmm0	# MEM[(float *)__first_59 + 8B], D.54956
	leaq	12(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -16(%rsp)	# D.54956, MEM[(float *)__result_61 + 8B]
	je	.L5	#,
	movss	12(%rax), %xmm0	# MEM[(float *)__first_59 + 12B], D.54956
	leaq	16(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -12(%rsp)	# D.54956, MEM[(float *)__result_61 + 12B]
	je	.L5	#,
	movss	16(%rax), %xmm0	# MEM[(float *)__first_59 + 16B], D.54956
	leaq	20(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -8(%rsp)	# D.54956, MEM[(float *)__result_61 + 16B]
	je	.L5	#,
	movss	20(%rax), %xmm0	# MEM[(float *)__first_59 + 20B], D.54956
	leaq	24(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, -4(%rsp)	# D.54956, MEM[(float *)__result_61 + 20B]
	je	.L5	#,
	movss	24(%rax), %xmm0	# MEM[(float *)__first_59 + 24B], D.54956
	leaq	28(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, (%rsp)	# D.54956, MEM[(float *)__result_61 + 24B]
	je	.L5	#,
	movss	28(%rax), %xmm0	# MEM[(float *)__first_59 + 28B], D.54956
	leaq	32(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, 4(%rsp)	# D.54956, MEM[(float *)__result_61 + 28B]
	je	.L5	#,
	movss	32(%rax), %xmm0	# MEM[(float *)__first_59 + 32B], D.54956
	leaq	36(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, 8(%rsp)	# D.54956, MEM[(float *)__result_61 + 32B]
	je	.L5	#,
	movss	36(%rax), %xmm0	# MEM[(float *)__first_59 + 36B], D.54956
	leaq	40(%rax), %rcx	#, __first
	cmpq	%rcx, %rdx	# __first, tmp206
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, 12(%rsp)	# D.54956, MEM[(float *)__result_61 + 36B]
	je	.L5	#,
	movss	40(%rax), %xmm0	# MEM[(float *)__first_59 + 40B], D.54956
	addss	%xmm0, %xmm0	# D.54956, D.54956
	movss	%xmm0, 16(%rsp)	# D.54956, MEM[(float *)__result_61 + 40B]
.L5:
	movss	-24(%rsp), %xmm0	# b, D.54956
	addss	-20(%rsp), %xmm0	# b, D.54956
	addss	-16(%rsp), %xmm0	# b, D.54956
	addss	-12(%rsp), %xmm0	# b, D.54956
	cvttss2si	%xmm0, %eax	# D.54956, D.54958
	ret
	.cfi_endproc
.LFE3364:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
