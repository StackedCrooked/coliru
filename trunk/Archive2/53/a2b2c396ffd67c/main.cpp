#include <iostream>#include <string>#include <memory>using namespace std;class MyClass{    public:    MyClass(int p) : val(p){        cout << "MyClass() c-tor..." << endl;    }    virtual ~MyClass(){        cout << "~MyClass() d-tor..." << endl;    }    int val;};class Sub : public MyClass{    public:    Sub(int p) : MyClass(p){        cout << "Sub() c-tor..." << endl;    }    ~Sub(){        cout << "~Sub() d-tor..." << endl;    }};class SubSub : public Sub{    public:    SubSub(int p) : Sub(p){        cout << "SubSub() c-tor..." << endl;    }    ~SubSub(){        cout << "~SubSub() d-tor..." << endl;    }};/*void oneMore(std::auto_ptr<MyClass> ap){    cout << "oneMore::ap->val::" << ap->val << endl;}void someFunc(std::auto_ptr<MyClass> ap){    cout << "ap->val::" << ap->val << endl;    oneMore(ap);}*/int main(){    //std::auto_ptr<MyClass> ap(new MyClass())    //MyClass* local = new MyClass(100);    /*SubSub* local = new SubSub(100);    someFunc(std::auto_ptr<MyClass>(local));    cout << "End of auto_ptr" << endl;        const int guard = 100;    const int data = 99;    int deviceDataLength = data;        if (data > guard){        deviceDataLength = guard;    }    cout << "deviceDataLength::" << deviceDataLength << endl;    deviceDataLength = guard > data ? data : guard;    cout << "deviceDataLength::" << deviceDataLength << endl;*/    int* ptr = new int(7);    delete ptr;    ptr = 0;    cout << "End of the program!!!" << endl;    return 0;}