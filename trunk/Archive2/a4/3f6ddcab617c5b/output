In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:18:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:37:74: error: no type named 'type' in 'boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type>, boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>'
                typedef typename mpl::apply<transform_type, value_type>::type type;
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/iterator/value_of.hpp:52:15: note: in instantiation of template class 'boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
            : extension::value_of_impl<typename detail::tag_of<Iterator>::type>::
              ^
/usr/local/include/boost/fusion/iterator/mpl/fusion_iterator.hpp:47:45: note: in instantiation of template class 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
        typedef typename fusion::result_of::value_of<Iterator>::type type;
                                            ^
/usr/local/include/boost/mpl/deref.hpp:30:22: note: in instantiation of template class 'boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
    typedef typename Iterator::type type;
                     ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:67:58: note: in instantiation of template class 'boost::mpl::deref<boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> > >' requested here
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
                                                         ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: in instantiation of template class 'boost::mpl::aux::fold_impl<2, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::mpl::if_<boost::mpl::contains<mpl_::arg<1>, mpl_::arg<2> >, mpl_::arg<1>, boost::mpl::push_back<mpl_::arg<1>, mpl_::arg<2> > > >' requested here
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:191:30: note: (skipping 2 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
                        mpl::fold<
                             ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:18:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:37:74: error: no type named 'type' in 'boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type>, boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>'
                typedef typename mpl::apply<transform_type, value_type>::type type;
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/iterator/value_of.hpp:52:15: note: in instantiation of template class 'boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
            : extension::value_of_impl<typename detail::tag_of<Iterator>::type>::
              ^
/usr/local/include/boost/fusion/iterator/mpl/fusion_iterator.hpp:47:45: note: in instantiation of template class 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
        typedef typename fusion::result_of::value_of<Iterator>::type type;
                                            ^
/usr/local/include/boost/mpl/deref.hpp:30:22: note: in instantiation of template class 'boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >' requested here
    typedef typename Iterator::type type;
                     ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:69:58: note: in instantiation of template class 'boost::mpl::deref<boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> > >' requested here
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
                                                         ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: in instantiation of template class 'boost::mpl::aux::fold_impl<2, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type> >, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::mpl::if_<boost::mpl::contains<mpl_::arg<1>, mpl_::arg<2> >, mpl_::arg<1>, boost::mpl::push_back<mpl_::arg<1>, mpl_::arg<2> > > >' requested here
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:191:30: note: (skipping 2 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
                        mpl::fold<
                             ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:21:
In file included from /usr/local/include/boost/fusion/view/detail/strictest_traversal.hpp:16:
In file included from /usr/local/include/boost/fusion/mpl.hpp:12:
In file included from /usr/local/include/boost/fusion/adapted/mpl.hpp:15:
In file included from /usr/local/include/boost/fusion/adapted/mpl/detail/size_impl.hpp:12:
/usr/local/include/boost/mpl/size.hpp:32:24: error: 'apply' following the 'template' keyword does not refer to a template
            ::template apply< Sequence >::type
                       ^~~~~
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:203:53: note: in instantiation of template class 'boost::mpl::size<int>' requested here
                    BOOST_MPL_ASSERT_RELATION( mpl::size<no_duplicate_char_types>::value, ==, 1 );
                                                    ^
/usr/local/include/boost/mpl/assert.hpp:369:60: note: expanded from macro 'BOOST_MPL_ASSERT_RELATION'
BOOST_MPL_ASSERT_RELATION_IMPL(BOOST_MPL_AUX_PP_COUNTER(), x, rel, y) \
                                                           ^
/usr/local/include/boost/mpl/assert.hpp:329:54: note: expanded from macro '\
BOOST_MPL_ASSERT_RELATION_IMPL'
enum { BOOST_PP_CAT(mpl_assert_rel_value,counter) = (x rel y) }; \
                                                     ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:211:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::get_keyword_char_type<boost::fusion::transform_view<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type, boost::fusion::void_> >' requested here
            typedef typename get_keyword_char_type<
                             ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:21:
In file included from /usr/local/include/boost/fusion/view/detail/strictest_traversal.hpp:16:
In file included from /usr/local/include/boost/fusion/mpl.hpp:22:
In file included from /usr/local/include/boost/fusion/mpl/front.hpp:11:
/usr/local/include/boost/mpl/front.hpp:30:20: error: 'apply' following the 'template' keyword does not refer to a template
        ::template apply< Sequence >
                   ^~~~~
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:205:43: note: in instantiation of template class 'boost::mpl::front<int>' requested here
                    typedef typename mpl::front<no_duplicate_char_types>::type type;
                                          ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:211:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::get_keyword_char_type<boost::fusion::transform_view<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_char_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_char_type, boost::fusion::void_> >' requested here
            typedef typename get_keyword_char_type<
                             ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:18:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:37:74: error: no type named 'type' in 'boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type>, boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>'
                typedef typename mpl::apply<transform_type, value_type>::type type;
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/iterator/value_of.hpp:52:15: note: in instantiation of template class 'boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
            : extension::value_of_impl<typename detail::tag_of<Iterator>::type>::
              ^
/usr/local/include/boost/fusion/iterator/mpl/fusion_iterator.hpp:47:45: note: in instantiation of template class 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
        typedef typename fusion::result_of::value_of<Iterator>::type type;
                                            ^
/usr/local/include/boost/mpl/deref.hpp:30:22: note: in instantiation of template class 'boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
    typedef typename Iterator::type type;
                     ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:67:58: note: in instantiation of template class 'boost::mpl::deref<boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> > >' requested here
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
                                                         ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: in instantiation of template class 'boost::mpl::aux::fold_impl<2, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >, mpl_::integral_c<unsigned long, 0>, boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<true> > >, 0> >' requested here
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/mpl/count_if.hpp:66:36: note: (skipping 3 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    : aux::msvc_eti_base< typename fold<
                                   ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:11:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:18:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:37:74: error: no type named 'type' in 'boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type>, boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>'
                typedef typename mpl::apply<transform_type, value_type>::type type;
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/iterator/value_of.hpp:52:15: note: in instantiation of template class 'boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
            : extension::value_of_impl<typename detail::tag_of<Iterator>::type>::
              ^
/usr/local/include/boost/fusion/iterator/mpl/fusion_iterator.hpp:47:45: note: in instantiation of template class 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
        typedef typename fusion::result_of::value_of<Iterator>::type type;
                                            ^
/usr/local/include/boost/mpl/deref.hpp:30:22: note: in instantiation of template class 'boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >' requested here
    typedef typename Iterator::type type;
                     ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:69:58: note: in instantiation of template class 'boost::mpl::deref<boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> > >' requested here
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
                                                         ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: in instantiation of template class 'boost::mpl::aux::fold_impl<2, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> > > >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >, boost::mpl::fusion_iterator<boost::fusion::transform_view_iterator<boost::fusion::mpl_iterator<boost::mpl::aux::filter_iter<boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::fusion_iterator<boost::fusion::cons_iterator<boost::fusion::nil_> >, boost::mpl::protect<boost::mpl::bind1<boost::mpl::quote1<is_kwd_parser, mpl_::void_>, mpl_::arg<-1> >, 0> > >, boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>::build_case_type_sequence<boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > > >::element_case_type> >, mpl_::integral_c<unsigned long, 0>, boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<true> > >, 0> >' requested here
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/mpl/count_if.hpp:66:36: note: (skipping 3 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    : aux::msvc_eti_base< typename fold<
                                   ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:22:
In file included from /usr/local/include/boost/fusion/include/intrinsic.hpp:11:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/back.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/end.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_end.hpp:12:
In file included from /usr/local/include/boost/fusion/iterator/segmented_iterator.hpp:13:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/begin.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_begin.hpp:13:
In file included from /usr/local/include/boost/fusion/view/iterator_range.hpp:11:
In file included from /usr/local/include/boost/fusion/view/iterator_range/iterator_range.hpp:22:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segments_impl.hpp:14:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segmented_iterator_range.hpp:20:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/push_back.hpp:13:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view_iterator.hpp:14:
In file included from /usr/local/include/boost/fusion/view/single_view/detail/deref_impl.hpp:14:
In file included from /usr/local/include/boost/mpl/equal_to.hpp:19:
In file included from /usr/local/include/boost/mpl/aux_/comparison_op.hpp:35:
In file included from /usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/equal_to.hpp:60:22: error: type 'int' cannot be used prior to '::' because it has no members
    typedef typename T::tag type;
                     ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/equal_to.hpp:70:20: note: in instantiation of template class 'boost::mpl::equal_to_tag<int>' requested here
          typename equal_to_tag<N1>::type
                   ^
/usr/local/include/boost/mpl/aux_/has_type.hpp:20:1: note: in instantiation of template class 'boost::mpl::equal_to<int, mpl_::bool_<false> >' requested here
BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF(has_type, type, true)
^
/usr/local/include/boost/mpl/has_xxx.hpp:245:65: note: expanded from macro 'BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF'
            , boost::mpl::aux::type_wrapper<BOOST_MSVC_TYPENAME U::name>* = 0 \
                                                                ^
/usr/local/include/boost/mpl/aux_/has_type.hpp:20:1: note: while substituting deduced template arguments into function template 'test' [with U = boost::mpl::equal_to<int, mpl_::bool_<false> >]
BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF(has_type, type, true)
^
/usr/local/include/boost/mpl/has_xxx.hpp:253:18: note: expanded from macro 'BOOST_MPL_HAS_XXX_TRAIT_NAMED_DEF'
          sizeof(gcc_3_2_wknd::test(static_cast<t_*>(0))) \
                 ^
/usr/local/include/boost/config/suffix.hpp:394:72: note: expanded from macro 'BOOST_STATIC_CONSTANT'
#     define BOOST_STATIC_CONSTANT(type, assignment) static const type assignment
                                                                       ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:53:20: note: in instantiation of template class 'boost::mpl::aux::has_type<boost::mpl::equal_to<int, mpl_::bool_<false> >, mpl_::bool_<true> >' requested here
            , aux::has_type< F< U1,U2 > >::value
                   ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:48:7: note: in instantiation of template class 'boost::mpl::quote2<equal_to, mpl_::void_>::apply<int, mpl_::bool_<false> >' requested here
    : F::template apply< T1,T2 >
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:204:26: note: (skipping 11 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
        typedef typename apply_wrap2<
                         ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:16:
In file included from /usr/local/include/boost/spirit/include/phoenix_limits.hpp:11:
In file included from /usr/local/include/boost/phoenix/core/limits.hpp:26:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:22:
/usr/local/include/boost/mpl/if.hpp:63:73: error: no member named 'value' in 'boost::mpl::equal_to<int, mpl_::bool_<false> >'
          BOOST_MPL_AUX_STATIC_CAST(bool, BOOST_MPL_AUX_VALUE_WKND(T1)::value)
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
/usr/local/include/boost/mpl/aux_/static_cast.hpp:24:62: note: expanded from macro 'BOOST_MPL_AUX_STATIC_CAST'
#   define BOOST_MPL_AUX_STATIC_CAST(T, expr) static_cast<T>(expr)
                                                             ^
/usr/local/include/boost/mpl/eval_if.hpp:37:22: note: in instantiation of template class 'boost::mpl::if_<boost::mpl::equal_to<int, mpl_::bool_<false> >, boost::mpl::next<mpl_::integral_c<unsigned long, 0> >, boost::mpl::identity<mpl_::integral_c<unsigned long, 0> > >' requested here
    typedef typename if_<C,F1,F2>::type f_;
                     ^
/usr/local/include/boost/mpl/count_if.hpp:41:11: note: in instantiation of template class 'boost::mpl::eval_if<boost::mpl::equal_to<int, mpl_::bool_<false> >, boost::mpl::next<mpl_::integral_c<unsigned long, 0> >, boost::mpl::identity<mpl_::integral_c<unsigned long, 0> > >' requested here
        : eval_if<
          ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:48:7: note: in instantiation of template class 'boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >::apply<mpl_::integral_c<unsigned long, 0>, int>' requested here
    : F::template apply< T1,T2 >
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply.hpp:69:7: note: in instantiation of template class 'boost::mpl::apply_wrap2<boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >, 0>, mpl_::integral_c<unsigned long, 0>, int>' requested here
    : apply_wrap2<
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:67:22: note: in instantiation of template class 'boost::mpl::apply2<boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >, 0>, mpl_::integral_c<unsigned long, 0>, int>' requested here
    typedef typename apply2< ForwardOp, state0, typename deref<iter0>::type >::type state1;
                     ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: (skipping 4 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:16:
In file included from /usr/local/include/boost/spirit/include/phoenix_limits.hpp:11:
In file included from /usr/local/include/boost/phoenix/core/limits.hpp:26:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:22:
/usr/local/include/boost/mpl/if.hpp:63:73: error: no member named 'value' in 'boost::mpl::equal_to<int, mpl_::bool_<false> >'
          BOOST_MPL_AUX_STATIC_CAST(bool, BOOST_MPL_AUX_VALUE_WKND(T1)::value)
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
/usr/local/include/boost/mpl/aux_/static_cast.hpp:24:62: note: expanded from macro 'BOOST_MPL_AUX_STATIC_CAST'
#   define BOOST_MPL_AUX_STATIC_CAST(T, expr) static_cast<T>(expr)
                                                             ^
/usr/local/include/boost/mpl/eval_if.hpp:37:22: note: in instantiation of template class 'boost::mpl::if_<boost::mpl::equal_to<int, mpl_::bool_<false> >, boost::mpl::next<int>, boost::mpl::identity<int> >' requested here
    typedef typename if_<C,F1,F2>::type f_;
                     ^
/usr/local/include/boost/mpl/count_if.hpp:41:11: note: in instantiation of template class 'boost::mpl::eval_if<boost::mpl::equal_to<int, mpl_::bool_<false> >, boost::mpl::next<int>, boost::mpl::identity<int> >' requested here
        : eval_if<
          ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:48:7: note: in instantiation of template class 'boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >::apply<int, int>' requested here
    : F::template apply< T1,T2 >
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply.hpp:69:7: note: in instantiation of template class 'boost::mpl::apply_wrap2<boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >, 0>, int, int>' requested here
    : apply_wrap2<
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/fold_impl.hpp:69:22: note: in instantiation of template class 'boost::mpl::apply2<boost::mpl::protect<boost::mpl::aux::next_if<boost::mpl::equal_to<mpl_::arg<-1>, mpl_::bool_<false> > >, 0>, int, int>' requested here
    typedef typename apply2< ForwardOp, state1, typename deref<iter1>::type >::type state2;
                     ^
/usr/local/include/boost/mpl/fold.hpp:33:27: note: (skipping 4 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    typedef typename aux::fold_impl<
                          ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:22:
In file included from /usr/local/include/boost/fusion/include/intrinsic.hpp:11:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/back.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/end.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_end.hpp:12:
In file included from /usr/local/include/boost/fusion/iterator/segmented_iterator.hpp:13:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/begin.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_begin.hpp:13:
In file included from /usr/local/include/boost/fusion/view/iterator_range.hpp:11:
In file included from /usr/local/include/boost/fusion/view/iterator_range/iterator_range.hpp:22:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segments_impl.hpp:14:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segmented_iterator_range.hpp:20:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/push_back.hpp:13:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view_iterator.hpp:14:
In file included from /usr/local/include/boost/fusion/view/single_view/detail/deref_impl.hpp:14:
In file included from /usr/local/include/boost/mpl/equal_to.hpp:19:
In file included from /usr/local/include/boost/mpl/aux_/comparison_op.hpp:35:
In file included from /usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/equal_to.hpp:20:50: error: type 'int' cannot be used prior to '::' because it has no members
          ( BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag1)
                                                 ^
/usr/local/include/boost/mpl/aux_/value_wknd.hpp:68:30: note: expanded from macro 'BOOST_MPL_AUX_NESTED_VALUE_WKND'
    BOOST_MPL_AUX_VALUE_WKND(C)::value \
                             ^
/usr/local/include/boost/mpl/aux_/value_wknd.hpp:57:40: note: expanded from macro 'BOOST_MPL_AUX_VALUE_WKND'
#   define BOOST_MPL_AUX_VALUE_WKND(C) C
                                       ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/equal_to.hpp:69:7: note: in instantiation of template class 'boost::mpl::equal_to_impl<int, mpl_::integral_c_tag>' requested here
    : equal_to_impl<
      ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:306:33: note: in instantiation of template class 'boost::mpl::equal_to<int, mpl_::long_<2> >' requested here
                , typename mpl::equal_to< ikwd_count, nb_elements>::type
                                ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:22:
In file included from /usr/local/include/boost/fusion/include/intrinsic.hpp:11:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/back.hpp:12:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/end.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_end.hpp:12:
In file included from /usr/local/include/boost/fusion/iterator/segmented_iterator.hpp:13:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/begin.hpp:18:
In file included from /usr/local/include/boost/fusion/sequence/intrinsic/detail/segmented_begin.hpp:13:
In file included from /usr/local/include/boost/fusion/view/iterator_range.hpp:11:
In file included from /usr/local/include/boost/fusion/view/iterator_range/iterator_range.hpp:22:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segments_impl.hpp:14:
In file included from /usr/local/include/boost/fusion/view/iterator_range/detail/segmented_iterator_range.hpp:20:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/push_back.hpp:13:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view.hpp:15:
In file included from /usr/local/include/boost/fusion/view/single_view/single_view_iterator.hpp:14:
In file included from /usr/local/include/boost/fusion/view/single_view/detail/deref_impl.hpp:14:
In file included from /usr/local/include/boost/mpl/equal_to.hpp:19:
In file included from /usr/local/include/boost/mpl/aux_/comparison_op.hpp:35:
In file included from /usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/equal_to.hpp:72:21: error: 'apply' following the 'template' keyword does not refer to a template
        >::template apply< N1,N2 >::type
                    ^~~~~
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:306:33: note: in instantiation of template class 'boost::mpl::equal_to<int, mpl_::long_<2> >' requested here
                , typename mpl::equal_to< ikwd_count, nb_elements>::type
                                ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:5:
In file included from /usr/local/include/boost/spirit/repository/include/qi_keywords.hpp:17:
In file included from /usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:45:
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:311:68: error: no type named 'type' in 'boost::mpl::equal_to<int, mpl_::long_<2> >'
                , typename mpl::equal_to< kwd_count, nb_elements>::type
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:16:
In file included from /usr/local/include/boost/spirit/include/phoenix_limits.hpp:11:
In file included from /usr/local/include/boost/phoenix/core/limits.hpp:26:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:26:
In file included from /usr/local/include/boost/mpl/or.hpp:23:
/usr/local/include/boost/mpl/aux_/nested_type_wknd.hpp:27:7: error: type 'int' cannot be used prior to '::' because it has no members
    : T::type
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:51:11: note: in instantiation of template class 'boost::mpl::aux::nested_type_wknd<int>' requested here
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ^
/usr/local/include/boost/mpl/aux_/nested_type_wknd.hpp:38:24: note: expanded from macro 'BOOST_MPL_AUX_NESTED_TYPE_WKND'
    ::boost::mpl::aux::nested_type_wknd<T> \
                       ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:314:35: note: in instantiation of template class 'boost::mpl::or_<int, int, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
            typedef typename mpl::or_< all_kwd, all_ikwd >::type all_directives_of_same_type;
                                  ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:18:
In file included from /usr/local/include/boost/fusion/include/is_view.hpp:11:
In file included from /usr/local/include/boost/fusion/support/is_view.hpp:13:
In file included from /usr/local/include/boost/fusion/support/tag_of.hpp:14:
In file included from /usr/local/include/boost/fusion/support/detail/is_mpl_sequence.hpp:13:
In file included from /usr/local/include/boost/mpl/is_sequence.hpp:18:
In file included from /usr/local/include/boost/mpl/and.hpp:42:
In file included from /usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:51:47: error: no member named 'value' in 'boost::mpl::aux::nested_type_wknd<int>'
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/usr/local/include/boost/mpl/aux_/nested_type_wknd.hpp:27:7: note: in instantiation of template class 'boost::mpl::and_<int, int, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >' requested here
    : T::type
      ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:25:11: note: in instantiation of template class 'boost::mpl::aux::nested_type_wknd<boost::mpl::and_<int, int, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> > >' requested here
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ^
/usr/local/include/boost/mpl/aux_/nested_type_wknd.hpp:38:24: note: expanded from macro 'BOOST_MPL_AUX_NESTED_TYPE_WKND'
    ::boost::mpl::aux::nested_type_wknd<T> \
                       ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:50:7: note: in instantiation of template class 'boost::mpl::aux::or_impl<false, boost::mpl::and_<int, int, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
    : aux::or_impl<
      ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:320:35: note: in instantiation of template class 'boost::mpl::or_<boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, boost::mpl::and_<int, int, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
            typedef typename mpl::or_<
                                  ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:16:
In file included from /usr/local/include/boost/spirit/include/phoenix_limits.hpp:11:
In file included from /usr/local/include/boost/phoenix/core/limits.hpp:26:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:22:
/usr/local/include/boost/mpl/if.hpp:63:68: error: type 'int' cannot be used prior to '::' because it has no members
          BOOST_MPL_AUX_STATIC_CAST(bool, BOOST_MPL_AUX_VALUE_WKND(T1)::value)
                                                                   ^
/usr/local/include/boost/mpl/aux_/value_wknd.hpp:57:40: note: expanded from macro 'BOOST_MPL_AUX_VALUE_WKND'
#   define BOOST_MPL_AUX_VALUE_WKND(C) C
                                       ^
/usr/local/include/boost/mpl/aux_/static_cast.hpp:24:62: note: expanded from macro 'BOOST_MPL_AUX_STATIC_CAST'
#   define BOOST_MPL_AUX_STATIC_CAST(T, expr) static_cast<T>(expr)
                                                             ^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:336:35: note: in instantiation of template class 'boost::mpl::if_<int, int, boost::spirit::qi::tst_pass_through>' requested here
            typedef typename mpl::if_<
                                  ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:16:
In file included from /usr/local/include/boost/spirit/include/phoenix_limits.hpp:11:
In file included from /usr/local/include/boost/phoenix/core/limits.hpp:26:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:26:
In file included from /usr/local/include/boost/mpl/or.hpp:43:
In file included from /usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:51:47: error: no member named 'value' in 'boost::mpl::aux::nested_type_wknd<int>'
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
/usr/local/include/boost/spirit/repository/home/qi/operator/detail/keywords.hpp:342:35: note: in instantiation of template class 'boost::mpl::or_<int, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
            typedef typename mpl::or_<
                                  ^
/usr/local/include/boost/spirit/repository/home/qi/operator/keywords.hpp:390:30: note: in instantiation of template class 'boost::spirit::repository::qi::detail::string_keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::mpl::filter_view<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::repository::qi::is_kwd_parser<mpl_::arg<-1> > >, boost::mpl::filter_view<boost::mpl::v_item<mpl_::integral_c<int, 1>, boost::mpl::v_item<mpl_::integral_c<int, 0>, boost::mpl::vector<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, 0>, 0>, boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>::is_kwd_parser_filter<mpl_::arg<-1> > >, boost::array<bool, 2>, boost::spirit::unused_type>' requested here
        string_keywords_type string_keywords_inst;
                             ^
/usr/local/include/boost/spirit/home/qi/detail/parse.hpp:84:18: note: in instantiation of template class 'boost::spirit::repository::qi::keywords<boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::cons<boost::spirit::repository::qi::kwd_parser<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double, boost::spirit::qi::real_policies<double> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > >, char const (&)[2], boost::spirit::repository::qi::kwd_pass_iterator<int>, boost::spirit::has_modifier<boost::spirit::unused_type, boost::spirit::tag::char_code_base<boost::spirit::tag::no_case> >, mpl_::bool_<false> >, boost::fusion::nil_> >, boost::spirit::unused_type>' requested here
            if (!compile<qi::domain>(expr).parse(
                 ^
/usr/local/include/boost/spirit/home/qi/parse.hpp:117:49: note: in instantiation of function template specialization 'boost::spirit::qi::detail::phrase_parse_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, void>::call<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
        return detail::phrase_parse_impl<Expr>::call(
                                                ^
main.cpp:15:33: note: in instantiation of function template specialization 'boost::spirit::qi::phrase_parse<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::divides, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::plus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::repository::tag::kwd, boost::fusion::vector1<char const (&)[2]> > >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::double_> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::minus_assign, boost::proto::argsns_::list2<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<double> >, 0> >, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &>, 2>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0> >' requested here
    bool r = boost::spirit::qi::phrase_parse(first, last,
                                ^
main.cpp:27:36: note: in instantiation of function template specialization 'difference<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >' requested here
    std::cout << "Full parse: " << difference(str.begin(), str.end(), n) << std::endl;  
                                   ^
16 errors generated.
