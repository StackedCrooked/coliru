main.cpp:11:17: error: no matching function for call to 'pow'
    cpp_int i = pow(z, z).convert_to<cpp_int>();
                ^~~
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2025:28: note: candidate function [with Backend = boost::multiprecision::backends::gmp_int] not viable: no known conversion from 'mpz_int' (aka 'number<boost::multiprecision::backends::gmp_int>') to 'const unsigned int' for 2nd argument
HETERO_BINARY_OP_FUNCTOR_B(pow, unsigned, number_kind_integer)
                           ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1893:9: note: expanded from macro 'HETERO_BINARY_OP_FUNCTOR_B'
>::type \
        ^
/usr/include/x86_64-linux-gnu/bits/mathcalls.h:155:13: note: candidate function not viable: no known conversion from 'mpz_int' (aka 'number<boost::multiprecision::backends::gmp_int>') to 'double' for 1st argument
__MATHCALL (pow,, (_Mdouble_ __x, _Mdouble_ __y));
            ^
/usr/include/math.h:55:25: note: expanded from macro '__MATHCALL'
  __MATHDECL (_Mdouble_,function,suffix, args)
                        ^
/usr/include/math.h:57:22: note: expanded from macro '__MATHDECL'
  __MATHDECL_1(type, function,suffix, args); \
                     ^
/usr/include/math.h:65:31: note: expanded from macro '__MATHDECL_1'
  extern type __MATH_PRECNAME(function,suffix) args __THROW
                              ^
/usr/include/math.h:68:42: note: expanded from macro '__MATH_PRECNAME'
#define __MATH_PRECNAME(name,r) __CONCAT(name,r)
                                         ^
/usr/include/x86_64-linux-gnu/sys/cdefs.h:94:23: note: expanded from macro '__CONCAT'
#define __CONCAT(x,y)   x ## y
                        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2025:28: note: candidate template ignored: could not match 0 against 1
HETERO_BINARY_OP_FUNCTOR_B(pow, unsigned, number_kind_integer)
                           ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1910:35: note: expanded from macro 'HETERO_BINARY_OP_FUNCTOR_B'
  number<Backend, et_off> >::type \
                                  ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: substitution failure [with Backend = boost::multiprecision::backends::gmp_int]: no type named 'type' in 'boost::enable_if_c<false, boost::multiprecision::detail::expression<boost::multiprecision::detail::function, boost::multiprecision::detail::pow_funct<boost::multiprecision::backends::gmp_int>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, void> >'
BINARY_OP_FUNCTOR(pow, number_kind_floating_point)
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1653:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 'expression' against 'number'
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1675:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 'expression' against 'number'
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1697:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 'expression' against 'number'
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1719:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: substitution failure [with Backend = boost::multiprecision::backends::gmp_int, Arithmetic = boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>]: no type named 'type' in 'boost::enable_if_c<false, boost::multiprecision::detail::expression<boost::multiprecision::detail::function, boost::multiprecision::detail::pow_funct<boost::multiprecision::backends::gmp_int>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, void> >'
BINARY_OP_FUNCTOR(pow, number_kind_floating_point)
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1742:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 'expression' against 'number'
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1765:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: substitution failure [with Backend = boost::multiprecision::backends::gmp_int, Arithmetic = boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>]: no type named 'type' in 'boost::enable_if_c<false, boost::multiprecision::detail::expression<boost::multiprecision::detail::function, boost::multiprecision::detail::pow_funct<boost::multiprecision::backends::gmp_int>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, boost::multiprecision::number<boost::multiprecision::backends::gmp_int, 1>, void> >'
BINARY_OP_FUNCTOR(pow, number_kind_floating_point)
~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1788:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 'expression' against 'number'
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1811:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 0 against 1
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1827:36: note: expanded from macro 'BINARY_OP_FUNCTOR'
   number<Backend, et_off> >::type \
                                   ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 0 against 1
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1839:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2016:19: note: candidate template ignored: could not match 0 against 1
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1852:9: note: expanded from macro 'BINARY_OP_FUNCTOR'
>::type \
        ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:2025:28: note: candidate template ignored: could not match 'expression' against 'number'
HETERO_BINARY_OP_FUNCTOR_B(pow, unsigned, number_kind_integer)
                           ^
/usr/local/include/boost/multiprecision/detail/default_ops.hpp:1872:9: note: expanded from macro 'HETERO_BINARY_OP_FUNCTOR_B'
>::type \
        ^
main.cpp:11:38: error: unexpected type name 'cpp_int': expected expression
    cpp_int i = pow(z, z).convert_to<cpp_int>();
                                     ^
main.cpp:11:47: error: expected expression
    cpp_int i = pow(z, z).convert_to<cpp_int>();
                                              ^
3 errors generated.
