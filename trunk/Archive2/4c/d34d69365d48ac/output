main.cpp: In function 'int main()':
main.cpp:42:14: warning: unused variable 'r' [-Wunused-variable]
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:21:0,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp: In static member function 'static void boost::spirit::traits::action_dispatch<Component>::caller(F&&, A&& ...) [with F = const std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>&, A = {std::vector<char>&, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >&, bool&}, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >]':
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:153:13:   instantiated from 'bool boost::spirit::traits::action_dispatch<Component>::operator()(const F&, Attribute&, Context&) [with F = std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>, Attribute = std::vector<char>, Context = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >]'
/usr/local/include/boost/spirit/home/qi/action/action.hpp:69:17:   instantiated from 'bool boost::spirit::qi::action<Subject, Action>::parse(Iterator&, const Iterator&, Context&, const Skipper&, Attribute&) const [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, Context = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >, Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, Attribute = const boost::spirit::unused_type, Subject = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, Action = std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>]'
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parser_binder.hpp:33:65:   instantiated from 'bool boost::spirit::qi::detail::parser_binder<Parser, Auto>::call(Iterator&, const Iterator&, Context&, const Skipper&, mpl_::true_) const [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, Context = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >, Parser = boost::spirit::qi::action<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)> >, Auto = mpl_::bool_<false>, mpl_::true_ = mpl_::bool_<true>]'
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parser_binder.hpp:53:67:   instantiated from 'bool boost::spirit::qi::detail::parser_binder<Parser, Auto>::operator()(Iterator&, const Iterator&, Context&, const Skipper&) const [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, Context = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >, Parser = boost::spirit::qi::action<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)> >, Auto = mpl_::bool_<false>]'
/usr/local/include/boost/function/function_template.hpp:132:42:   instantiated from 'static R boost::detail::function::function_obj_invoker4<FunctionObj, R, T0, T1, T2, T3>::invoke(boost::detail::function::function_buffer&, T0, T1, T2, T3) [with FunctionObj = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)> >, mpl_::bool_<false> >, R = bool, T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >&, T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >&]'
/usr/local/include/boost/function/function_template.hpp:934:60:   [ skipping 2 instantiation contexts ]
/usr/local/include/boost/function/function_template.hpp:1069:16:   instantiated from 'boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)> >, mpl_::bool_<false> >, R = bool, T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >&, T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >&, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]'
/usr/local/include/boost/function/function_template.hpp:1124:5:   instantiated from 'typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)> >, mpl_::bool_<false> >, R = bool, T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >&, T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >&, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> >&, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >&)>&]'
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:13:   instantiated from 'static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>, Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char (&)[2]>, 0l> >, 2l>&>, 1l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>&>, 0l> >, 2l>, Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, T1 = std::basic_string<char>(), T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0l>, T3 = boost::spirit::unused_type, T4 = boost::spirit::unused_type, boost::spirit::qi::rule<Iterator, T1, T2, T3, T4> = boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0l>, boost::spirit::unused_type, boost::spirit::unused_type>, mpl_::true_ = mpl_::bool_<true>]'
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:13:   instantiated from 'boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char (&)[2]>, 0l> >, 2l>&>, 1l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>&>, 0l> >, 2l>, Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, T1 = std::basic_string<char>(), T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0l>, T3 = boost::spirit::unused_type, T4 = boost::spirit::unused_type, boost::spirit::qi::rule<Iterator, T1, T2, T3, T4> = boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0l>, boost::spirit::unused_type, boost::spirit::unused_type>]'
main.cpp:25:9:   instantiated from 'x_grammar<Iterator>::x_grammar() [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >]'
main.cpp:40:21:   instantiated from here
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:142:13: error: no matching function for call to 'boost::spirit::traits::action_dispatch<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > > >::do_call(const std::_Bind<void (*(boost::phoenix::actor<boost::spirit::argument<0> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::reference_wrapper<int> >, 0l> >))(const std::vector<char>&, int&)>&, boost::spirit::traits::action_dispatch<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > > >::fwd_tag<std::vector<char> >, boost::spirit::traits::action_dispatch<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > > >::fwd_tag<boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::nil_>, boost::fusion::vector0<> > >, boost::spirit::traits::action_dispatch<boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > > >::fwd_tag<bool>)'
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:142:13: note: candidates are:
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:104:21: note: template<class F> static typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f()), boost::spirit::traits::action_dispatch<Component>::fwd_none>::type boost::spirit::traits::action_dispatch::do_call(F&&, ...) [with F = F, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f()), boost::spirit::traits::action_dispatch<Component>::fwd_none>::type = <type error>]
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:111:21: note: template<class F, class A> static typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib>::type boost::spirit::traits::action_dispatch::do_call(F&&, boost::spirit::traits::action_dispatch<Component>::fwd_tag<A>, ...) [with F = F, A = A, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib>::type = <type error>]
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:119:21: note: template<class F, class A, class B> static typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)), (*(B*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib_context>::type boost::spirit::traits::action_dispatch::do_call(F&&, boost::spirit::traits::action_dispatch<Component>::fwd_tag<A>, boost::spirit::traits::action_dispatch<Component>::fwd_tag<B>, ...) [with F = F, A = A, B = B, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)), (*(B*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib_context>::type = <type error>]
/usr/local/include/boost/spirit/home/support/action_dispatch.hpp:128:21: note: template<class F, class A, class B, class C> static typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)), (*(B*)(0)), (*(C*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib_context_pass>::type boost::spirit::traits::action_dispatch::do_call(F&&, boost::spirit::traits::action_dispatch<Component>::fwd_tag<A>, boost::spirit::traits::action_dispatch<Component>::fwd_tag<B>, boost::spirit::traits::action_dispatch<Component>::fwd_tag<C>, ...) [with F = F, A = A, B = B, C = C, Component = boost::spirit::qi::plus<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard> >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> > >, typename boost::spirit::traits::action_dispatch<Component>::fwd_storage<decltype (f((*(A*)(0)), (*(B*)(0)), (*(C*)(0)))), boost::spirit::traits::action_dispatch<Component>::fwd_attrib_context_pass>::type = <type error>]
