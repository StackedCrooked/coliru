In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h: In instantiation of 'constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&) [with _T1 = IpAddress; _T2 = IpAddress]':
/usr/local/include/c++/4.9.0/bits/stl_function.h:340:20:   required from 'bool std::equal_to<_Tp>::operator()(const _Tp&, const _Tp&) const [with _Tp = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:253:48:   required from 'boost::unordered::detail::table_impl<Types>::iterator boost::unordered::detail::table_impl<Types>::find_node_impl(std::size_t, const Key&, const Pred&) const [with Key = std::pair<IpAddress, IpAddress>; Pred = std::equal_to<std::pair<IpAddress, IpAddress> >; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:782:59:   required from 'boost::unordered::detail::table<Types>::iterator boost::unordered::detail::table<Types>::find_node(std::size_t, const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; typename Types::node = boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:408:55:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: error: no match for 'operator==' (operand types are 'const IpAddress' and 'const IpAddress')
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note: candidates are:
main.cpp:62:6: note: bool IpAddress::operator==(const IpAddress&) <near match>
 bool operator==(const IpAddress& a1)
      ^
main.cpp:62:6: note:   no known conversion for implicit 'this' parameter from 'const IpAddress*' to 'IpAddress*'
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:463:5: note: template<class _Tp> constexpr bool std::operator==(const _Tp&, const std::complex<_Tp>&)
     operator==(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/local/include/c++/4.9.0/complex:463:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:458:5: note: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const _Tp&)
     operator==(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/local/include/c++/4.9.0/complex:458:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:453:5: note: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/local/include/c++/4.9.0/complex:453:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/set:62:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:95,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_multiset.h:777:5: note: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key, _Compare, _Alloc>&)
     operator==(const multiset<_Key, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_multiset.h:777:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::multiset<_Key, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/set:61:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:95,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_set.h:793:5: note: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key, _Compare, _Alloc>&)
     operator==(const set<_Key, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_set.h:793:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::set<_Key, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/map:62:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_multimap.h:903:5: note: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&, const std::multimap<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_multimap.h:903:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::multimap<_Key, _Tp, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/map:61:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_map.h:1000:5: note: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const std::map<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_map.h:1000:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::map<_Key, _Tp, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/map:60:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_tree.h:970:5: note: template<class _Key, class _Val, class _KeyOfValue, class _Compare, class _Alloc> bool std::operator==(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&, const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&)
     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_tree.h:970:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/map:60:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_tree.h:323:5: note: template<class _Val> bool std::operator==(const std::_Rb_tree_iterator<_Tp>&, const std::_Rb_tree_const_iterator<_Val>&)
     operator==(const _Rb_tree_iterator<_Val>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_tree.h:323:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::_Rb_tree_iterator<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/list:63:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:92,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_list.h:1729:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::list<_Tp, _Alloc>&, const std::list<_Tp, _Alloc>&)
     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_list.h:1729:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::list<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/list:63:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:92,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_list.h:285:5: note: template<class _Val> bool std::operator==(const std::_List_iterator<_Tp>&, const std::_List_const_iterator<_Val>&)
     operator==(const _List_iterator<_Val>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_list.h:285:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::_List_iterator<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:2029:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)
     operator==(const deque<_Tp, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:2029:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::deque<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:258:5: note: template<class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)
     operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:258:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::_Deque_iterator<_Tp, _Ref, _Ptr>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:251:5: note: template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref, _Ptr>&)
     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:251:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::_Deque_iterator<_Tp, _Ref, _Ptr>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/random:51:0,
                 from /usr/local/include/c++/4.9.0/bits/stl_algo.h:66,
                 from /usr/local/include/c++/4.9.0/algorithm:62,
                 from /usr/local/include/boost/move/algorithm.hpp:23,
                 from /usr/local/include/boost/move/move.hpp:24,
                 from /usr/local/include/boost/unordered/detail/util.hpp:20,
                 from /usr/local/include/boost/unordered/detail/buckets.hpp:15,
                 from /usr/local/include/boost/unordered/detail/table.hpp:15,
                 from /usr/local/include/boost/unordered/detail/equivalent.hpp:15,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:18,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/random.tcc:2030:5: note: template<class _RealType1> bool std::operator==(const std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)
     operator==(const std::normal_distribution<_RealType>& __d1,
     ^
/usr/local/include/c++/4.9.0/bits/random.tcc:2030:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::normal_distribution<_RealType>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/iterator:66:0,
                 from /usr/local/include/boost/detail/iterator.hpp:11,
                 from /usr/local/include/boost/iterator/iterator_categories.hpp:10,
                 from /usr/local/include/boost/unordered/detail/util.hpp:17,
                 from /usr/local/include/boost/unordered/detail/buckets.hpp:15,
                 from /usr/local/include/boost/unordered/detail/table.hpp:15,
                 from /usr/local/include/boost/unordered/detail/equivalent.hpp:15,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:18,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stream_iterator.h:130:5: note: template<class _Tp, class _CharT, class _Traits, class _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)
     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stream_iterator.h:130:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:344:5: note: template<class _Tp> bool std::operator==(std::nullptr_t, const std::shared_ptr<_Tp1>&)
     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:344:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::second' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:339:5: note: template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp1>&, std::nullptr_t)
     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:339:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::shared_ptr<_Tp1>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:333:5: note: template<class _Tp1, class _Tp2> bool std::operator==(const std::shared_ptr<_Tp1>&, const std::shared_ptr<_Tp2>&)
     operator==(const shared_ptr<_Tp1>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:333:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::shared_ptr<_Tp1>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1193:5: note: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)
     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1193:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::second' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1188:5: note: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)
     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1188:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::__shared_ptr<_Tp, _Lp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1182:5: note: template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2, _Lp>&)
     operator==(const __shared_ptr<_Tp1, _Lp>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1182:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::__shared_ptr<_Tp1, _Lp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:635:5: note: template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t, const std::unique_ptr<_Tp, _Dp>&)
     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:635:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::second' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:630:5: note: template<class _Tp, class _Dp> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)
     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:630:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::unique_ptr<_Tp, _Dp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:624:5: note: template<class _Tp, class _Dp, class _Up, class _Ep> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up, _Ep>&)
     operator==(const unique_ptr<_Tp, _Dp>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:624:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::unique_ptr<_Tp, _Dp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:79:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/functional:2504:5: note: template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t, const std::function<_Res(_ArgTypes ...)>&)
     operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
     ^
/usr/local/include/c++/4.9.0/functional:2504:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::second' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/memory:79:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/functional:2498:5: note: template<class _Res, class ... _Args> bool std::operator==(const std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)
     operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/functional:2498:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::function<_Res(_ArgTypes ...)>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/functional:55:0,
                 from /usr/local/include/c++/4.9.0/memory:79,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/tuple:838:5: note: template<class ... _TElements, class ... _UElements> constexpr bool std::operator==(const std::tuple<_Elements ...>&, const std::tuple<_Elements ...>&)
     operator==(const tuple<_TElements...>& __t,
     ^
/usr/local/include/c++/4.9.0/tuple:838:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::tuple<_Elements ...>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/tuple:39:0,
                 from /usr/local/include/c++/4.9.0/functional:55,
                 from /usr/local/include/c++/4.9.0/memory:79,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/array:232:5: note: template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)
     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
     ^
/usr/local/include/c++/4.9.0/array:232:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::array<_Tp, _Nm>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/vector:64:0,
                 from main.cpp:3:
/usr/local/include/c++/4.9.0/bits/stl_vector.h:1505:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)
     operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_vector.h:1505:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::vector<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/locale_facets.h:48:0,
                 from /usr/local/include/c++/4.9.0/bits/basic_ios.h:37,
                 from /usr/local/include/c++/4.9.0/ios:44,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/streambuf_iterator.h:204:5: note: template<class _CharT, class _Traits> bool std::operator==(const std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT, _Traits>&)
     operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/streambuf_iterator.h:204:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::istreambuf_iterator<_CharT, _Traits>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2538:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2538:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT, _Traits, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2526:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const _CharT*, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const _CharT* __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2526:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   mismatched types 'const _CharT*' and 'IpAddress'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2512:5: note: template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value, bool>::__type std::operator==(const std::basic_string<_CharT>&, const std::basic_string<_CharT>&)
     operator==(const basic_string<_CharT>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2512:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2505:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::basic_string<_CharT, _Traits, _Alloc>&, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2505:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT, _Traits, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:41:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/allocator.h:133:5: note: template<class _Tp> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_CharT>&)
     operator==(const allocator<_Tp>&, const allocator<_Tp>&)
     ^
/usr/local/include/c++/4.9.0/bits/allocator.h:133:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::allocator<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/string:41:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/allocator.h:128:5: note: template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_T2>&)
     operator==(const allocator<_T1>&, const allocator<_T2>&)
     ^
/usr/local/include/c++/4.9.0/bits/allocator.h:128:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::allocator<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1069:5: note: template<class _Iterator> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_Iterator>&)
     operator==(const move_iterator<_Iterator>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1069:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::move_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1063:5: note: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_IteratorR>&)
     operator==(const move_iterator<_IteratorL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1063:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::move_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:342:5: note: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator==(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:342:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::reverse_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:292:5: note: template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator==(const reverse_iterator<_Iterator>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:292:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::reverse_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:214:5: note: template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)
     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:214:5: note:   template argument deduction/substitution failed:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::pair<_T1, _T2>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
In file included from /usr/local/include/c++/4.9.0/iosfwd:40:0,
                 from /usr/local/include/c++/4.9.0/ios:38,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/postypes.h:216:5: note: template<class _StateT> bool std::operator==(const std::fpos<_StateT>&, const std::fpos<_StateT>&)
     operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
     ^
/usr/local/include/c++/4.9.0/bits/postypes.h:216:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:51: note:   'const IpAddress' is not derived from 'const std::fpos<_StateT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                                                   ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: error: no match for 'operator==' (operand types are 'const IpAddress' and 'const IpAddress')
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note: candidates are:
main.cpp:62:6: note: bool IpAddress::operator==(const IpAddress&) <near match>
 bool operator==(const IpAddress& a1)
      ^
main.cpp:62:6: note:   no known conversion for implicit 'this' parameter from 'const IpAddress*' to 'IpAddress*'
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:463:5: note: template<class _Tp> constexpr bool std::operator==(const _Tp&, const std::complex<_Tp>&)
     operator==(const _Tp& __x, const complex<_Tp>& __y)
     ^
/usr/local/include/c++/4.9.0/complex:463:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:458:5: note: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const _Tp&)
     operator==(const complex<_Tp>& __x, const _Tp& __y)
     ^
/usr/local/include/c++/4.9.0/complex:458:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/boost/detail/container_fwd.hpp:98:0,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/complex:453:5: note: template<class _Tp> constexpr bool std::operator==(const std::complex<_Tp>&, const std::complex<_Tp>&)
     operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)
     ^
/usr/local/include/c++/4.9.0/complex:453:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::complex<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/set:62:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:95,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_multiset.h:777:5: note: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key, _Compare, _Alloc>&)
     operator==(const multiset<_Key, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_multiset.h:777:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::multiset<_Key, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/set:61:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:95,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_set.h:793:5: note: template<class _Key, class _Compare, class _Alloc> bool std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key, _Compare, _Alloc>&)
     operator==(const set<_Key, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_set.h:793:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::set<_Key, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/map:62:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_multimap.h:903:5: note: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&, const std::multimap<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_multimap.h:903:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::multimap<_Key, _Tp, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/map:61:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_map.h:1000:5: note: template<class _Key, class _Tp, class _Compare, class _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const std::map<_Key, _Tp, _Compare, _Alloc>&)
     operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_map.h:1000:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::map<_Key, _Tp, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/map:60:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_tree.h:970:5: note: template<class _Key, class _Val, class _KeyOfValue, class _Compare, class _Alloc> bool std::operator==(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&, const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&)
     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_tree.h:970:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/map:60:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:94,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_tree.h:323:5: note: template<class _Val> bool std::operator==(const std::_Rb_tree_iterator<_Tp>&, const std::_Rb_tree_const_iterator<_Val>&)
     operator==(const _Rb_tree_iterator<_Val>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_tree.h:323:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::_Rb_tree_iterator<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/list:63:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:92,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_list.h:1729:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::list<_Tp, _Alloc>&, const std::list<_Tp, _Alloc>&)
     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_list.h:1729:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::list<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/list:63:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:92,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_list.h:285:5: note: template<class _Val> bool std::operator==(const std::_List_iterator<_Tp>&, const std::_List_const_iterator<_Val>&)
     operator==(const _List_iterator<_Val>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_list.h:285:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::_List_iterator<_Tp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:2029:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)
     operator==(const deque<_Tp, _Alloc>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:2029:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::deque<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:258:5: note: template<class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)
     operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:258:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::_Deque_iterator<_Tp, _Ref, _Ptr>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/deque:64:0,
                 from /usr/local/include/boost/detail/container_fwd.hpp:91,
                 from /usr/local/include/boost/functional/hash/extensions.hpp:22,
                 from /usr/local/include/boost/functional/hash/hash.hpp:558,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stl_deque.h:251:5: note: template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref, _Ptr>&)
     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_deque.h:251:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::_Deque_iterator<_Tp, _Ref, _Ptr>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/random:51:0,
                 from /usr/local/include/c++/4.9.0/bits/stl_algo.h:66,
                 from /usr/local/include/c++/4.9.0/algorithm:62,
                 from /usr/local/include/boost/move/algorithm.hpp:23,
                 from /usr/local/include/boost/move/move.hpp:24,
                 from /usr/local/include/boost/unordered/detail/util.hpp:20,
                 from /usr/local/include/boost/unordered/detail/buckets.hpp:15,
                 from /usr/local/include/boost/unordered/detail/table.hpp:15,
                 from /usr/local/include/boost/unordered/detail/equivalent.hpp:15,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:18,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/random.tcc:2030:5: note: template<class _RealType1> bool std::operator==(const std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)
     operator==(const std::normal_distribution<_RealType>& __d1,
     ^
/usr/local/include/c++/4.9.0/bits/random.tcc:2030:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::normal_distribution<_RealType>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/iterator:66:0,
                 from /usr/local/include/boost/detail/iterator.hpp:11,
                 from /usr/local/include/boost/iterator/iterator_categories.hpp:10,
                 from /usr/local/include/boost/unordered/detail/util.hpp:17,
                 from /usr/local/include/boost/unordered/detail/buckets.hpp:15,
                 from /usr/local/include/boost/unordered/detail/table.hpp:15,
                 from /usr/local/include/boost/unordered/detail/equivalent.hpp:15,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:18,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/stream_iterator.h:130:5: note: template<class _Tp, class _CharT, class _Traits, class _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)
     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stream_iterator.h:130:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:344:5: note: template<class _Tp> bool std::operator==(std::nullptr_t, const std::shared_ptr<_Tp1>&)
     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:344:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::first' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:339:5: note: template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp1>&, std::nullptr_t)
     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:339:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::shared_ptr<_Tp1>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:82:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:333:5: note: template<class _Tp1, class _Tp2> bool std::operator==(const std::shared_ptr<_Tp1>&, const std::shared_ptr<_Tp2>&)
     operator==(const shared_ptr<_Tp1>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr.h:333:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::shared_ptr<_Tp1>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1193:5: note: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)
     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1193:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::first' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1188:5: note: template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)
     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1188:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::__shared_ptr<_Tp, _Lp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/shared_ptr.h:52:0,
                 from /usr/local/include/c++/4.9.0/memory:82,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1182:5: note: template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2, _Lp>&)
     operator==(const __shared_ptr<_Tp1, _Lp>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/shared_ptr_base.h:1182:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::__shared_ptr<_Tp1, _Lp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:635:5: note: template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t, const std::unique_ptr<_Tp, _Dp>&)
     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:635:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::first' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:630:5: note: template<class _Tp, class _Dp> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)
     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:630:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::unique_ptr<_Tp, _Dp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:81:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:624:5: note: template<class _Tp, class _Dp, class _Up, class _Ep> bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up, _Ep>&)
     operator==(const unique_ptr<_Tp, _Dp>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/unique_ptr.h:624:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::unique_ptr<_Tp, _Dp>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:79:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/functional:2504:5: note: template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t, const std::function<_Res(_ArgTypes ...)>&)
     operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
     ^
/usr/local/include/c++/4.9.0/functional:2504:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   cannot convert '__x.std::pair<IpAddress, IpAddress>::first' (type 'const IpAddress') to type 'std::nullptr_t'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/memory:79:0,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/functional:2498:5: note: template<class _Res, class ... _Args> bool std::operator==(const std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)
     operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
     ^
/usr/local/include/c++/4.9.0/functional:2498:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::function<_Res(_ArgTypes ...)>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/functional:55:0,
                 from /usr/local/include/c++/4.9.0/memory:79,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/tuple:838:5: note: template<class ... _TElements, class ... _UElements> constexpr bool std::operator==(const std::tuple<_Elements ...>&, const std::tuple<_Elements ...>&)
     operator==(const tuple<_TElements...>& __t,
     ^
/usr/local/include/c++/4.9.0/tuple:838:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::tuple<_Elements ...>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/tuple:39:0,
                 from /usr/local/include/c++/4.9.0/functional:55,
                 from /usr/local/include/c++/4.9.0/memory:79,
                 from /usr/local/include/boost/unordered/unordered_set_fwd.hpp:14,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:17,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/c++/4.9.0/array:232:5: note: template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)
     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
     ^
/usr/local/include/c++/4.9.0/array:232:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::array<_Tp, _Nm>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/vector:64:0,
                 from main.cpp:3:
/usr/local/include/c++/4.9.0/bits/stl_vector.h:1505:5: note: template<class _Tp, class _Alloc> bool std::operator==(const std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)
     operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_vector.h:1505:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::vector<_Tp, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/locale_facets.h:48:0,
                 from /usr/local/include/c++/4.9.0/bits/basic_ios.h:37,
                 from /usr/local/include/c++/4.9.0/ios:44,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/streambuf_iterator.h:204:5: note: template<class _CharT, class _Traits> bool std::operator==(const std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT, _Traits>&)
     operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
     ^
/usr/local/include/c++/4.9.0/bits/streambuf_iterator.h:204:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::istreambuf_iterator<_CharT, _Traits>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2538:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2538:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT, _Traits, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2526:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const _CharT*, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const _CharT* __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2526:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   mismatched types 'const _CharT*' and 'IpAddress'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2512:5: note: template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value, bool>::__type std::operator==(const std::basic_string<_CharT>&, const std::basic_string<_CharT>&)
     operator==(const basic_string<_CharT>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2512:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:52:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/basic_string.h:2505:5: note: template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const std::basic_string<_CharT, _Traits, _Alloc>&, const std::basic_string<_CharT, _Traits, _Alloc>&)
     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
     ^
/usr/local/include/c++/4.9.0/bits/basic_string.h:2505:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::basic_string<_CharT, _Traits, _Alloc>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:41:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/allocator.h:133:5: note: template<class _Tp> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_CharT>&)
     operator==(const allocator<_Tp>&, const allocator<_Tp>&)
     ^
/usr/local/include/c++/4.9.0/bits/allocator.h:133:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::allocator<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/string:41:0,
                 from /usr/local/include/c++/4.9.0/bits/locale_classes.h:40,
                 from /usr/local/include/c++/4.9.0/bits/ios_base.h:41,
                 from /usr/local/include/c++/4.9.0/ios:42,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/allocator.h:128:5: note: template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&, const std::allocator<_T2>&)
     operator==(const allocator<_T1>&, const allocator<_T2>&)
     ^
/usr/local/include/c++/4.9.0/bits/allocator.h:128:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::allocator<_CharT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1069:5: note: template<class _Iterator> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_Iterator>&)
     operator==(const move_iterator<_Iterator>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1069:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::move_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1063:5: note: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::move_iterator<_Iterator>&, const std::move_iterator<_IteratorR>&)
     operator==(const move_iterator<_IteratorL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:1063:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::move_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:342:5: note: template<class _IteratorL, class _IteratorR> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)
     operator==(const reverse_iterator<_IteratorL>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:342:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::reverse_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:67:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:292:5: note: template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_Iterator>&)
     operator==(const reverse_iterator<_Iterator>& __x,
     ^
/usr/local/include/c++/4.9.0/bits/stl_iterator.h:292:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::reverse_iterator<_Iterator>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:214:5: note: template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&)
     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
     ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:214:5: note:   template argument deduction/substitution failed:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::pair<_T1, _T2>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
In file included from /usr/local/include/c++/4.9.0/iosfwd:40:0,
                 from /usr/local/include/c++/4.9.0/ios:38,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/postypes.h:216:5: note: template<class _StateT> bool std::operator==(const std::fpos<_StateT>&, const std::fpos<_StateT>&)
     operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
     ^
/usr/local/include/c++/4.9.0/bits/postypes.h:216:5: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/c++/4.9.0/bits/stl_algobase.h:64:0,
                 from /usr/local/include/c++/4.9.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/4.9.0/ios:40,
                 from /usr/local/include/c++/4.9.0/ostream:38,
                 from /usr/local/include/c++/4.9.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:24: note:   'const IpAddress' is not derived from 'const std::fpos<_StateT>'
     { return __x.first == __y.first && __x.second == __y.second; }
                        ^
/usr/local/include/c++/4.9.0/bits/stl_pair.h:215:66: error: body of constexpr function 'constexpr bool std::operator==(const std::pair<_T1, _T2>&, const std::pair<_T1, _T2>&) [with _T1 = IpAddress; _T2 = IpAddress]' not a return-statement
     { return __x.first == __y.first && __x.second == __y.second; }
                                                                  ^
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: error: no matching function for call to 'hash_value(const IpAddress&)'
             return hash_value(val);
                                  ^
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note: candidates are:
In file included from /usr/local/include/boost/functional/hash.hpp:6:0,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/hash.hpp:256:57: note: template<class T> typename boost::hash_detail::basic_numbers<T>::type boost::hash_value(T)
     typename boost::hash_detail::basic_numbers<T>::type hash_value(T v)
                                                         ^
/usr/local/include/boost/functional/hash/hash.hpp:256:57: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/hash.hpp: In substitution of 'template<class T> typename boost::hash_detail::basic_numbers<T>::type boost::hash_value(T) [with T = IpAddress]':
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:256:57: error: no type named 'type' in 'struct boost::hash_detail::basic_numbers<IpAddress>'
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:262:56: note: template<class T> typename boost::hash_detail::long_numbers<T>::type boost::hash_value(T)
     typename boost::hash_detail::long_numbers<T>::type hash_value(T v)
                                                        ^
/usr/local/include/boost/functional/hash/hash.hpp:262:56: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/hash.hpp: In substitution of 'template<class T> typename boost::hash_detail::long_numbers<T>::type boost::hash_value(T) [with T = IpAddress]':
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:262:56: error: no type named 'type' in 'struct boost::hash_detail::long_numbers<IpAddress>'
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:268:57: note: template<class T> typename boost::hash_detail::ulong_numbers<T>::type boost::hash_value(T)
     typename boost::hash_detail::ulong_numbers<T>::type hash_value(T v)
                                                         ^
/usr/local/include/boost/functional/hash/hash.hpp:268:57: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/hash.hpp: In substitution of 'template<class T> typename boost::hash_detail::ulong_numbers<T>::type boost::hash_value(T) [with T = IpAddress]':
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:268:57: error: no type named 'type' in 'struct boost::hash_detail::ulong_numbers<IpAddress>'
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:275:9: note: template<class T> typename boost::enable_if<boost::is_enum<T>, long unsigned int>::type boost::hash_value(T)
         hash_value(T v)
         ^
/usr/local/include/boost/functional/hash/hash.hpp:275:9: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/hash.hpp: In substitution of 'template<class T> typename boost::enable_if<boost::is_enum<T>, long unsigned int>::type boost::hash_value(T) [with T = IpAddress]':
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:275:9: error: no type named 'type' in 'struct boost::enable_if<boost::is_enum<IpAddress>, long unsigned int>'
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:282:36: note: template<class T> std::size_t boost::hash_value(T* const&)
     template <class T> std::size_t hash_value(T* const& v)
                                    ^
/usr/local/include/boost/functional/hash/hash.hpp:282:36: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   mismatched types 'T* const' and 'const IpAddress'
             return hash_value(val);
                                  ^
In file included from /usr/local/include/boost/functional/hash.hpp:6:0,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/hash.hpp:370:24: note: template<class T, unsigned int N> std::size_t boost::hash_value(const T (&)[N])
     inline std::size_t hash_value(const T (&x)[N])
                        ^
/usr/local/include/boost/functional/hash/hash.hpp:370:24: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   mismatched types 'const T [N]' and 'const IpAddress'
             return hash_value(val);
                                  ^
In file included from /usr/local/include/boost/functional/hash.hpp:6:0,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/hash.hpp:376:24: note: template<class T, unsigned int N> std::size_t boost::hash_value(T (&)[N])
     inline std::size_t hash_value(T (&x)[N])
                        ^
/usr/local/include/boost/functional/hash/hash.hpp:376:24: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   mismatched types 'T [N]' and 'const IpAddress'
             return hash_value(val);
                                  ^
In file included from /usr/local/include/boost/functional/hash.hpp:6:0,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/hash.hpp:383:24: note: template<class Ch, class A> std::size_t boost::hash_value(const std::basic_string<Ch, std::char_traits<_CharT>, A>&)
     inline std::size_t hash_value(
                        ^
/usr/local/include/boost/functional/hash/hash.hpp:383:24: note:   template argument deduction/substitution failed:
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::basic_string<Ch, std::char_traits<_CharT>, A>'
             return hash_value(val);
                                  ^
In file included from /usr/local/include/boost/functional/hash.hpp:6:0,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/hash.hpp:390:57: note: template<class T> typename boost::hash_detail::float_numbers<T>::type boost::hash_value(T)
     typename boost::hash_detail::float_numbers<T>::type hash_value(T v)
                                                         ^
/usr/local/include/boost/functional/hash/hash.hpp:390:57: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/hash.hpp: In substitution of 'template<class T> typename boost::hash_detail::float_numbers<T>::type boost::hash_value(T) [with T = IpAddress]':
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:390:57: error: no type named 'type' in 'struct boost::hash_detail::float_numbers<IpAddress>'
/usr/local/include/boost/functional/hash/extensions.hpp: In instantiation of 'std::size_t boost::hash<T>::operator()(const T&) const [with T = IpAddress; std::size_t = long unsigned int]':
/usr/local/include/boost/functional/hash/hash.hpp:313:68:   required from 'void boost::hash_combine(std::size_t&, const T&) [with T = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:70:42:   required from 'std::size_t boost::hash_value(const std::pair<_T1, _T2>&) [with A = IpAddress; B = IpAddress; std::size_t = long unsigned int]'
/usr/local/include/boost/functional/hash/extensions.hpp:262:34:   required from 'std::size_t boost::hash<T>::operator()(const T&) const [with T = std::pair<IpAddress, IpAddress>; std::size_t = long unsigned int]'
/usr/local/include/boost/unordered/detail/buckets.hpp:620:29:   required from 'static SizeT boost::unordered::detail::mix64_policy<SizeT>::apply_hash(const Hash&, const T&) [with Hash = boost::hash<std::pair<IpAddress, IpAddress> >; T = std::pair<IpAddress, IpAddress>; SizeT = long unsigned int]'
/usr/local/include/boost/unordered/detail/table.hpp:762:63:   required from 'std::size_t boost::unordered::detail::table<Types>::hash(const key_type&) const [with Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:407:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace_impl(const key_type&, Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::key_type = std::pair<IpAddress, IpAddress>]'
/usr/local/include/boost/unordered/detail/unique.hpp:386:48:   required from 'boost::unordered::detail::table_impl<Types>::emplace_return boost::unordered::detail::table_impl<Types>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; Types = boost::unordered::detail::set<std::allocator<std::pair<IpAddress, IpAddress> >, std::pair<IpAddress, IpAddress>, boost::hash<std::pair<IpAddress, IpAddress> >, std::equal_to<std::pair<IpAddress, IpAddress> > >; boost::unordered::detail::table_impl<Types>::emplace_return = std::pair<boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >, bool>; typename boost::unordered::detail::table<Types>::iterator = boost::unordered::iterator_detail::iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> > >]'
/usr/local/include/boost/unordered/unordered_set.hpp:239:64:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::emplace(Args&& ...) [with Args = {std::pair<IpAddress, IpAddress>}; T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>]'
/usr/local/include/boost/unordered/unordered_set.hpp:388:48:   required from 'std::pair<typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator, bool> boost::unordered::unordered_set<T, H, P, A>::insert(boost::unordered::unordered_set<T, H, P, A>::value_type&&) [with T = std::pair<IpAddress, IpAddress>; H = boost::hash<std::pair<IpAddress, IpAddress> >; P = std::equal_to<std::pair<IpAddress, IpAddress> >; A = std::allocator<std::pair<IpAddress, IpAddress> >; typename boost::unordered::detail::set<A, T, H, P>::table::c_iterator = boost::unordered::iterator_detail::c_iterator<boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >, const boost::unordered::detail::ptr_node<std::pair<IpAddress, IpAddress> >*>; boost::unordered::unordered_set<T, H, P, A>::value_type = std::pair<IpAddress, IpAddress>]'
main.cpp:76:37:   required from here
/usr/local/include/boost/functional/hash/hash.hpp:396:24: note: std::size_t boost::hash_value(std::type_index)
     inline std::size_t hash_value(std::type_index v)
                        ^
/usr/local/include/boost/functional/hash/hash.hpp:396:24: note:   no known conversion for argument 1 from 'const IpAddress' to 'std::type_index'
In file included from /usr/local/include/boost/functional/hash/hash.hpp:558:0,
                 from /usr/local/include/boost/functional/hash.hpp:6,
                 from /usr/local/include/boost/unordered/unordered_set.hpp:21,
                 from /usr/local/include/boost/unordered_set.hpp:17,
                 from main.cpp:5:
/usr/local/include/boost/functional/hash/extensions.hpp:67:17: note: template<class A, class B> std::size_t boost::hash_value(const std::pair<_T1, _T2>&)
     std::size_t hash_value(std::pair<A, B> const& v)
                 ^
/usr/local/include/boost/functional/hash/extensions.hpp:67:17: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::pair<_T1, _T2>'
             return hash_value(val);
                                  ^
/usr/local/include/boost/functional/hash/extensions.hpp:76:17: note: template<class T, class A> std::size_t boost::hash_value(const std::vector<_Tp, _Alloc>&)
     std::size_t hash_value(std::vector<T, A> const& v)
                 ^
/usr/local/include/boost/functional/hash/extensions.hpp:76:17: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::vector<_Tp, _Alloc>'
             return hash_value(val);
                                  ^
/usr/local/include/boost/functional/hash/extensions.hpp:82:17: note: template<class T, class A> std::size_t boost::hash_value(const std::list<_Tp, _Alloc>&)
     std::size_t hash_value(std::list<T, A> const& v)
                 ^
/usr/local/include/boost/functional/hash/extensions.hpp:82:17: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::list<_Tp, _Alloc>'
             return hash_value(val);
                                  ^
/usr/local/include/boost/functional/hash/extensions.hpp:88:17: note: template<class T, class A> std::size_t boost::hash_value(const std::deque<_Tp, _Alloc>&)
     std::size_t hash_value(std::deque<T, A> const& v)
                 ^
/usr/local/include/boost/functional/hash/extensions.hpp:88:17: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::deque<_Tp, _Alloc>'
             return hash_value(val);
                                  ^
/usr/local/include/boost/functional/hash/extensions.hpp:94:17: note: template<class K, class C, class A> std::size_t boost::hash_value(const std::set<_Key, _Compare, _Alloc>&)
     std::size_t hash_value(std::set<K, C, A> const& v)
                 ^
/usr/local/include/boost/functional/hash/extensions.hpp:94:17: note:   template argument deduction/substitution failed:
/usr/local/include/boost/functional/hash/extensions.hpp:262:34: note:   'const IpAddress' is not derived from 'const std::set<_Key, _Compare, _Alloc>'
  