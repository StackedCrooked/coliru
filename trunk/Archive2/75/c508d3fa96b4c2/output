main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
main.cpp:39:58:   required from here
main.cpp:24:10: error: no matching function for call to 'accumulate(std::tuple<int, double>, bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:2, auto:3)>)'
         });
          ^
main.cpp:24:10: note: candidates are:
In file included from /usr/local/include/boost/fusion/include/accumulate.hpp:11:0,
                 from main.cpp:9:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F)
     accumulate(Sequence& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F) [with Sequence = std::tuple<int, double>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
main.cpp:39:58:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<int, double> >, boost::fusion::result_of::accumulate<std::tuple<int, double>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:2, auto:3)> > >'
main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
main.cpp:39:58:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F)
     accumulate(Sequence const& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F) [with Sequence = std::tuple<int, double>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
main.cpp:39:58:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<int, double> >, boost::fusion::result_of::accumulate<const std::tuple<int, double>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:2, auto:3)> > >'
In file included from /usr/local/include/c++/4.9.0/algorithm:62:0,
                 from main.cpp:7:
/usr/local/include/c++/4.9.0/bits/stl_algo.h: In instantiation of '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]::<lambda(auto:1)>]':
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}]'
main.cpp:39:58:   required from here
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21: error: could not convert '__pred.dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {int, double}](std::vector<std::type_index>((*(const std::vector<std::type_index>*)__first.__gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >())))' from 'void' to 'bool'
  if (__pred(*__first))
                     ^
main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
main.cpp:40:85:   required from here
main.cpp:24:10: error: no matching function for call to 'accumulate(std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float>, bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:2, auto:3)>)'
         });
          ^
main.cpp:24:10: note: candidates are:
In file included from /usr/local/include/boost/fusion/include/accumulate.hpp:11:0,
                 from main.cpp:9:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F)
     accumulate(Sequence& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F) [with Sequence = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
main.cpp:40:85:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float> >, boost::fusion::result_of::accumulate<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:2, auto:3)> > >'
main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
main.cpp:40:85:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F)
     accumulate(Sequence const& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F) [with Sequence = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
main.cpp:40:85:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float> >, boost::fusion::result_of::accumulate<const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:2, auto:3)> > >'
In file included from /usr/local/include/c++/4.9.0/algorithm:62:0,
                 from main.cpp:7:
/usr/local/include/c++/4.9.0/bits/stl_algo.h: In instantiation of '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]::<lambda(auto:1)>]':
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}]'
main.cpp:40:85:   required from here
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21: error: could not convert '__pred.dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float}](std::vector<std::type_index>((*(const std::vector<std::type_index>*)__first.__gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >())))' from 'void' to 'bool'
  if (__pred(*__first))
                     ^
main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
main.cpp:41:115:   required from here
main.cpp:24:10: error: no matching function for call to 'accumulate(std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*>, bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:2, auto:3)>)'
         });
          ^
main.cpp:24:10: note: candidates are:
In file included from /usr/local/include/boost/fusion/include/accumulate.hpp:11:0,
                 from main.cpp:9:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F)
     accumulate(Sequence& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<Sequence, const State, F> >::type boost::fusion::accumulate(Sequence&, const State&, F) [with Sequence = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
main.cpp:41:115:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:36:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*> >, boost::fusion::result_of::accumulate<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:2, auto:3)> > >'
main.cpp: In instantiation of 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]':
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
main.cpp:41:115:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note: template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F)
     accumulate(Sequence const& seq, State const& state, F f)
     ^
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp: In substitution of 'template<class Sequence, class State, class F> typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::accumulate<const Sequence, const State, F> >::type boost::fusion::accumulate(const Sequence&, const State&, F) [with Sequence = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*>; State = bool; F = dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:2, auto:3)>]':
main.cpp:24:10:   required from 'dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21:   required from '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:1)>]'
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
main.cpp:41:115:   required from here
/usr/local/include/boost/fusion/algorithm/iteration/accumulate.hpp:49:5: error: no type named 'type' in 'struct boost::lazy_enable_if<boost::fusion::traits::is_sequence<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*> >, boost::fusion::result_of::accumulate<const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*>, const bool, dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:2, auto:3)> > >'
In file included from /usr/local/include/c++/4.9.0/algorithm:62:0,
                 from main.cpp:7:
/usr/local/include/c++/4.9.0/bits/stl_algo.h: In instantiation of '_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; _OIter = std::back_insert_iterator<std::vector<std::vector<std::type_index> > >; _Predicate = dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]::<lambda(auto:1)>]':
main.cpp:25:6:   required from 'Iterator dispatch(Iterator, Iterator, Args ...) [with Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}]'
main.cpp:41:115:   required from here
/usr/local/include/c++/4.9.0/bits/stl_algo.h:746:21: error: could not convert '__pred.dispatch(Iterator, Iterator, Args ...)::<lambda(auto:1)> [with auto:1 = std::vector<std::type_index>; Iterator = __gnu_cxx::__normal_iterator<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >; Args = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, float, const char*}](std::vector<std::type_index>((*(const std::vector<std::type_index>*)__first.__gnu_cxx::__normal_iterator<_Iterator, _Container>::operator*<std::vector<std::type_index>*, std::vector<std::vector<std::type_index> > >())))' from 'void' to 'bool'
  if (__pred(*__first))
                     ^
