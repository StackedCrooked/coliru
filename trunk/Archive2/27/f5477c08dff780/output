	.file	"main.cpp"
	.intel_syntax noprefix
	.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"axG",@progbits,std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy(),comdat
	.align 2
	.p2align 4,,15
	.weak	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
	.type	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy(), @function
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy():
.LFB2127:
	.cfi_startproc
	test	rdi, rdi
	je	.L1
	mov	rax, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rax+8]
	jmp	rax
	.p2align 4,,10
	.p2align 3
.L1:
	rep; ret
	.cfi_endproc
.LFE2127:
	.size	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy(), .-std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
	.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev,"axG",@progbits,_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED5Ev,comdat
	.align 2
	.p2align 4,,15
	.weak	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.type	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(), @function
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base():
.LFB2160:
	.cfi_startproc
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>+16
	ret
	.cfi_endproc
.LFE2160:
	.size	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(), .-std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.weak	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.set	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(),std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.text
	.align 2
	.p2align 4,,15
	.type	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace(), @function
std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace():
.LFB2291:
	.cfi_startproc
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>+16
	ret
	.cfi_endproc
.LFE2291:
	.size	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace(), .-std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
	.set	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace(),std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
	.align 2
	.p2align 4,,15
	.type	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose(), @function
std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose():
.LFB2294:
	.cfi_startproc
	mov	rdi, QWORD PTR [rdi+16]
	mov	rax, QWORD PTR [rdi]
	mov	rax, QWORD PTR [rax]
	jmp	rax
	.cfi_endproc
.LFE2294:
	.size	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose(), .-std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
	.align 2
	.p2align 4,,15
	.type	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace(), @function
std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace():
.LFB2293:
	.cfi_startproc
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>+16
	jmp	operator delete(void*)
	.cfi_endproc
.LFE2293:
	.size	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace(), .-std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
	.align 2
	.p2align 4,,15
	.type	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy(), @function
std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy():
.LFB2295:
	.cfi_startproc
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>+16
	jmp	operator delete(void*)
	.cfi_endproc
.LFE2295:
	.size	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy(), .-std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
	.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev,"axG",@progbits,std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(),comdat
	.align 2
	.p2align 4,,15
	.weak	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.type	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(), @function
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base():
.LFB2162:
	.cfi_startproc
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>+16
	jmp	operator delete(void*)
	.cfi_endproc
.LFE2162:
	.size	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base(), .-std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"a"
	.text
	.align 2
	.p2align 4,,15
	.type	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::_M_run(), @function
std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::_M_run():
.LFB2297:
	.cfi_startproc
	mov	esi, OFFSET FLAT:.LC0
	mov	edi, 1
	xor	eax, eax
	jmp	__printf_chk
	.cfi_endproc
.LFE2297:
	.size	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::_M_run(), .-std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::_M_run()
	.align 2
	.p2align 4,,15
	.type	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&), @function
std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&):
.LFB2296:
	.cfi_startproc
	mov	rsi, QWORD PTR [rsi+8]
	mov	r8, rdi
	cmp	rsi, OFFSET FLAT:typeinfo name for std::_Sp_make_shared_tag
	je	.L12
	xor	eax, eax
	cmp	BYTE PTR [rsi], 42
	je	.L19
	mov	edi, OFFSET FLAT:typeinfo name for std::_Sp_make_shared_tag
	mov	ecx, 24
	repz cmpsb
	je	.L12
.L19:
	rep; ret
	.p2align 4,,10
	.p2align 3
.L12:
	lea	rax, [r8+24]
	ret
	.cfi_endproc
.LFE2296:
	.size	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&), .-std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
	.section	.text._ZNSt6thread10_Impl_baseD2Ev,"axG",@progbits,_ZNSt6thread10_Impl_baseD5Ev,comdat
	.align 2
	.p2align 4,,15
	.weak	std::thread::_Impl_base::~_Impl_base()
	.type	std::thread::_Impl_base::~_Impl_base(), @function
std::thread::_Impl_base::~_Impl_base():
.LFB1937:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	sub	rsp, 8
	.cfi_def_cfa_offset 32
	mov	rbx, QWORD PTR [rdi+16]
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::thread::_Impl_base+16
	test	rbx, rbx
	je	.L22
	mov	ebp, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rbx+8]
	test	rbp, rbp
	je	.L25
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L26:
	cmp	eax, 1
	je	.L31
.L22:
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L31:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	call	[QWORD PTR [rax+16]]
	test	rbp, rbp
	lea	rax, [rbx+12]
	je	.L28
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L29:
	cmp	eax, 1
	jne	.L22
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	mov	rax, QWORD PTR [rax+24]
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	jmp	rax
.L25:
	.cfi_restore_state
	mov	eax, DWORD PTR [rbx+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+8], edx
	jmp	.L26
.L28:
	mov	eax, DWORD PTR [rbx+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+12], edx
	jmp	.L29
	.cfi_endproc
.LFE1937:
	.size	std::thread::_Impl_base::~_Impl_base(), .-std::thread::_Impl_base::~_Impl_base()
	.weak	std::thread::_Impl_base::~_Impl_base()
	.set	std::thread::_Impl_base::~_Impl_base(),std::thread::_Impl_base::~_Impl_base()
	.text
	.align 2
	.p2align 4,,15
	.type	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl(), @function
std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl():
.LFB2271:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	sub	rsp, 8
	.cfi_def_cfa_offset 32
	mov	rbx, QWORD PTR [rdi+16]
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::thread::_Impl_base+16
	test	rbx, rbx
	je	.L32
	mov	ebp, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rbx+8]
	test	rbp, rbp
	je	.L35
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L36:
	cmp	eax, 1
	je	.L41
.L32:
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L41:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	call	[QWORD PTR [rax+16]]
	test	rbp, rbp
	lea	rax, [rbx+12]
	je	.L38
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L39:
	cmp	eax, 1
	jne	.L32
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	mov	rax, QWORD PTR [rax+24]
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	jmp	rax
.L35:
	.cfi_restore_state
	mov	eax, DWORD PTR [rbx+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+8], edx
	jmp	.L36
.L38:
	mov	eax, DWORD PTR [rbx+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+12], edx
	jmp	.L39
	.cfi_endproc
.LFE2271:
	.size	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl(), .-std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl()
	.set	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl(),std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl()
	.section	.text._ZNSt6thread10_Impl_baseD0Ev,"axG",@progbits,std::thread::_Impl_base::~_Impl_base(),comdat
	.align 2
	.p2align 4,,15
	.weak	std::thread::_Impl_base::~_Impl_base()
	.type	std::thread::_Impl_base::~_Impl_base(), @function
std::thread::_Impl_base::~_Impl_base():
.LFB1939:
	.cfi_startproc
	push	r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	push	rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	push	rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	mov	rbp, QWORD PTR [rdi+16]
	mov	rbx, rdi
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::thread::_Impl_base+16
	test	rbp, rbp
	je	.L44
	mov	r12d, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rbp+8]
	test	r12, r12
	je	.L45
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L46:
	cmp	eax, 1
	je	.L51
.L44:
	mov	rdi, rbx
	pop	rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbp
	.cfi_def_cfa_offset 16
	pop	r12
	.cfi_def_cfa_offset 8
	jmp	operator delete(void*)
	.p2align 4,,10
	.p2align 3
.L51:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbp+0]
	mov	rdi, rbp
	call	[QWORD PTR [rax+16]]
	test	r12, r12
	lea	rax, [rbp+12]
	je	.L48
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L49:
	cmp	eax, 1
	jne	.L44
	mov	rax, QWORD PTR [rbp+0]
	mov	rdi, rbp
	call	[QWORD PTR [rax+24]]
	jmp	.L44
.L45:
	mov	eax, DWORD PTR [rbp+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbp+8], edx
	jmp	.L46
.L48:
	mov	eax, DWORD PTR [rbp+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbp+12], edx
	jmp	.L49
	.cfi_endproc
.LFE1939:
	.size	std::thread::_Impl_base::~_Impl_base(), .-std::thread::_Impl_base::~_Impl_base()
	.text
	.align 2
	.p2align 4,,15
	.type	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl(), @function
std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl():
.LFB2273:
	.cfi_startproc
	push	r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	push	rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	push	rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	mov	rbp, QWORD PTR [rdi+16]
	mov	rbx, rdi
	mov	QWORD PTR [rdi], OFFSET FLAT:vtable for std::thread::_Impl_base+16
	test	rbp, rbp
	je	.L54
	mov	r12d, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rbp+8]
	test	r12, r12
	je	.L55
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L56:
	cmp	eax, 1
	je	.L61
.L54:
	mov	rdi, rbx
	pop	rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbp
	.cfi_def_cfa_offset 16
	pop	r12
	.cfi_def_cfa_offset 8
	jmp	operator delete(void*)
	.p2align 4,,10
	.p2align 3
.L61:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbp+0]
	mov	rdi, rbp
	call	[QWORD PTR [rax+16]]
	test	r12, r12
	lea	rax, [rbp+12]
	je	.L58
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L59:
	cmp	eax, 1
	jne	.L54
	mov	rax, QWORD PTR [rbp+0]
	mov	rdi, rbp
	call	[QWORD PTR [rax+24]]
	jmp	.L54
.L55:
	mov	eax, DWORD PTR [rbp+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbp+8], edx
	jmp	.L56
.L58:
	mov	eax, DWORD PTR [rbp+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbp+12], edx
	jmp	.L59
	.cfi_endproc
.LFE2273:
	.size	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl(), .-std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl()
	.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv,"axG",@progbits,std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(),comdat
	.align 2
	.p2align 4,,15
	.weak	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
	.type	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(), @function
std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release():
.LFB2070:
	.cfi_startproc
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	ebp, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rdi+8]
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	mov	rbx, rdi
	sub	rsp, 8
	.cfi_def_cfa_offset 32
	test	rbp, rbp
	je	.L63
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L64:
	cmp	eax, 1
	je	.L71
.L62:
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L71:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	call	[QWORD PTR [rax+16]]
	test	rbp, rbp
	lea	rax, [rbx+12]
	je	.L67
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L68:
	cmp	eax, 1
	jne	.L62
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	mov	rax, QWORD PTR [rax+24]
	add	rsp, 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	jmp	rax
.L63:
	.cfi_restore_state
	mov	eax, DWORD PTR [rdi+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rdi+8], edx
	jmp	.L64
.L67:
	mov	eax, DWORD PTR [rbx+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+12], edx
	jmp	.L68
	.cfi_endproc
.LFE2070:
	.size	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release(), .-std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
	.text
	.align 2
	.p2align 4,,15
	.type	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&), @function
std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&):
.LFB2026:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA2026
	push	rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	mov	rbp, rdi
	push	rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	sub	rsp, 24
	.cfi_def_cfa_offset 48
	mov	QWORD PTR [rdi], 0
	mov	edi, 56
.LEHB0:
	call	operator new(unsigned long)
.LEHE0:
	test	rax, rax
	mov	rbx, rax
	je	.L82
	mov	DWORD PTR [rax+8], 1
	mov	DWORD PTR [rax+12], 1
	lea	rax, [rax+24]
	mov	QWORD PTR [rax-24], OFFSET FLAT:vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>+16
	mov	QWORD PTR [rax+24], 0
	mov	esi, OFFSET FLAT:typeinfo for std::_Sp_make_shared_tag
	mov	QWORD PTR [rbx+16], rax
	mov	QWORD PTR [rbx+32], 0
	mov	rdi, rbx
	mov	QWORD PTR [rbx+40], 0
	mov	QWORD PTR [rbx+24], OFFSET FLAT:vtable for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >+16
	call	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
.L73:
	mov	rsi, rsp
	mov	rdi, rbp
	mov	QWORD PTR [rsp], rax
	mov	QWORD PTR [rsp+8], rbx
.LEHB1:
	call	std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)
.LEHE1:
	mov	rbx, QWORD PTR [rsp+8]
	test	rbx, rbx
	je	.L72
	mov	ebp, OFFSET FLAT:__gthrw___pthread_key_create(unsigned int*, void (*)(void*))
	lea	rax, [rbx+8]
	test	rbp, rbp
	je	.L75
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L76:
	cmp	eax, 1
	je	.L91
.L72:
	add	rsp, 24
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	pop	rbx
	.cfi_def_cfa_offset 16
	pop	rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L91:
	.cfi_restore_state
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	call	[QWORD PTR [rax+16]]
	test	rbp, rbp
	lea	rax, [rbx+12]
	je	.L77
	mov	edx, -1
	lock xadd	DWORD PTR [rax], edx
	mov	eax, edx
.L78:
	cmp	eax, 1
	jne	.L72
	mov	rax, QWORD PTR [rbx]
	mov	rdi, rbx
	call	[QWORD PTR [rax+24]]
	jmp	.L72
	.p2align 4,,10
	.p2align 3
.L82:
	xor	eax, eax
	jmp	.L73
.L75:
	mov	eax, DWORD PTR [rbx+8]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+8], edx
	jmp	.L76
.L77:
	mov	eax, DWORD PTR [rbx+12]
	lea	edx, [rax-1]
	mov	DWORD PTR [rbx+12], edx
	jmp	.L78
.L83:
	mov	rdi, QWORD PTR [rsp+8]
	mov	rbx, rax
	test	rdi, rdi
	je	.L81
	call	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
.L81:
	mov	rdi, rbx
.LEHB2:
	call	_Unwind_Resume
.LEHE2:
	.cfi_endproc
.LFE2026:
	.globl	__gxx_personality_v0
	.section	.gcc_except_table,"a",@progbits
.LLSDA2026:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2026-.LLSDACSB2026
.LLSDACSB2026:
	.uleb128 .LEHB0-.LFB2026
	.uleb128 .LEHE0-.LEHB0
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB1-.LFB2026
	.uleb128 .LEHE1-.LEHB1
	.uleb128 .L83-.LFB2026
	.uleb128 0
	.uleb128 .LEHB2-.LFB2026
	.uleb128 .LEHE2-.LEHB2
	.uleb128 0
	.uleb128 0
.LLSDACSE2026:
	.text
	.size	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&), .-std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&)
	.set	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&),std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&)
	.section	.text.startup,"ax",@progbits
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
.LFB1951:
	.cfi_startproc
	.cfi_personality 0x3,__gxx_personality_v0
	.cfi_lsda 0x3,.LLSDA1951
	sub	rsp, 72
	.cfi_def_cfa_offset 80
	lea	rdi, [rsp+16]
	lea	rsi, [rsp+15]
.LEHB3:
	call	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&)
.LEHE3:
	lea	rdi, [rsp+16]
.LEHB4:
	call	std::thread::join()
.LEHE4:
	cmp	QWORD PTR [rsp+16], 0
	jne	.L94
	lea	rdi, [rsp+32]
	lea	rsi, [rsp+15]
.LEHB5:
	call	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&)
.LEHE5:
	lea	rdi, [rsp+32]
.LEHB6:
	call	std::thread::join()
.LEHE6:
	cmp	QWORD PTR [rsp+32], 0
	jne	.L94
	lea	rdi, [rsp+48]
	lea	rsi, [rsp+15]
.LEHB7:
	call	std::thread::thread<main::{lambda()#1}&>(main::{lambda()#1}&)
.LEHE7:
	lea	rdi, [rsp+48]
.LEHB8:
	call	std::thread::join()
.LEHE8:
	cmp	QWORD PTR [rsp+48], 0
	jne	.L94
	xor	eax, eax
	add	rsp, 72
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
.L105:
	.cfi_restore_state
	cmp	QWORD PTR [rsp+48], 0
	je	.L109
.L94:
	call	std::terminate()
.L103:
	cmp	QWORD PTR [rsp+16], 0
	jne	.L94
.L109:
	mov	rdi, rax
.LEHB9:
	call	_Unwind_Resume
.LEHE9:
.L104:
	cmp	QWORD PTR [rsp+32], 0
	je	.L109
	jmp	.L94
	.cfi_endproc
.LFE1951:
	.section	.gcc_except_table
.LLSDA1951:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1951-.LLSDACSB1951
.LLSDACSB1951:
	.uleb128 .LEHB3-.LFB1951
	.uleb128 .LEHE3-.LEHB3
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB4-.LFB1951
	.uleb128 .LEHE4-.LEHB4
	.uleb128 .L103-.LFB1951
	.uleb128 0
	.uleb128 .LEHB5-.LFB1951
	.uleb128 .LEHE5-.LEHB5
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB6-.LFB1951
	.uleb128 .LEHE6-.LEHB6
	.uleb128 .L104-.LFB1951
	.uleb128 0
	.uleb128 .LEHB7-.LFB1951
	.uleb128 .LEHE7-.LEHB7
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB8-.LFB1951
	.uleb128 .LEHE8-.LEHB8
	.uleb128 .L105-.LFB1951
	.uleb128 0
	.uleb128 .LEHB9-.LFB1951
	.uleb128 .LEHE9-.LEHB9
	.uleb128 0
	.uleb128 0
.LLSDACSE1951:
	.section	.text.startup
	.size	main, .-main
	.weak	typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
	.section	.rodata._ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>,comdat
	.align 16
	.type	typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>, 16
typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>:
	.quad	vtable for __cxxabiv1::__class_type_info+16
	.quad	typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
	.weak	typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
	.section	.rodata._ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>,comdat
	.align 32
	.type	typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>, 47
typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>:
	.string	"St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE"
	.section	.rodata
	.align 32
	.type	typeinfo name for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, @object
	.size	typeinfo name for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, 54
typeinfo name for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >:
	.string	"*NSt6thread5_ImplISt12_Bind_simpleIFZ4mainEUlvE_vEEEE"
	.align 32
	.type	typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, 119
typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>:
	.string	"*St23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZ4mainEUlvE_vEEEESaIS6_ELN9__gnu_cxx12_Lock_policyE2EE"
	.align 16
	.type	typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, 24
typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>:
	.quad	vtable for __cxxabiv1::__si_class_type_info+16
	.quad	typeinfo name for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
	.quad	typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.align 16
	.type	typeinfo for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, @object
	.size	typeinfo for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, 24
typeinfo for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >:
	.quad	vtable for __cxxabiv1::__si_class_type_info+16
	.quad	typeinfo name for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >
	.quad	typeinfo for std::thread::_Impl_base
	.weak	typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.section	.rodata._ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>,comdat
	.align 16
	.type	typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, 24
typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
	.quad	vtable for __cxxabiv1::__si_class_type_info+16
	.quad	typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.quad	typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
	.weak	typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.section	.rodata._ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>,comdat
	.align 32
	.type	typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, @object
	.size	typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, 52
typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
	.string	"St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE"
	.weak	typeinfo for std::thread::_Impl_base
	.section	.rodata._ZTINSt6thread10_Impl_baseE,"aG",@progbits,typeinfo for std::thread::_Impl_base,comdat
	.align 16
	.type	typeinfo for std::thread::_Impl_base, @object
	.size	typeinfo for std::thread::_Impl_base, 16
typeinfo for std::thread::_Impl_base:
	.quad	vtable for __cxxabiv1::__class_type_info+16
	.quad	typeinfo name for std::thread::_Impl_base
	.weak	typeinfo name for std::thread::_Impl_base
	.section	.rodata._ZTSNSt6thread10_Impl_baseE,"aG",@progbits,typeinfo name for std::thread::_Impl_base,comdat
	.align 16
	.type	typeinfo name for std::thread::_Impl_base, @object
	.size	typeinfo name for std::thread::_Impl_base, 24
typeinfo name for std::thread::_Impl_base:
	.string	"NSt6thread10_Impl_baseE"
	.weak	typeinfo for std::_Sp_make_shared_tag
	.section	.rodata._ZTISt19_Sp_make_shared_tag,"aG",@progbits,typeinfo for std::_Sp_make_shared_tag,comdat
	.align 16
	.type	typeinfo for std::_Sp_make_shared_tag, @object
	.size	typeinfo for std::_Sp_make_shared_tag, 16
typeinfo for std::_Sp_make_shared_tag:
	.quad	vtable for __cxxabiv1::__class_type_info+16
	.quad	typeinfo name for std::_Sp_make_shared_tag
	.weak	typeinfo name for std::_Sp_make_shared_tag
	.section	.rodata._ZTSSt19_Sp_make_shared_tag,"aG",@progbits,typeinfo name for std::_Sp_make_shared_tag,comdat
	.align 16
	.type	typeinfo name for std::_Sp_make_shared_tag, @object
	.size	typeinfo name for std::_Sp_make_shared_tag, 24
typeinfo name for std::_Sp_make_shared_tag:
	.string	"St19_Sp_make_shared_tag"
	.weak	vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.section	.rodata._ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>,comdat
	.align 32
	.type	vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, @object
	.size	vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>, 56
vtable for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>:
	.quad	0
	.quad	typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
	.quad	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.quad	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
	.quad	__cxa_pure_virtual
	.quad	std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
	.quad	__cxa_pure_virtual
	.weak	vtable for std::thread::_Impl_base
	.section	.rodata._ZTVNSt6thread10_Impl_baseE,"aG",@progbits,vtable for std::thread::_Impl_base,comdat
	.align 32
	.type	vtable for std::thread::_Impl_base, @object
	.size	vtable for std::thread::_Impl_base, 40
vtable for std::thread::_Impl_base:
	.quad	0
	.quad	typeinfo for std::thread::_Impl_base
	.quad	std::thread::_Impl_base::~_Impl_base()
	.quad	std::thread::_Impl_base::~_Impl_base()
	.quad	__cxa_pure_virtual
	.section	.rodata
	.align 32
	.type	vtable for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, @object
	.size	vtable for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, 40
vtable for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >:
	.quad	0
	.quad	typeinfo for std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >
	.quad	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl()
	.quad	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::~_Impl()
	.quad	std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >::_M_run()
	.align 32
	.type	vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, @object
	.size	vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>, 56
vtable for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>:
	.quad	0
	.quad	typeinfo for std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>
	.quad	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
	.quad	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
	.quad	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
	.quad	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
	.quad	std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<main::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<main::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
	.weakref	__gthrw___pthread_key_create(unsigned int*, void (*)(void*)),__pthread_key_create
	.ident	"GCC: (Ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1"
	.section	.note.GNU-stack,"",@progbits
