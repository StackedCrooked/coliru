; ModuleID = 'main.cpp'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.Value = type { i32 (...)**, i64 }
%class.X = type { %class.Value }

@vtable for X = linkonce_odr unnamed_addr constant [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @typeinfo for X to i8*), i8* bitcast (void (%class.X*)* @X::~X() to i8*), i8* bitcast (void (%class.X*)* @X::~X() to i8*)]
@vtable for __cxxabiv1::__si_class_type_info = external global i8*
@typeinfo name for X = linkonce_odr constant [3 x i8] c"1X\00"
@vtable for __cxxabiv1::__class_type_info = external global i8*
@typeinfo name for Value = linkonce_odr constant [7 x i8] c"5Value\00"
@typeinfo for Value = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8** @vtable for __cxxabiv1::__class_type_info, i64 2) to i8*), i8* getelementptr inbounds ([7 x i8]* @typeinfo name for Value, i32 0, i32 0) }
@typeinfo for X = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8** @vtable for __cxxabiv1::__si_class_type_info, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8]* @typeinfo name for X, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @typeinfo for Value to i8*) }
@vtable for Value = linkonce_odr unnamed_addr constant [4 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @typeinfo for Value to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)]

@Value::~Value() = alias void (%class.Value*)* @Value::~Value()

; Function Attrs: nounwind uwtable
define void @Value::~Value()(%class.Value* %this) unnamed_addr #0 align 2 {
  %1 = alloca %class.Value*, align 8
  store %class.Value* %this, %class.Value** %1, align 8
  %2 = load %class.Value** %1
  ret void
}

; Function Attrs: nounwind uwtable
define void @Value::~Value()(%class.Value* %this) unnamed_addr #0 align 2 {
  %1 = alloca %class.Value*, align 8
  store %class.Value* %this, %class.Value** %1, align 8
  %2 = load %class.Value** %1
  call void @Value::~Value()(%class.Value* %2) #8
  %3 = bitcast %class.Value* %2 to i8*
  call void @operator delete(void*, unsigned long)(i8* %3, i64 16) #9
  ret void
}

; Function Attrs: nobuiltin nounwind uwtable
define linkonce void @operator delete(void*, unsigned long)(i8*, i64) #1 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  call void @operator delete(void*)(i8* %0)
  ret void
}

; Function Attrs: uwtable
define i32 @main() #2 {
  %1 = alloca i32, align 4
  %x = alloca %class.Value*, align 8
  store i32 0, i32* %1
  %2 = call noalias i8* @operator new(unsigned long)(i64 16) #10
  %3 = bitcast i8* %2 to %class.X*
  call void @X::X()(%class.X* %3) #8
  %4 = bitcast %class.X* %3 to %class.Value*
  store %class.Value* %4, %class.Value** %x, align 8
  %5 = load %class.Value** %x, align 8
  %6 = icmp eq %class.Value* %5, null
  br i1 %6, label %12, label %7

; <label>:7                                       ; preds = %0
  %8 = bitcast %class.Value* %5 to void (%class.Value*)***
  %9 = load void (%class.Value*)*** %8
  %10 = getelementptr inbounds void (%class.Value*)** %9, i64 1
  %11 = load void (%class.Value*)** %10
  call void %11(%class.Value* %5) #8
  br label %12

; <label>:12                                      ; preds = %7, %0
  ret i32 0
}

; Function Attrs: nobuiltin
declare noalias i8* @operator new(unsigned long)(i64) #3

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr void @X::X()(%class.X* %this) unnamed_addr #4 align 2 {
  %1 = alloca %class.X*, align 8
  store %class.X* %this, %class.X** %1, align 8
  %2 = load %class.X** %1
  %3 = bitcast %class.X* %2 to %class.Value*
  call void @Value::Value()(%class.Value* %3) #8
  %4 = bitcast %class.X* %2 to i8***
  store i8** getelementptr inbounds ([4 x i8*]* @vtable for X, i64 0, i64 2), i8*** %4
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr void @Value::Value()(%class.Value* %this) unnamed_addr #4 align 2 {
  %1 = alloca %class.Value*, align 8
  store %class.Value* %this, %class.Value** %1, align 8
  %2 = load %class.Value** %1
  %3 = bitcast %class.Value* %2 to i8***
  store i8** getelementptr inbounds ([4 x i8*]* @vtable for Value, i64 0, i64 2), i8*** %3
  ret void
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @X::~X()(%class.X* %this) unnamed_addr #0 align 2 {
  %1 = alloca %class.X*, align 8
  %2 = alloca i8*
  %3 = alloca i32
  store %class.X* %this, %class.X** %1, align 8
  %4 = load %class.X** %1
  %5 = bitcast %class.X* %4 to i8***
  store i8** getelementptr inbounds ([4 x i8*]* @vtable for X, i64 0, i64 2), i8*** %5
  invoke void @f()()
          to label %6 unwind label %8

; <label>:6                                       ; preds = %0
  %7 = bitcast %class.X* %4 to %class.Value*
  call void @Value::~Value()(%class.Value* %7) #8
  ret void

; <label>:8                                       ; preds = %0
  %9 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %10 = extractvalue { i8*, i32 } %9, 0
  store i8* %10, i8** %2
  %11 = extractvalue { i8*, i32 } %9, 1
  store i32 %11, i32* %3
  %12 = bitcast %class.X* %4 to %class.Value*
  call void @Value::~Value()(%class.Value* %12) #8
  br label %13

; <label>:13                                      ; preds = %8
  %14 = load i8** %2
  call void @__clang_call_terminate(i8* %14) #11
  unreachable
}

; Function Attrs: nounwind uwtable
define linkonce_odr void @X::~X()(%class.X* %this) unnamed_addr #0 align 2 {
  %1 = alloca %class.X*, align 8
  store %class.X* %this, %class.X** %1, align 8
  %2 = load %class.X** %1
  call void @X::~X()(%class.X* %2) #8
  %3 = bitcast %class.X* %2 to i8*
  call void @operator delete(void*, unsigned long)(i8* %3, i64 16) #9
  ret void
}

declare void @f()() #5

declare i32 @__gxx_personality_v0(...)

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #6 {
  %2 = call i8* @__cxa_begin_catch(i8* %0) #8
  call void @std::terminate()() #11
  unreachable
}

declare i8* @__cxa_begin_catch(i8*)

declare void @std::terminate()()

declare void @__cxa_pure_virtual()

; Function Attrs: nobuiltin nounwind
declare void @operator delete(void*)(i8*) #7

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline noreturn nounwind }
attributes #7 = { nobuiltin nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { builtin }
attributes #11 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5.0 (tags/RELEASE_350/final 217394)"}
