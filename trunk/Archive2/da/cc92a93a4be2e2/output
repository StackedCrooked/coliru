main.cpp:19:68: error: type/value mismatch at argument 1 in template parameter list for 'template<class _Tp> struct std::tuple_size'
 struct tuple_indices : indices<std::tuple_size<unqualified<T>::type>::value> { };
                                                                    ^
main.cpp:19:68: error:   expected a type, got 'unqualified<T>::type'
main.cpp:19:76: error: template argument 1 is invalid
 struct tuple_indices : indices<std::tuple_size<unqualified<T>::type>::value> { };
                                                                            ^
main.cpp: In function 'int main()':
main.cpp:34:24: error: expected ';' after struct definition
     struct make_error {} = awesome_tuple_cat( a, b );
                        ^
main.cpp:34:26: error: expected primary-expression before '=' token
     struct make_error {} = awesome_tuple_cat( a, b );
                          ^
In file included from /usr/include/c++/4.8/bits/stl_pair.h:59:0,
                 from /usr/include/c++/4.8/utility:70,
                 from main.cpp:1:
/usr/include/c++/4.8/bits/move.h: In instantiation of 'constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&&) [with _Tp = std::tuple<bool, char>&; typename std::remove_reference<_From>::type = std::tuple<bool, char>]':
main.cpp:28:134:   required from 'auto awesome_tuple_cat(Tuple0&&, Tuple1&&) [with Tuple0 = std::tuple<bool, char>&; Tuple1 = std::tuple<short int, int>&]'
main.cpp:34:52:   required from here
/usr/include/c++/4.8/bits/move.h:89:7: error: static assertion failed: template argument substituting _Tp is an lvalue reference type
       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
       ^
main.cpp: In instantiation of 'auto awesome_tuple_cat(Tuple0&&, Tuple1&&) [with Tuple0 = std::tuple<bool, char>&; Tuple1 = std::tuple<short int, int>&]':
main.cpp:34:52:   required from here
main.cpp:28:136: error: no matching function for call to 'awesome_tuple_dog(tuple_indices<std::tuple<bool, char>&>, tuple_indices<std::tuple<short int, int>&>, std::tuple<bool, char>&, std::tuple<bool, char>&)'
     return awesome_tuple_dog( tuple_indices<Tuple0>(), tuple_indices<Tuple1>(), std::forward<Tuple0>( t0 ), std::forward<Tuple0>( t1 ) );
                                                                                                                                        ^
main.cpp:28:136: note: candidate is:
main.cpp:22:6: note: template<int ...I, int ...J, class Tuple0, class Tuple1> auto awesome_tuple_dog(indices_list<I ...>, indices_list<J ...>, Tuple0&&, Tuple1&&)
 auto awesome_tuple_dog( indices_list<I...>, indices_list<J...>, Tuple0&& t0, Tuple1&& t1 ) {
      ^
main.cpp:22:6: note:   template argument deduction/substitution failed:
main.cpp:28:136: note:   'tuple_indices<std::tuple<bool, char>&>' is not derived from 'indices_list<I ...>'
     return awesome_tuple_dog( tuple_indices<Tuple0>(), tuple_indices<Tuple1>(), std::forward<Tuple0>( t0 ), std::forward<Tuple0>( t1 ) );
                                                                                                                                        ^
