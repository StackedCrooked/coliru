/* Prashant    Simple HashTable ??*/#include <iostream>#include <functional>#include <algorithm>template<typename T>class Node {    public:        T data;        Node* next;        Node( T data ):data( data ), next(NULL)        {        }        ~Node()        {            delete next;        }} ;template<typename K, typename V>class Map {        protected:        std::size_t count;        public:        std::size_t size( ) { return this->count; }        virtual bool add(K key, V value)  =0;                virtual Node<V>* search(K key) =0;        //virtual bool remove(K key) =0;               virtual void display( ) =0;        virtual ~Map( ) { }            };template<typename K, typename V>class HashTable:public Map<K,V>{    const static int TABLE_SIZE = 17 ;    Node<V> *Table[ TABLE_SIZE ];       std::size_t hashcode( K key )    {                //return std::hash<K>()(key) % ( TABLE_SIZE  ) ;                // if ( std::is_arithmetic<K>::value )        // {          // return key % TABLE_SIZE;        // }         // else         {            size_t i =0 ;            std::size_t hash(0);                        for(i =0 ;i < key.length() ; i++)            {                hash = hash*7+ key[i]  ;            }            return hash % TABLE_SIZE;        }    }        public :        HashTable( )        {            int i;            for(i =0 ;i<TABLE_SIZE; ++i)            {                Table[i] = new Node<V>( V() ) ;            }            this->count = 0;        }        ~HashTable() { }            bool add( K key, V value );    void display( ) ;     Node<V>* search(K key) ;};template<typename K, typename V>bool HashTable<K,V>::add( K key, V value ){        std::size_t ind = hashcode( key );    Node<V> *item = new Node<V>( value ) ;        Node<V> *ptr = Table[ind] ;        while ( ptr->next != NULL )    {        ptr =ptr->next ;    }        ptr->next = item ;    ++this->count ;        return true ;}template<typename K, typename V>void HashTable<K,V>::display( ){    for( int ind = 0; ind< TABLE_SIZE ; ++ind )    {        Node<V> *ptr = Table[ind]->next ;        std::cout << "At Table Index :" << ind << std::endl;        std::cout << "-------------------\n" ;        while ( ptr != NULL )        {            std::cout << ptr->data << " ";            ptr = ptr->next;        }        std::cout<<"\n\n";    }}template<typename K, typename V>Node<V>* HashTable<K,V>::search( K key ){    std::size_t ind = hashcode( key );    return Table[ind] ;}int main(){    Map<std::string, std::string> *H =                  new HashTable<std::string, std::string >() ;    std::string str = "JACK";    do {            H->add( str, str );          }while(std::next_permutation( str.begin(), str.end() ) );        H->display();                return 0;}