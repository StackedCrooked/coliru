+ g++-4.8 -std=c++11 -O2 -Wall -pedantic -pthread main.cpp
main.cpp: In function 'int main()':
main.cpp:57:44: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for(auto i=0; i < valData.bucket_count(); ++i) {
                                            ^
In file included from /usr/include/c++/4.8/bits/hashtable.h:35:0,
                 from /usr/include/c++/4.8/unordered_map:47,
                 from main.cpp:8:
/usr/include/c++/4.8/bits/hashtable_policy.h: In instantiation of 'static bool std::__detail::_Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>::_S_equals(const _Equal&, const _ExtractKey&, const _Key&, _HashCodeType, std::__detail::_Hash_node<_Value, true>*) [with _Key = DataClass; _Value = std::pair<const DataClass, int>; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _HashCodeType = long unsigned int]':
/usr/include/c++/4.8/bits/hashtable_policy.h:1470:23:   required from 'bool std::__detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>::_M_equals(const _Key&, std::__detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>::__hash_code, std::__detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>::__node_type*) const [with _Key = DataClass; _Value = std::pair<const DataClass, int>; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _H1 = DataClassHash; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _Traits = std::__detail::_Hashtable_traits<true, false, false>; std::__detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>::__hash_code = long unsigned int; std::__detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>::__node_type = std::__detail::_Hash_node<std::pair<const DataClass, int>, true>]'
/usr/include/c++/4.8/bits/hashtable.h:1165:4:   required from 'std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__node_base* std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_find_before_node(std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::size_type, const key_type&, std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__hash_code) const [with _Key = DataClass; _Value = std::pair<const DataClass, int>; _Alloc = std::allocator<std::pair<const DataClass, int> >; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _H1 = DataClassHash; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, false>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__node_base = std::__detail::_Hash_node_base; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::size_type = long unsigned int; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::key_type = DataClass; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__hash_code = long unsigned int]'
/usr/include/c++/4.8/bits/hashtable.h:1380:64:   required from 'std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::iterator std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_multi_node(std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__hash_code, std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__node_type*) [with _Key = DataClass; _Value = std::pair<const DataClass, int>; _Alloc = std::allocator<std::pair<const DataClass, int> >; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _H1 = DataClassHash; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, false>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::iterator = std::__detail::_Node_iterator<std::pair<const DataClass, int>, false, true>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__hash_code = long unsigned int; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__node_type = std::__detail::_Hash_node<std::pair<const DataClass, int>, true>]'
/usr/include/c++/4.8/bits/hashtable.h:1312:44:   required from 'std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::iterator std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_emplace(std::false_type, _Args&& ...) [with _Args = {DataClass, int}; _Key = DataClass; _Value = std::pair<const DataClass, int>; _Alloc = std::allocator<std::pair<const DataClass, int> >; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _H1 = DataClassHash; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, false>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::iterator = std::__detail::_Node_iterator<std::pair<const DataClass, int>, false, true>; std::false_type = std::integral_constant<bool, false>]'
/usr/include/c++/4.8/bits/hashtable.h:665:69:   required from 'std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__ireturn_type std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::emplace(_Args&& ...) [with _Args = {DataClass, int}; _Key = DataClass; _Value = std::pair<const DataClass, int>; _Alloc = std::allocator<std::pair<const DataClass, int> >; _ExtractKey = std::__detail::_Select1st; _Equal = DataEqual; _H1 = DataClassHash; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, false>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::__ireturn_type = std::__detail::_Node_iterator<std::pair<const DataClass, int>, false, true>]'
/usr/include/c++/4.8/bits/unordered_map.h:988:54:   required from 'std::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator std::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::emplace(_Args&& ...) [with _Args = {DataClass, int}; _Key = DataClass; _Tp = int; _Hash = DataClassHash; _Pred = DataEqual; _Alloc = std::allocator<std::pair<const DataClass, int> >; std::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator = std::__detail::_Node_iterator<std::pair<const DataClass, int>, false, true>]'
main.cpp:44:42:   required from here
/usr/include/c++/4.8/bits/hashtable_policy.h:1166:72: error: no match for call to '(const DataEqual) (const DataClass&, std::tuple_element<0ul, std::pair<const DataClass, int> >::type&)'
     { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v)); }
                                                                        ^
main.cpp:34:7: note: candidate is:
 class DataEqual {
       ^
main.cpp:36:10: note: bool DataEqual::operator()(const DataClass&, const DataClass&) <near match>
     bool operator() (const DataClass& d1, const DataClass& d2)  {
          ^
main.cpp:36:10: note:   no known conversion for implicit 'this' parameter from 'const DataEqual*' to 'DataEqual*'
