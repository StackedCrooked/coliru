main.cpp:11:73: error: expression '#'lambda_expr' not supported by dump_expr#<expression error>' is not a constant-expression
main.cpp: In instantiation of '<lambda(int&)>':
main.cpp:11:48:   required from 'struct<lambda(int&)>'
main.cpp:11:26:   required by substitution of 'template<class T> constexpr std::true_type test(int, dummy<Zero(#'lambda_expr' not supported by dump_expr#<expression error>)>) [with T = int]'
main.cpp:22:32:   required from here
main.cpp:11:72: error: request for member 'bar' in 't', which is of non-class type 'int'
main.cpp:11:72: error: return-statement with a value, in function returning 'void' [-fpermissive]
main.cpp: In function 'int main()':
main.cpp:22:5: error: static assertion failed: 
main.cpp: In instantiation of 'constexpr std::true_type test(int, dummy<Zero(#'lambda_expr' not supported by dump_expr#<expression error>)>) [with T = foo; std::true_type = std::integral_constant<bool, true>]':
main.cpp:23:1:   required from here
main.cpp:11:26: sorry, unimplemented: mangling lambda_expr
main.cpp: In instantiation of 'constexpr std::true_type test(int, dummy<Zero(#'lambda_expr' not supported by dump_expr#<expression error>)>) [with T = int; std::true_type = std::integral_constant<bool, true>]':
main.cpp:23:1:   required from here
main.cpp:11:26: sorry, unimplemented: mangling lambda_expr
