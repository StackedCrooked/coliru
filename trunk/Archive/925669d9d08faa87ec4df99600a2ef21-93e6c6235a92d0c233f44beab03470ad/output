In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15:
In file included from /usr/local/include/boost/spirit/home/qi/domain.hpp:18:
In file included from /usr/local/include/boost/spirit/home/support/context.hpp:18:
In file included from /usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:20:
In file included from /usr/local/include/boost/spirit/home/support/string_traits.hpp:16:
In file included from /usr/local/include/boost/spirit/home/support/container.hpp:25:
In file included from /usr/local/include/boost/range/iterator_range.hpp:13:
/usr/local/include/boost/range/iterator_range_core.hpp:58:24: error: no matching conversion for static_cast from 'typename range_iterator<const basic_string<char> >::type' (aka '__normal_iterator<const_pointer, std::basic_string<char> >') to '__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >'
                return static_cast<IteratorT>( boost::begin( r ) );
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/range/iterator_range_core.hpp:189:32: note: in instantiation of function template specialization 'boost::iterator_range_detail::iterator_range_impl<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >::adl_begin<const std::basic_string<char> >' requested here
                m_Begin( impl::adl_begin( r ) ), m_End( impl::adl_end( r ) )
                               ^
/usr/local/include/boost/variant/variant.hpp:1556:19: note: in instantiation of function template specialization 'boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >::iterator_range<std::basic_string<char> >' requested here
                , operand
                  ^
/usr/local/include/boost/variant/variant.hpp:1703:9: note: in instantiation of function template specialization 'boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>::convert_construct<const std::basic_string<char> >' requested here
        convert_construct(operand, 1L);
        ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:152:20: note: in instantiation of function template specialization 'boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>::variant<std::basic_string<char> >' requested here
            attr = static_cast<Attribute>(val);
                   ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:170:13: note: in instantiation of function template specialization 'boost::spirit::traits::assign_to_attribute_from_value<boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>, std::basic_string<char>, void>::call<std::basic_string<char> >' requested here
            call(val, attr, is_one_element_sequence());
            ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:359:59: note: (skipping 14 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            assign_to_attribute_from_value<Attribute, T>::call(val, attr);
                                                          ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, const boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, boost::spirit::context<boost::fusion::cons<ast::expression *&, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::unused_type &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::lex::reference<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long>, unsigned long>, boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, const boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, boost::spirit::context<boost::fusion::cons<ast::expression *&, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::unused_type &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::lex::reference<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long>, unsigned long>, boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > >, ast::expression *(), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long> &, const boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:169:21: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > >, ast::expression *(), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>::operator=<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long> &, const boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > &>, 2> >' requested here
        plus_factor = tok.number                        [ qi::_val = build_integer_constant_expression_("LOL") ]
                    ^
main.cpp:198:43: note: in instantiation of function template specialization 'strip_comments_grammar<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > >::strip_comments_grammar<strip_comments_tokens<boost::spirit::lex::lexertl::lexer<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > > >' requested here
    strip_comments_grammar<iterator_type> g (strip_comments);   // Our parser 
                                          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:708:11: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from '__normal_iterator<const_pointer, [...]>' to 'const __normal_iterator<char *, [...]>' for 1st argument
    class __normal_iterator
          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:708:11: note: candidate constructor (the implicit move constructor) not viable: no known conversion from '__normal_iterator<const_pointer, [...]>' to '__normal_iterator<char *, [...]>' for 1st argument
    class __normal_iterator
          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:726:7: note: candidate constructor not viable: no known conversion from 'typename range_iterator<const basic_string<char> >::type' (aka '__normal_iterator<const_pointer, std::basic_string<char> >') to 'char *const' for 1st argument
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
      ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:730:9: note: candidate template ignored: substitution failure [with _Iter = const char *]: no type named '__type' in '__gnu_cxx::__enable_if<false, std::basic_string<char> >'
        __normal_iterator(const __normal_iterator<_Iter,
        ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:723:26: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
                         ^
In file included from main.cpp:2:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15:
In file included from /usr/local/include/boost/spirit/home/qi/domain.hpp:18:
In file included from /usr/local/include/boost/spirit/home/support/context.hpp:18:
In file included from /usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:20:
In file included from /usr/local/include/boost/spirit/home/support/string_traits.hpp:16:
In file included from /usr/local/include/boost/spirit/home/support/container.hpp:25:
In file included from /usr/local/include/boost/range/iterator_range.hpp:13:
/usr/local/include/boost/range/iterator_range_core.hpp:64:24: error: no matching conversion for static_cast from 'typename range_iterator<const basic_string<char> >::type' (aka '__normal_iterator<const_pointer, std::basic_string<char> >') to '__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >'
                return static_cast<IteratorT>( boost::end( r ) );
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/range/iterator_range_core.hpp:189:63: note: in instantiation of function template specialization 'boost::iterator_range_detail::iterator_range_impl<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >::adl_end<const std::basic_string<char> >' requested here
                m_Begin( impl::adl_begin( r ) ), m_End( impl::adl_end( r ) )
                                                              ^
/usr/local/include/boost/variant/variant.hpp:1556:19: note: in instantiation of function template specialization 'boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >::iterator_range<std::basic_string<char> >' requested here
                , operand
                  ^
/usr/local/include/boost/variant/variant.hpp:1703:9: note: in instantiation of function template specialization 'boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>::convert_construct<const std::basic_string<char> >' requested here
        convert_construct(operand, 1L);
        ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:152:20: note: in instantiation of function template specialization 'boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>::variant<std::basic_string<char> >' requested here
            attr = static_cast<Attribute>(val);
                   ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:170:13: note: in instantiation of function template specialization 'boost::spirit::traits::assign_to_attribute_from_value<boost::variant<boost::detail::variant::over_sequence<boost::mpl::v_item<boost::iterator_range<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> > >, boost::mpl::v_item<char, boost::mpl::vector0<mpl_::na>, 1>, 1> >, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_>, std::basic_string<char>, void>::call<std::basic_string<char> >' requested here
            call(val, attr, is_one_element_sequence());
            ^
/usr/local/include/boost/spirit/home/qi/detail/assign_to.hpp:359:59: note: (skipping 14 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            assign_to_attribute_from_value<Attribute, T>::call(val, attr);
                                                          ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, const boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, boost::spirit::context<boost::fusion::cons<ast::expression *&, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::unused_type &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::lex::reference<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long>, unsigned long>, boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, const boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > &, boost::spirit::context<boost::fusion::cons<ast::expression *&, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::unused_type &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<boost::spirit::lex::reference<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long>, unsigned long>, boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > >, ast::expression *(), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long> &, const boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:169:21: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > >, ast::expression *(), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>::operator=<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::lex::token_def<std::basic_string<char>, char, unsigned long> &, const boost::phoenix::actor<boost::proto::exprns_::expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<0> >, 0>, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<detail::build_integer_constant_expression__impl_1>, 0>, boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char *>, 0> >, 2> > >, 2> > &>, 2> >' requested here
        plus_factor = tok.number                        [ qi::_val = build_integer_constant_expression_("LOL") ]
                    ^
main.cpp:198:43: note: in instantiation of function template specialization 'strip_comments_grammar<boost::spirit::lex::lexertl::iterator<boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > >::strip_comments_grammar<strip_comments_tokens<boost::spirit::lex::lexertl::lexer<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::spirit::lex::lexertl::functor<boost::spirit::lex::lexertl::token<__gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, boost::mpl::vector<char, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, unsigned long>, lexertl::detail::data, __gnu_cxx::__normal_iterator<char *, std::basic_string<char> >, mpl_::bool_<false>, mpl_::bool_<true> > > > >' requested here
    strip_comments_grammar<iterator_type> g (strip_comments);   // Our parser 
                                          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:708:11: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from '__normal_iterator<const_pointer, [...]>' to 'const __normal_iterator<char *, [...]>' for 1st argument
    class __normal_iterator
          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:708:11: note: candidate constructor (the implicit move constructor) not viable: no known conversion from '__normal_iterator<const_pointer, [...]>' to '__normal_iterator<char *, [...]>' for 1st argument
    class __normal_iterator
          ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:726:7: note: candidate constructor not viable: no known conversion from 'typename range_iterator<const basic_string<char> >::type' (aka '__normal_iterator<const_pointer, std::basic_string<char> >') to 'char *const' for 1st argument
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
      ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:730:9: note: candidate template ignored: substitution failure [with _Iter = const char *]: no type named '__type' in '__gnu_cxx::__enable_if<false, std::basic_string<char> >'
        __normal_iterator(const __normal_iterator<_Iter,
        ^
/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/bits/stl_iterator.h:723:26: note: candidate constructor not viable: requires 0 arguments, but 1 was provided
      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
                         ^
2 errors generated.
