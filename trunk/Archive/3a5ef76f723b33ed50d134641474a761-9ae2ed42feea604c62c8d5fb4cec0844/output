+ clang++ -Wall -O1 -std=c++11 -pedantic main.cpp
In file included from main.cpp:1:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:13:
In file included from /usr/local/include/boost/proto/proto_fwd.hpp:28:
In file included from /usr/local/include/boost/utility/result_of.hpp:23:
/usr/local/include/boost/mpl/eval_if.hpp:38:26: error: no type named 'type' in 'boost::result_of<boost::phoenix::actor<boost::spirit::local_variable<0> > (boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >)>'
    typedef typename f_::type type;
            ~~~~~~~~~~~~~^~~~
/usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:34:22: note: in instantiation of template class 'boost::mpl::eval_if<boost::mpl::or_<boost::is_scalar<boost::phoenix::actor<boost::spirit::local_variable<0> > >, boost::spirit::traits::is_string<boost::phoenix::actor<boost::spirit::local_variable<0> > >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >, boost::mpl::identity<const boost::phoenix::actor<boost::spirit::local_variable<0> > &>, boost::result_of<boost::phoenix::actor<boost::spirit::local_variable<0> > (boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >)> >' requested here
                mpl::eval_if<
                     ^
/usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:73:18: note: in instantiation of template class 'boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >::result_type<boost::phoenix::actor<boost::spirit::local_variable<0> > >' requested here
        typename result_type<T>::type
                 ^
/usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:74:9: note: while substituting deduced template arguments into function template 'operator()' [with T = boost::phoenix::actor<boost::spirit::local_variable<0> >]
        operator()(T const& x) const
        ^
/usr/local/include/boost/utility/detail/result_of_iterate.hpp:125:8: note: during template argument deduction for class template partial specialization 'cpp0x_result_of_impl<type-parameter-0-0 (type-parameter-0-1), typename result_of_always_void<decltype(boost::declval<F>()(boost::declval<T0>()))>::type>' [with F = boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >, T0 = boost::phoenix::actor<boost::spirit::local_variable<0> >]
struct cpp0x_result_of_impl<F(BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(),T)),
       ^
/usr/local/include/boost/fusion/view/transform_view/detail/apply_transform_result.hpp:29:19: note: in instantiation of template class 'boost::result_of<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > (boost::phoenix::actor<boost::spirit::local_variable<0> >)>' requested here
                : boost::result_of<F(T0)>
                  ^
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:38:7: note: (skipping 34 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    : F::template apply<T1>
      ^
/usr/local/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    base_type(f)
    ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:246:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::locals<int, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::spirit::unused_type>::define<mpl_::bool_<true>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
            define<mpl::true_>(r, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:22:14: note: in instantiation of function template specialization 'boost::spirit::qi::operator%=<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
        file %= -(omit [int_[number=_1]] > eol > row(number)) % eol;
             ^
In file included from main.cpp:1:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:24:
In file included from /usr/local/include/boost/fusion/include/transform.hpp:10:
In file included from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:10:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:14:
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:17:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:36:74: error: no type named 'type' in 'boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > >, boost::phoenix::actor<boost::spirit::local_variable<0> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>'
                typedef typename mpl::apply<transform_type, value_type>::type type;
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/iterator/value_of.hpp:51:15: note: in instantiation of template class 'boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > > >' requested here
            : extension::value_of_impl<typename detail::tag_of<Iterator>::type>::
              ^
/usr/local/include/boost/fusion/container/list/detail/build_cons.hpp:44:33: note: in instantiation of template class 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > > >' requested here
            typename result_of::value_of<First>::type
                                ^
/usr/local/include/boost/fusion/container/list/convert.hpp:31:30: note: in instantiation of template class 'boost::fusion::detail::build_cons<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > >, boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 1>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > >, false>' requested here
            typedef typename build_cons::type type;
                             ^
/usr/local/include/boost/fusion/container/list/convert.hpp:42:32: note: in instantiation of template class 'boost::fusion::result_of::as_list<boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >, boost::fusion::void_> >' requested here
    inline typename result_of::as_list<Sequence>::type
                               ^
/usr/local/include/boost/fusion/container/list/convert.hpp:43:5: note: while substituting deduced template arguments into function template 'as_list' [with Sequence = boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >, boost::fusion::void_>]
    as_list(Sequence& seq)
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:30: note: (skipping 25 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
                context_type context(attr_, params, caller_context);
                             ^
/usr/local/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    base_type(f)
    ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:246:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::locals<int, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::spirit::unused_type>::define<mpl_::bool_<true>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
            define<mpl::true_>(r, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:22:14: note: in instantiation of function template specialization 'boost::spirit::qi::operator%=<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
        file %= -(omit [int_[number=_1]] > eol > row(number)) % eol;
             ^
In file included from main.cpp:1:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15:
In file included from /usr/local/include/boost/spirit/home/qi/domain.hpp:18:
/usr/local/include/boost/spirit/home/support/context.hpp:108:13: error: no matching constructor for initialization of 'boost::fusion::cons<std::vector<double, std::allocator<double> > &, boost::fusion::cons<int, boost::fusion::nil> >'
        ) : attributes(
            ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:30: note: in instantiation of function template specialization 'boost::spirit::context<boost::fusion::cons<std::vector<double, std::allocator<double> > &, boost::fusion::cons<int, boost::fusion::nil> >, boost::fusion::vector0<void> >::context<boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >' requested here
                context_type context(attr_, params, caller_context);
                             ^
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp:48:30: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, std::vector<double, std::allocator<double> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
            return ref.get().parse(first, last, context, skipper, attr, params);
                             ^
/usr/local/include/boost/spirit/home/qi/detail/expect_function.hpp:50:28: note: in instantiation of function template specialization 'boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >::parse<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, std::vector<double, std::allocator<double> > >' requested here
            if (!component.parse(first, last, context, skipper, attr))
                           ^
/usr/local/include/boost/spirit/home/qi/detail/pass_container.hpp:263:22: note: in instantiation of function template specialization 'boost::spirit::qi::detail::expect_function<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, boost::spirit::qi::expectation_failure<boost::spirit::basic_istream_iterator<char, std::char_traits<char> > > >::operator()<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, std::vector<double, std::allocator<double> > >' requested here
            bool r = f(component, val);
                     ^
/usr/local/include/boost/spirit/home/qi/detail/pass_container.hpp:311:20: note: in instantiation of function template specialization 'boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::expect_function<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, boost::spirit::qi::expectation_failure<boost::spirit::basic_istream_iterator<char, std::char_traits<char> > > >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >, mpl_::bool_<true> >::dispatch_container<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >' requested here
            return dispatch_container(component, predicate());
                   ^
/usr/local/include/boost/spirit/home/qi/detail/pass_container.hpp:331:20: note: (skipping 20 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            return dispatch_attribute(component, predicate());
                   ^
/usr/local/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    base_type(f)
    ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:246:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::locals<int, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::spirit::unused_type>::define<mpl_::bool_<true>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
            define<mpl::true_>(r, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:22:14: note: in instantiation of function template specialization 'boost::spirit::qi::operator%=<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
        file %= -(omit [int_[number=_1]] > eol > row(number)) % eol;
             ^
/usr/local/include/boost/fusion/container/list/cons.hpp:76:9: note: candidate constructor not viable: no known conversion from 'typename result_of::as_list<const transform_view<const vector<actor<local_variable<0> >, void_, void_, void_, void_, void_, void_, void_, void_, void_>, expand_arg<context<cons<vector<vector<double, allocator<double> >, allocator<vector<double, allocator<double> > > > &, nil>, vector1<int> > >, void_> >::type' (aka 'int') to 'const boost::fusion::cons<int, boost::fusion::nil>' for 2nd argument
        cons(
        ^
/usr/local/include/boost/fusion/container/list/cons.hpp:89:9: note: candidate constructor [with Sequence = std::vector<double, std::allocator<double> >] not viable: no known conversion from 'typename result_of::as_list<const transform_view<const vector<actor<local_variable<0> >, void_, void_, void_, void_, void_, void_, void_, void_, void_>, expand_arg<context<cons<vector<vector<double, allocator<double> >, allocator<vector<double, allocator<double> > > > &, nil>, vector1<int> > >, void_> >::type' (aka 'int') to 'typename boost::disable_if<mpl::or_<is_convertible<vector<double, allocator<double> >, cons<vector<double, allocator<double> > &, cons<int, nil> > >, is_convertible<vector<double, allocator<double> >, vector<double, allocator<double> > &> > >::type *' (aka 'void *') for 2nd argument
        cons(
        ^
/usr/local/include/boost/fusion/container/list/cons.hpp:102:9: note: candidate constructor [with Iterator = std::vector<double, std::allocator<double> >] not viable: no known conversion from 'typename result_of::as_list<const transform_view<const vector<actor<local_variable<0> >, void_, void_, void_, void_, void_, void_, void_, void_, void_>, expand_arg<context<cons<vector<vector<double, allocator<double> >, allocator<vector<double, allocator<double> > > > &, nil>, vector1<int> > >, void_> >::type' (aka 'int') to 'mpl::true_' (aka 'bool_<true>') for 2nd argument
        cons(Iterator const& iter, mpl::true_ /*this_is_an_iterator*/)
        ^
/usr/local/include/boost/fusion/container/list/cons.hpp:82:9: note: candidate constructor template not viable: requires single argument 'rhs', but 2 arguments were provided
        cons(cons<Car2, Cdr2> const& rhs)
        ^
/usr/local/include/boost/fusion/container/list/cons.hpp:70:9: note: candidate constructor not viable: requires 0 arguments, but 2 were provided
        cons()
        ^
/usr/local/include/boost/fusion/container/list/cons.hpp:73:18: note: candidate constructor not viable: requires single argument 'in_car', but 2 arguments were provided
        explicit cons(typename detail::call_param<Car>::type in_car)
                 ^
/usr/local/include/boost/fusion/container/list/cons.hpp:85:9: note: candidate constructor not viable: requires single argument 'rhs', but 2 arguments were provided
        cons(cons const& rhs)
        ^
In file included from main.cpp:1:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14:
In file included from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19:
In file included from /usr/local/include/boost/proto/proto.hpp:12:
In file included from /usr/local/include/boost/proto/core.hpp:21:
In file included from /usr/local/include/boost/proto/fusion.hpp:25:
In file included from /usr/local/include/boost/fusion/include/as_list.hpp:10:
In file included from /usr/local/include/boost/fusion/container/list/convert.hpp:11:
/usr/local/include/boost/fusion/container/list/detail/build_cons.hpp:51:50: error: no type named 'type' in 'boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > > >'
            typename result_of::value_of<First>::type v = *f;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
/usr/local/include/boost/fusion/container/list/convert.hpp:36:36: note: in instantiation of member function 'boost::fusion::detail::build_cons<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > >, boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 1>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > > >, false>::call' requested here
                return build_cons::call(fusion::begin(seq), fusion::end(seq));
                                   ^
/usr/local/include/boost/fusion/container/list/convert.hpp:52:52: note: in instantiation of member function 'boost::fusion::result_of::as_list<const boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >, boost::fusion::void_> >::call' requested here
        return result_of::as_list<Sequence const>::call(seq);
                                                   ^
/usr/local/include/boost/spirit/home/support/context.hpp:110:25: note: in instantiation of function template specialization 'boost::fusion::as_list<boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >, boost::fusion::void_> >' requested here
              , fusion::as_list(
                        ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:30: note: in instantiation of function template specialization 'boost::spirit::context<boost::fusion::cons<std::vector<double, std::allocator<double> > &, boost::fusion::cons<int, boost::fusion::nil> >, boost::fusion::vector0<void> >::context<boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > >' requested here
                context_type context(attr_, params, caller_context);
                             ^
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp:48:30: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, std::vector<double, std::allocator<double> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
            return ref.get().parse(first, last, context, skipper, attr, params);
                             ^
/usr/local/include/boost/spirit/home/qi/detail/expect_function.hpp:50:28: note: (skipping 23 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            if (!component.parse(first, last, context, skipper, attr))
                           ^
/usr/local/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    base_type(f)
    ^
/usr/local/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, const boost::spirit::basic_istream_iterator<char, std::char_traits<char> > &, boost::spirit::context<boost::fusion::cons<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > &, boost::fusion::nil>, boost::fusion::vector1<int> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<int, 10, 1, -1>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::eol_parser, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > > > >, boost::spirit::qi::eol_parser>, mpl_::bool_<true> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:246:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::locals<int, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::spirit::unused_type>::define<mpl_::bool_<true>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
            define<mpl::true_>(r, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:22:14: note: in instantiation of function template specialization 'boost::spirit::qi::operator%=<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::int_> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<boost::spirit::basic_istream_iterator<char, std::char_traits<char> >, std::vector<double, std::allocator<double> > (int), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::blank, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::local_variable<0> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0> &>, 2> &>, 1> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::eol>, 0> &>, 2> >' requested here
        file %= -(omit [int_[number=_1]] > eol > row(number)) % eol;
             ^
4 errors generated.
