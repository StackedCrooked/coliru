+ g++ -std=c++11 -Wall -pedantic -lpthread main.cpp
In file included from /usr/local/include/boost/spirit/home/qi/auxiliary.hpp:16:0,
                 from /usr/local/include/boost/spirit/home/qi.hpp:16,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp: In instantiation of ‘struct boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> > >’:
/usr/local/include/boost/spirit/home/support/attributes.hpp:413:48:   required from ‘struct boost::spirit::traits::attribute_of<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> > >’
/usr/local/include/boost/spirit/home/support/attributes.hpp:770:17:   required from ‘struct boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute::result<boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute(boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>)>’
/usr/local/include/boost/spirit/home/support/attributes.hpp:777:13:   required by substitution of ‘template<class Element> typename boost::spirit::traits::build_attribute_sequence<Sequence, Context, Transform, Iterator, Domain>::element_attribute::result<boost::spirit::traits::build_attribute_sequence<Sequence, Context, Transform, Iterator, Domain>::element_attribute(Element)>::type boost::spirit::traits::build_attribute_sequence<Sequence, Context, Transform, Iterator, Domain>::element_attribute::operator()(Element&&) const [with Element = Element; Sequence = boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >; Context = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Transform = boost::spirit::traits::sequence_attribute_transform; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Domain = boost::spirit::qi::domain] [with Element = boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>]’
/usr/local/include/boost/utility/detail/result_of_iterate.hpp:127:51:   required from ‘struct boost::result_of<boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute(boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>)>’
/usr/local/include/boost/fusion/view/transform_view/detail/apply_transform_result.hpp:28:20:   required from ‘struct boost::fusion::detail::apply_transform_result<boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute>::apply<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> >’
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:   [ skipping 51 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::unused_type&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[3]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[2]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::basic_string<char>(bool); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[3]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[2]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::basic_string<char>(bool); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:21:15:   required from here
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:98:13: error: no type named ‘type’ in ‘struct boost::result_of<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)>’
             expr_type;
             ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:98:13: error: no type named ‘type’ in ‘struct boost::result_of<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)>’
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:107:13: error: no type named ‘type’ in ‘struct boost::result_of<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)>’
             parser_type;
             ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:111:13: error: no type named ‘type’ in ‘struct boost::result_of<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)>’
             type;
             ^
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:17:0,
                 from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:14,
                 from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:10,
                 from /usr/local/include/boost/fusion/include/transform.hpp:10,
                 from /usr/local/include/boost/proto/fusion.hpp:24,
                 from /usr/local/include/boost/proto/core.hpp:21,
                 from /usr/local/include/boost/proto/proto.hpp:12,
                 from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp: In instantiation of ‘struct boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >’:
/usr/local/include/boost/fusion/iterator/value_of.hpp:50:16:   required from ‘struct boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >’
/usr/local/include/boost/mpl/aux_/has_type.hpp:20:1:   required by substitution of ‘template<class U> static char (& boost::mpl::aux::has_type<T, fallback_>::gcc_3_2_wknd::test(const volatile boost::mpl::aux::type_wrapper<U>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = U; T = boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >; fallback_ = mpl_::bool_<true>] [with U = boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >]’
/usr/local/include/boost/mpl/aux_/has_type.hpp:20:1:   required from ‘const bool boost::mpl::aux::has_type<boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >, mpl_::bool_<true> >::value’
/usr/local/include/boost/mpl/aux_/has_type.hpp:20:1:   required from ‘struct boost::mpl::aux::has_type<boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >, mpl_::bool_<true> >’
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:32:36:   required from ‘struct boost::mpl::quote1<boost::fusion::result_of::value_of>::apply<boost::fusion::transform_view_iterator<boost::fusion::cons_iterator<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute> >’
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:   [ skipping 42 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> > >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::unused_type&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::unused_type&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[3]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[2]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::basic_string<char>(bool); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[3]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::unary_plus, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::complement, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::standard>, boost::fusion::vector1<const char (&)[2]> > >, 0l>&>, 1l>&>, 1l>&>, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::basic_string<char>(bool); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:21:15:   required from here
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:36:79: error: no type named ‘type’ in ‘struct boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::traits::build_attribute_sequence<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::plus<boost::spirit::qi::negated_char_parser<boost::spirit::qi::char_set<boost::spirit::char_encoding::standard, false, false> > >, boost::fusion::nil> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >, boost::spirit::traits::sequence_attribute_transform, __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, boost::spirit::qi::domain>::element_attribute>, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::eps> >, boost::spirit::attribute<1>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, mpl_::na, mpl_::na, mpl_::na, mpl_::na>’
                 typedef typename mpl::apply<transform_type, value_type>::type type;
                                                                               ^
In file included from /usr/local/include/boost/utility/result_of.hpp:23:0,
                 from /usr/local/include/boost/proto/proto_fwd.hpp:28,
                 from /usr/local/include/boost/proto/core.hpp:13,
                 from /usr/local/include/boost/proto/proto.hpp:12,
                 from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/mpl/eval_if.hpp: In instantiation of ‘struct boost::mpl::eval_if<boost::mpl::or_<boost::is_scalar<boost::phoenix::actor<boost::spirit::attribute<1> > >, boost::spirit::traits::is_string<boost::phoenix::actor<boost::spirit::attribute<1> > >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >, boost::mpl::identity<const boost::phoenix::actor<boost::spirit::attribute<1> >&>, boost::result_of<boost::phoenix::actor<boost::spirit::attribute<1> >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)> >’:
/usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:39:13:   required from ‘struct boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >::result_type<boost::phoenix::actor<boost::spirit::attribute<1> > >’
/usr/local/include/boost/spirit/home/support/nonterminal/expand_arg.hpp:74:9:   required by substitution of ‘template<class T> typename boost::spirit::detail::expand_arg<Context>::result_type<T>::type boost::spirit::detail::expand_arg<Context>::operator()(const T&) const [with T = T; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >] [with T = boost::phoenix::actor<boost::spirit::attribute<1> >]’
/usr/local/include/boost/utility/detail/result_of_iterate.hpp:127:51:   required from ‘struct boost::result_of<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >(boost::phoenix::actor<boost::spirit::attribute<1> >)>’
/usr/local/include/boost/fusion/view/transform_view/detail/apply_transform_result.hpp:28:20:   required from ‘struct boost::fusion::detail::apply_transform_result<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > >::apply<boost::phoenix::actor<boost::spirit::attribute<1> > >’
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:   required from ‘struct boost::mpl::apply_wrap1<boost::fusion::detail::apply_transform_result<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > >, boost::phoenix::actor<boost::spirit::attribute<1> > >’
/usr/local/include/boost/mpl/aux_/preprocessed/gcc/apply.hpp:42:8:   [ skipping 27 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:22:15:   required from here
/usr/local/include/boost/mpl/eval_if.hpp:38:31: error: no type named ‘type’ in ‘boost::mpl::eval_if<boost::mpl::or_<boost::is_scalar<boost::phoenix::actor<boost::spirit::attribute<1> > >, boost::spirit::traits::is_string<boost::phoenix::actor<boost::spirit::attribute<1> > >, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >, boost::mpl::identity<const boost::phoenix::actor<boost::spirit::attribute<1> >&>, boost::result_of<boost::phoenix::actor<boost::spirit::attribute<1> >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)> >::f_ {aka struct boost::result_of<boost::phoenix::actor<boost::spirit::attribute<1> >(boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >)>}’
     typedef typename f_::type type;
                               ^
In file included from /usr/local/include/boost/fusion/view/transform_view/transform_view_iterator.hpp:17:0,
                 from /usr/local/include/boost/fusion/view/transform_view/transform_view.hpp:14,
                 from /usr/local/include/boost/fusion/algorithm/transformation/transform.hpp:10,
                 from /usr/local/include/boost/fusion/include/transform.hpp:10,
                 from /usr/local/include/boost/proto/fusion.hpp:24,
                 from /usr/local/include/boost/proto/core.hpp:21,
                 from /usr/local/include/boost/proto/proto.hpp:12,
                 from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp: In instantiation of ‘struct boost::fusion::extension::value_of_impl<boost::fusion::transform_view_iterator_tag>::apply<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > > >’:
/usr/local/include/boost/fusion/iterator/value_of.hpp:50:16:   required from ‘struct boost::fusion::result_of::value_of<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > > >’
/usr/local/include/boost/fusion/container/list/detail/build_cons.hpp:46:9:   required from ‘struct boost::fusion::detail::build_cons<boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 0>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > >, boost::fusion::transform_view_iterator<boost::fusion::vector_iterator<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, 1>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > >, false>’
/usr/local/include/boost/fusion/container/list/convert.hpp:31:47:   required from ‘struct boost::fusion::result_of::as_list<const boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >, boost::fusion::void_> >’
/usr/local/include/boost/fusion/container/list/convert.hpp:50:5:   required by substitution of ‘template<class Sequence> typename boost::fusion::result_of::as_list<const Sequence>::type boost::fusion::as_list(const Sequence&) [with Sequence = boost::fusion::transform_view<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >, boost::fusion::void_>]’
/usr/local/include/boost/spirit/home/support/context.hpp:115:17:   required from ‘boost::spirit::context<Attributes, Locals>::context(typename Attributes::car_type, const Args&, Context&) [with Args = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Attributes = boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >; Locals = boost::fusion::vector0<>; typename Attributes::car_type = std::vector<std::basic_string<char> >&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:67:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:22:15:   required from here
/usr/local/include/boost/fusion/view/transform_view/detail/value_of_impl.hpp:36:79: error: no type named ‘type’ in ‘struct boost::mpl::apply<boost::fusion::detail::apply_transform_result<boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > > >, boost::phoenix::actor<boost::spirit::attribute<1> >, mpl_::na, mpl_::na, mpl_::na, mpl_::na>’
                 typedef typename mpl::apply<transform_type, value_type>::type type;
                                                                               ^
In file included from /usr/local/include/boost/spirit/home/qi/domain.hpp:18:0,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/support/context.hpp: In instantiation of ‘boost::spirit::context<Attributes, Locals>::context(typename Attributes::car_type, const Args&, Context&) [with Args = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Attributes = boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >; Locals = boost::fusion::vector0<>; typename Attributes::car_type = std::vector<std::basic_string<char> >&]’:
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:67:   required from ‘bool boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::parse(Iterator&, const Iterator&, Context&, const Skipper&, Attribute&, const Params&) const [with Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; Params = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp:48:79:   required from ‘bool boost::spirit::qi::parameterized_nonterminal<Subject, Params>::parse(Iterator&, const Iterator&, Context&, const Skipper&, Attribute&) const [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; Subject = boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >; Params = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:70:71:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::call(const Component&, mpl_::true_) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:153:20:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::call_unused(const Component&, mpl_::true_) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:170:54:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::operator()(const Component&) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >]’
/usr/local/include/boost/fusion/algorithm/query/detail/any.hpp:37:19:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:22:15:   required from here
/usr/local/include/boost/spirit/home/support/context.hpp:115:17: error: no matching function for call to ‘as_list(boost::fusion::result_of::transform<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >, boost::fusion::void_>::type)’
                 )
                 ^
/usr/local/include/boost/spirit/home/support/context.hpp:115:17: note: candidates are:
In file included from /usr/local/include/boost/fusion/include/as_list.hpp:10:0,
                 from /usr/local/include/boost/proto/fusion.hpp:25,
                 from /usr/local/include/boost/proto/core.hpp:21,
                 from /usr/local/include/boost/proto/proto.hpp:12,
                 from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/fusion/container/list/convert.hpp:43:5: note: template<class Sequence> typename boost::fusion::result_of::as_list<Sequence>::type boost::fusion::as_list(Sequence&)
     as_list(Sequence& seq)
     ^
/usr/local/include/boost/fusion/container/list/convert.hpp:43:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/container/list/convert.hpp:50:5: note: template<class Sequence> typename boost::fusion::result_of::as_list<const Sequence>::type boost::fusion::as_list(const Sequence&)
     as_list(Sequence const& seq)
     ^
/usr/local/include/boost/fusion/container/list/convert.hpp:50:5: note:   substitution of deduced template arguments resulted in errors seen above
In file included from /usr/local/include/boost/spirit/home/qi/domain.hpp:18:0,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:15,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/spirit/home/support/context.hpp: In instantiation of ‘boost::spirit::context<Attributes, Locals>::context(typename Attributes::car_type, const Args&, Context&) [with Args = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Attributes = boost::fusion::cons<std::basic_string<char>&, boost::fusion::cons<bool, boost::fusion::nil> >; Locals = boost::fusion::vector0<>; typename Attributes::car_type = std::basic_string<char>&]’:
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:343:67:   required from ‘bool boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::parse(Iterator&, const Iterator&, Context&, const Skipper&, Attribute&, const Params&) const [with Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; Params = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::basic_string<char>(bool); T2 = boost::spirit::unused_type; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
/usr/local/include/boost/spirit/home/qi/nonterminal/detail/parameterized.hpp:48:79:   required from ‘bool boost::spirit::qi::parameterized_nonterminal<Subject, Params>::parse(Iterator&, const Iterator&, Context&, const Skipper&, Attribute&) const [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; Subject = boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>; Params = boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:70:71:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::call(const Component&, mpl_::true_) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:153:20:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::call_unused(const Component&, mpl_::true_) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/detail/alternative_function.hpp:170:54:   required from ‘bool boost::spirit::qi::detail::alternative_function<Iterator, Context, Skipper, Attribute>::operator()(const Component&) const [with Component = boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; Context = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >; Skipper = boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >; Attribute = std::vector<std::basic_string<char> >]’
/usr/local/include/boost/fusion/algorithm/query/detail/any.hpp:37:19:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/local/include/boost/function/function_template.hpp:722:7:   required from ‘boost::function4<R, T1, T2, T3, T4>::function4(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1069:16:   required from ‘boost::function<R(T0, T1, T2, T3)>::function(Functor, typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, int>::type = int]’
/usr/local/include/boost/function/function_template.hpp:1124:5:   required from ‘typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type boost::function<R(T0, T1, T2, T3)>::operator=(Functor) [with Functor = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::list<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::cons<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::fusion::nil> > >, boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard, true, false> >, mpl_::bool_<false> >; R = bool; T0 = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T1 = const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&; T2 = boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&; T3 = const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&; typename boost::enable_if_c<boost::type_traits::ice_not<boost::is_integral<Functor>::value>::value, boost::function<R(T0, T1, T2, T3)>&>::type = boost::function<bool(__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, const __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >&, boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> >&, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >&)>&]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19:   required from ‘static void boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::define(boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>&, const Expr&, mpl_::true_) [with Auto = mpl_::bool_<false>; Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type; mpl_::true_ = mpl_::bool_<true>]’
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:220:19:   required from ‘boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>& boost::spirit::qi::rule<Iterator, T1, T2, T3, T4>::operator=(const Expr&) [with Expr = boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::vector<std::basic_string<char> >(bool), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l> >, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::qi::parameterized_nonterminal<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >, std::basic_string<char>(bool)>, boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 0l>&>, 2l>&, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const char&>, 0l> >, 2l>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::basic_string<char> >; T1 = std::vector<std::basic_string<char> >(bool); T2 = boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0l>; T3 = boost::spirit::unused_type; T4 = boost::spirit::unused_type]’
main.cpp:22:15:   required from here
/usr/local/include/boost/spirit/home/support/context.hpp:115:17: error: no matching function for call to ‘as_list(boost::fusion::result_of::transform<const boost::fusion::vector<boost::phoenix::actor<boost::spirit::attribute<1> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::detail::expand_arg<boost::spirit::context<boost::fusion::cons<std::vector<std::basic_string<char> >&, boost::fusion::cons<bool, boost::fusion::nil> >, boost::fusion::vector0<> > >, boost::fusion::void_>::type)’
                 )
                 ^
/usr/local/include/boost/spirit/home/support/context.hpp:115:17: note: candidates are:
In file included from /usr/local/include/boost/fusion/include/as_list.hpp:10:0,
                 from /usr/local/include/boost/proto/fusion.hpp:25,
                 from /usr/local/include/boost/proto/core.hpp:21,
                 from /usr/local/include/boost/proto/proto.hpp:12,
                 from /usr/local/include/boost/spirit/home/support/meta_compiler.hpp:19,
                 from /usr/local/include/boost/spirit/home/qi/meta_compiler.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi/action.hpp:14,
                 from /usr/local/include/boost/spirit/home/qi.hpp:14,
                 from /usr/local/include/boost/spirit/include/qi.hpp:16,
                 from main.cpp:2:
/usr/local/include/boost/fusion/container/list/convert.hpp:43:5: note: template<class Sequence> typename boost::fusion::result_of::as_list<Sequence>::type boost::fusion::as_list(Sequence&)
     as_list(Sequence& seq)
     ^
/usr/local/include/boost/fusion/container/list/convert.hpp:43:5: note:   template argument deduction/substitution failed:
/usr/local/include/boost/fusion/container/list/convert.hpp:50:5: note: template<class Sequence> typename boost::fusion::result_of::as_list<const Sequence>::type boost::fusion::as_list(const Sequence&)
     as_list(Sequence const& seq)
     ^
/usr/local/include/boost/fusion/container/list/convert.hpp:50:5: note:   template argument deduction/substitution failed:
