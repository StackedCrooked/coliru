/Archive/f9dbe781eb15beb85c42a733d1e71e25/main.cpp:#include <future>
/Archive/f9dbe781eb15beb85c42a733d1e71e25/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/f9dbe781eb15beb85c42a733d1e71e25/main.cpp:        return t.get_future();
/Archive/541ad068786fe51095b2aa614762d51c/main.cpp:#include <future>
/Archive/541ad068786fe51095b2aa614762d51c/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/541ad068786fe51095b2aa614762d51c/main.cpp:        auto fut = promisePtr->get_future();
/Archive/541ad068786fe51095b2aa614762d51c/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/9302dcdbaf7b837df71003ac28b6d387/main.cpp:#include <future>
/Archive/9302dcdbaf7b837df71003ac28b6d387/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/9302dcdbaf7b837df71003ac28b6d387/main.cpp:        auto result = task.get_future();
/Archive/7fcdae59884bcd9f80554300478d3083/main.cpp:#include <future>
/Archive/7fcdae59884bcd9f80554300478d3083/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/7fcdae59884bcd9f80554300478d3083/main.cpp:        return promisePtr->get_future();
/Archive/f8c7be589713d47a7d979adcfc4770c9/main.cpp:#include <future>
/Archive/f8c7be589713d47a7d979adcfc4770c9/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/f8c7be589713d47a7d979adcfc4770c9/main.cpp:        auto fut = promisePtr->get_future();
/Archive/f8c7be589713d47a7d979adcfc4770c9/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/abf4725333649363172f21e645b0da8d/main.cpp:#include <future>
/Archive/abf4725333649363172f21e645b0da8d/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/abf4725333649363172f21e645b0da8d/main.cpp:        return t.get_future();
/Archive/117adb63d5cc80e4d0b7ec99d1f0735a/main.cpp:#include <future>
/Archive/117adb63d5cc80e4d0b7ec99d1f0735a/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/117adb63d5cc80e4d0b7ec99d1f0735a/main.cpp:        return promisePtr->get_future();
/Archive/a19887e2fbdc981a63f7bfc567bcd480/main.cpp:#include <future>
/Archive/a19887e2fbdc981a63f7bfc567bcd480/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/a19887e2fbdc981a63f7bfc567bcd480/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/a19887e2fbdc981a63f7bfc567bcd480/main.cpp:        auto fut = promisePtr->get_future();
/Archive/a19887e2fbdc981a63f7bfc567bcd480/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/b52939291f52b87d34ca92da6d982822/main.cpp:#include <future>
/Archive/b52939291f52b87d34ca92da6d982822/main.cpp:    std::future<Item> get_item()
/Archive/b52939291f52b87d34ca92da6d982822/main.cpp:    std::future<Component> get_component();
/Archive/4bc1a5de4057568b4c4b52603060233a/main.cpp:#include <future>
/Archive/4bc1a5de4057568b4c4b52603060233a/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/4bc1a5de4057568b4c4b52603060233a/main.cpp:        auto result = task.get_future();
/Archive/0559cb3eaf673b10454e822e877e7c27/main.cpp:#include <future>
/Archive/0559cb3eaf673b10454e822e877e7c27/main.cpp:    std::future<R> execute(F f)
/Archive/0559cb3eaf673b10454e822e877e7c27/main.cpp:        auto future = task.get_future();
/Archive/0559cb3eaf673b10454e822e877e7c27/main.cpp:        return future;
/Archive/74f7e2e7d910e0c7dc387e1e1955cd69/main.cpp:#include <future>
/Archive/74f7e2e7d910e0c7dc387e1e1955cd69/main.cpp:std::future<R> schedule_function(R (&func)())
/Archive/74f7e2e7d910e0c7dc387e1e1955cd69/main.cpp:    return prom->get_future();    
/Archive/74f7e2e7d910e0c7dc387e1e1955cd69/main.cpp:    std::future<int> n = schedule_function(&inc);
/Archive/74f7e2e7d910e0c7dc387e1e1955cd69/main.cpp:    std::future<int> m = schedule_function(Increment());
/Archive/cf2c10f2b2f08bc000ef24c2a8d1530c/main.cpp:#include <future>
/Archive/cf2c10f2b2f08bc000ef24c2a8d1530c/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/cf2c10f2b2f08bc000ef24c2a8d1530c/main.cpp:    std::future<Ret> execute(std::function<Ret(T &)> f)
/Archive/cf2c10f2b2f08bc000ef24c2a8d1530c/main.cpp:        return promisePtr->get_future();
/Archive/cbae426f8fd135f784b155d4c6cba65b/main.cpp:#include <future>
/Archive/dd42227460bdc0e4d80a7d94f546f772/main.cpp:#include <future>
/Archive/dd42227460bdc0e4d80a7d94f546f772/main.cpp:    auto execute(F f) -> std::future<decltype(f(*static_cast<T*>(nullptr)))>
/Archive/dd42227460bdc0e4d80a7d94f546f772/main.cpp:        return promisePtr->get_future();
/Archive/d649d76b286c3d7141872fb5af770423/main.cpp:#include <future>
/Archive/d649d76b286c3d7141872fb5af770423/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/d649d76b286c3d7141872fb5af770423/main.cpp:        return p->get_future();
/Archive/69f88bcc9069867a2618c70e3660fa1f/main.cpp:#include <future>
/Archive/69f88bcc9069867a2618c70e3660fa1f/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/69f88bcc9069867a2618c70e3660fa1f/main.cpp:        return t.get_future();
/Archive/dad556d2e929d7a884ce54eab5f1a6d6/main.cpp:#include <future>
/Archive/dad556d2e929d7a884ce54eab5f1a6d6/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/dad556d2e929d7a884ce54eab5f1a6d6/main.cpp:        auto result = task.get_future();
/Archive/d823c652c20bfc437dab9a63de89457e-ce5900d15c73110c459fd1d3cec77bad/main.cpp:boost/thread/future.hpp
/Archive/d823c652c20bfc437dab9a63de89457e-ce5900d15c73110c459fd1d3cec77bad/main.cpp:boost/thread/future_error_code.hpp
/Archive/44fb8e60bf90768c7cd5c8d3b3cf3d5a/main.cpp:#include <future>
/Archive/44fb8e60bf90768c7cd5c8d3b3cf3d5a/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/44fb8e60bf90768c7cd5c8d3b3cf3d5a/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/44fb8e60bf90768c7cd5c8d3b3cf3d5a/main.cpp:        auto fut = promisePtr->get_future();
/Archive/44fb8e60bf90768c7cd5c8d3b3cf3d5a/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/0d958b5ce452d4163d982f53ae6fd517/main.cpp:#include <future>
/Archive/0d958b5ce452d4163d982f53ae6fd517/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/0d958b5ce452d4163d982f53ae6fd517/main.cpp:        auto fut = promisePtr->get_future();
/Archive/0d958b5ce452d4163d982f53ae6fd517/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/3fae7b4571cad89b5dadb040c0c1e47d/main.cpp:#include <future>
/Archive/62f0c7275b04743e4604e9dd0d8e7389/main.cpp:#include <future>
/Archive/62f0c7275b04743e4604e9dd0d8e7389/main.cpp:std::future<R> schedule_function(R (&func)())
/Archive/62f0c7275b04743e4604e9dd0d8e7389/main.cpp:    return prom->get_future();    
/Archive/fc1302ece20ed4257d84c73e31b3f725/main.cpp:#include <future>
/Archive/fc1302ece20ed4257d84c73e31b3f725/main.cpp:std::future<int> do_some_work() {
/Archive/fc1302ece20ed4257d84c73e31b3f725/main.cpp:    auto ret_fut = p.get_future();
/Archive/fc1302ece20ed4257d84c73e31b3f725/main.cpp:    std::future<int> fut = do_some_work();
/Archive/743d60156b8549d13fb24e791edc68a0/main.cpp:#include <future>
/Archive/743d60156b8549d13fb24e791edc68a0/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/743d60156b8549d13fb24e791edc68a0/main.cpp:        return promisePtr->get_future();
/Archive/a2add1a78a367ecbfb03b9236a861cf6/main.cpp:#include <future>
/Archive/a2add1a78a367ecbfb03b9236a861cf6/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/a2add1a78a367ecbfb03b9236a861cf6/main.cpp:    auto execute(F f) -> std::future<decltype(f(*static_cast<T*>(nullptr)))>
/Archive/a2add1a78a367ecbfb03b9236a861cf6/main.cpp:        return promisePtr->get_future();
/Archive/71ec2a3f2a759d383d0f57b96ddf2ef4/main.cpp:#include <future>
/Archive/71ec2a3f2a759d383d0f57b96ddf2ef4/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/71ec2a3f2a759d383d0f57b96ddf2ef4/main.cpp:        auto fut = promisePtr->get_future();
/Archive/71ec2a3f2a759d383d0f57b96ddf2ef4/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/c30f2c23476f2fd5043aff9c52a43737/main.cpp:#include <future>
/Archive/c30f2c23476f2fd5043aff9c52a43737/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/c30f2c23476f2fd5043aff9c52a43737/main.cpp:        auto fut = promisePtr->get_future();
/Archive/c30f2c23476f2fd5043aff9c52a43737/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/997ac781092787999c90884c459242f7/main.cpp:#include <future>
/Archive/997ac781092787999c90884c459242f7/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/997ac781092787999c90884c459242f7/main.cpp:        auto result = task.get_future();
/Archive/23e67237b0e9e22cb632e30b677d0d43/main.cpp:#include <future>
/Archive/23e67237b0e9e22cb632e30b677d0d43/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/23e67237b0e9e22cb632e30b677d0d43/main.cpp:        return promisePtr->get_future();
/Archive/2d41bec60fdc0908451a8aacd4c4e19e/main.cpp:#include <future>
/Archive/2d41bec60fdc0908451a8aacd4c4e19e/main.cpp:    auto execute(F f) -> std::future<decltype(f(*static_cast<T*>(nullptr)))>
/Archive/2d41bec60fdc0908451a8aacd4c4e19e/main.cpp:        return promisePtr->get_future();
/Archive/0e5490a2503c0a4ef2b0568e5511afcd/main.cpp:#include <future>
/Archive/0e5490a2503c0a4ef2b0568e5511afcd/main.cpp:  std::vector<std::future<double> > futures;
/Archive/0e5490a2503c0a4ef2b0568e5511afcd/main.cpp:    futures.push_back(pt.get_future());
/Archive/141c19863280a1f259455f07a1ab2a76/main.cpp:#include <future>
/Archive/141c19863280a1f259455f07a1ab2a76/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/141c19863280a1f259455f07a1ab2a76/main.cpp:        return promisePtr->get_future();
/Archive/06457667a919e9e1a565b44917123c42/main.cpp:#include <future>
/Archive/06457667a919e9e1a565b44917123c42/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/06457667a919e9e1a565b44917123c42/main.cpp:        auto fut = promisePtr->get_future();
/Archive/06457667a919e9e1a565b44917123c42/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/d24ce8d071dc47d7068dee731c8c8511/main.cpp:#include <future>
/Archive/d24ce8d071dc47d7068dee731c8c8511/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/d24ce8d071dc47d7068dee731c8c8511/main.cpp:        return promisePtr->get_future();
/Archive/f6743202f2f8473b158780eb194f0de5/main.cpp:#include <future>
/Archive/f6743202f2f8473b158780eb194f0de5/main.cpp:    auto execute(F f) -> std::future<(f(declval<T>()))
/Archive/f6743202f2f8473b158780eb194f0de5/main.cpp:        return promisePtr->get_future();
/Archive/df9e848c5c894000ed6fc8403ea49302/main.cpp:#include <future>
/Archive/df9e848c5c894000ed6fc8403ea49302/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/df9e848c5c894000ed6fc8403ea49302/main.cpp:        return promisePtr->get_future();
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:#include <future>
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:    using std::future_status;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        struct future_shared_state {
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        using future_shared_state_box = wheels::locker_box<future_shared_state<T>>;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:    struct future {
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future() noexcept = default;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future(future&&) noexcept = default;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future(future const& other) = delete;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        ~future() = default;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future& operator=(future&& other) noexcept = default;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future& operator=(future const& other) = delete;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        //shared_future<T> share();
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future_status wait_for(std::chrono::duration<Rep, Period> const& timeout_duration) const;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        std::future_status wait_until(std::chrono::time_point<Clock, Duration>  const& timeout_time) const;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        std::shared_ptr<detail::future_shared_state_box<T>> box = nullptr;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future(std::shared_ptr<detail::future_shared_state_box<T>> const& box) : box(box) {}
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future(std::shared_ptr<detail::future_shared_state_box<T>>&& box) : box(std::move(box)) {}
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        : box(std::make_shared<detail::future_shared_state_box<T>>()) {}
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        : box(std::allocate_shared<detail::future_shared_state_box<T>>(alloc)) {}
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        future<T> get_future() {
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:        std::shared_ptr<detail::future_shared_state_box<T>> box;
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:    auto f = p->get_future();
/Archive/3df3a2b9e6f9845b5bd2d1e943bccdc4-18aa934a8d82d638dde2147aa94cac94/main.cpp:    std::cout << "A: waiting for future result\n";
/Archive/6f188682ca6305fd21797401f908ded8/main.cpp:#include <future>
/Archive/6f188682ca6305fd21797401f908ded8/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/6f188682ca6305fd21797401f908ded8/main.cpp:        auto fut = promisePtr->get_future();
/Archive/6f188682ca6305fd21797401f908ded8/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/57fdcd71f75203a3a3888776dc8bec46/main.cpp:#include <future>
/Archive/57fdcd71f75203a3a3888776dc8bec46/main.cpp:    auto execute(F f) -> std::future<decltype(f(*static_cast<T*>(nullptr)))>
/Archive/57fdcd71f75203a3a3888776dc8bec46/main.cpp:        return promisePtr->get_future();
/Archive/d648873022389dcd78ccc32862c34932/main.cpp:#include <future>
/Archive/d648873022389dcd78ccc32862c34932/main.cpp:    auto future = async([&] ()->int{ return retInt(a); });
/Archive/d648873022389dcd78ccc32862c34932/main.cpp:    const auto ret = future.get();
/Archive/bec4995e6bce09ccea8b4b7f9187f21d/main.cpp:#include <future>
/Archive/f451fea83cefbcaf23ce1b8d684666d0/main.cpp:#include <future>
/Archive/f451fea83cefbcaf23ce1b8d684666d0/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/f451fea83cefbcaf23ce1b8d684666d0/main.cpp:        auto result = task.get_future();
/Archive/f7e043c20bad4d90c98cca8e8756ba80/main.cpp:#include <future>
/Archive/f7e043c20bad4d90c98cca8e8756ba80/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/f7e043c20bad4d90c98cca8e8756ba80/main.cpp:        auto result = task.get_future();
/Archive/83f41670e33480d8aa339bb2a3dcbd91/main.cpp:#include <future>
/Archive/83f41670e33480d8aa339bb2a3dcbd91/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/83f41670e33480d8aa339bb2a3dcbd91/main.cpp:        auto result = task.get_future();
/Archive/0cf10d29918ec2ea4cbe7529ed381c44/main.cpp:#include <future>
/Archive/0cf10d29918ec2ea4cbe7529ed381c44/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/0cf10d29918ec2ea4cbe7529ed381c44/main.cpp:        return t.get_future();
/Archive/b147d41a09f4ebba538d4c7e85acf724/main.cpp:#include <future>
/Archive/b147d41a09f4ebba538d4c7e85acf724/main.cpp:struct Lazy : std::future<T>
/Archive/b147d41a09f4ebba538d4c7e85acf724/main.cpp:    Lazy(Args && ...args) : std::future<T>(std::forward<Args>(args)...) {}
/Archive/e2f3d1b5194826a6a196a5348d9bd31c/main.cpp:#include <future>
/Archive/6a61def67a3e7c566b3d2059000cfd5c/main.cpp:#include <future>
/Archive/6a61def67a3e7c566b3d2059000cfd5c/main.cpp:        std::future<int> result = task.get_future();
/Archive/a27011b967bdc4614bad1c58e5b8ca21/main.cpp:#include <future>
/Archive/a27011b967bdc4614bad1c58e5b8ca21/main.cpp:        std::future<int> result = task.get_future();
/Archive/2f35c2f17f4d1bffd21f93f4c9dc4b34/main.cpp:#include <future>
/Archive/2f35c2f17f4d1bffd21f93f4c9dc4b34/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/2f35c2f17f4d1bffd21f93f4c9dc4b34/main.cpp:        auto result = task.get_future();
/Archive/c7a3655cb90b57d244fccfe1bed5ee5c/main.cpp:#include <future>
/Archive/c7a3655cb90b57d244fccfe1bed5ee5c/main.cpp:struct Lazy : std::future<T>
/Archive/c7a3655cb90b57d244fccfe1bed5ee5c/main.cpp:    Lazy(Args && ...args) : std::future<T>(std::forward<Args>(args)...) {}
/Archive/b00b56b1b68046c4e2ac58ebe844f480/main.cpp:#include <future>
/Archive/b00b56b1b68046c4e2ac58ebe844f480/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/b00b56b1b68046c4e2ac58ebe844f480/main.cpp:        auto result = task.get_future();
/Archive/0933b00a470aad00600c821f6f78b2fb/main.cpp:#include <future>
/Archive/0933b00a470aad00600c821f6f78b2fb/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/0933b00a470aad00600c821f6f78b2fb/main.cpp:        auto result = task.get_future();
/Archive/1cacda92b23a58168e3e0911a0a75b53/main.cpp:#include <future>
/Archive/1cacda92b23a58168e3e0911a0a75b53/main.cpp:    std::future<Item> get_item()
/Archive/1cacda92b23a58168e3e0911a0a75b53/main.cpp:        std::future<Component> component = get_component();        
/Archive/1cacda92b23a58168e3e0911a0a75b53/main.cpp:        // how to get a std::future<Item> ?
/Archive/1cacda92b23a58168e3e0911a0a75b53/main.cpp:    std::future<Component> get_component();
/Archive/18c4b38e3ff0a4f00817333aca10305c/main.cpp:#include <future>
/Archive/18c4b38e3ff0a4f00817333aca10305c/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/18c4b38e3ff0a4f00817333aca10305c/main.cpp:        auto fut = promisePtr->get_future();
/Archive/18c4b38e3ff0a4f00817333aca10305c/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/91d74ca497843e6096e36e9d066308f5/main.cpp:#include <future>
/Archive/b6686bb1ac581de023d356b6e65fdf46/main.cpp:#include <future>
/Archive/b6686bb1ac581de023d356b6e65fdf46/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/b6686bb1ac581de023d356b6e65fdf46/main.cpp:        return promisePtr->get_future();
/Archive/d823c652c20bfc437dab9a63de89457e-74e72c3042126cc6e08e7eaa81a33c28/main.cpp:boost/thread/future.hpp
/Archive/d823c652c20bfc437dab9a63de89457e-74e72c3042126cc6e08e7eaa81a33c28/main.cpp:boost/thread/future_error_code.hpp
/Archive/55be95b009a4a926e517fb7289e7bc33/main.cpp:#include <future>
/Archive/55be95b009a4a926e517fb7289e7bc33/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/55be95b009a4a926e517fb7289e7bc33/main.cpp:        return promisePtr->get_future();
/Archive/285f235caabf5d1ac2d98f442005b638/main.cpp:#include <future>
/Archive/285f235caabf5d1ac2d98f442005b638/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/285f235caabf5d1ac2d98f442005b638/main.cpp:        auto fut = promisePtr->get_future();
/Archive/285f235caabf5d1ac2d98f442005b638/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/035da93c3af6652c67444e04163096f2/main.cpp:#include <future>
/Archive/035da93c3af6652c67444e04163096f2/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/035da93c3af6652c67444e04163096f2/main.cpp:        auto result = task.get_future();
/Archive/9ed662fcc4f499b4ed08233fc89f5acd/main.cpp:#include <future>
/Archive/9ed662fcc4f499b4ed08233fc89f5acd/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/9ed662fcc4f499b4ed08233fc89f5acd/main.cpp:        return p.get_future();
/Archive/a2f09b0f2625a4b7971bbe4d8ed2ee25/main.cpp:#include <future>
/Archive/a2f09b0f2625a4b7971bbe4d8ed2ee25/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/a2f09b0f2625a4b7971bbe4d8ed2ee25/main.cpp:        return t.get_future();
/Archive/c4cd73d94604c918f6625342ecb901e5/main.cpp:#include <future>
/Archive/75841a37406ff1670deedf5a616f17a3/main.cpp:#include <future>
/Archive/75841a37406ff1670deedf5a616f17a3/main.cpp:    std::future<Item> get_item()
/Archive/75841a37406ff1670deedf5a616f17a3/main.cpp:        return task.get_future();
/Archive/75841a37406ff1670deedf5a616f17a3/main.cpp:    std::future<Component> get_component();
/Archive/1fa8a96768991c58d8f62fd1df24128b/main.cpp:#include <future>
/Archive/1fa8a96768991c58d8f62fd1df24128b/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/1fa8a96768991c58d8f62fd1df24128b/main.cpp:        return promisePtr->get_future();
/Archive/de158b0222d6080627389e10ebcfdad1/main.cpp:#include <future>
/Archive/de158b0222d6080627389e10ebcfdad1/main.cpp:    std::future<Item> get_item()     {
/Archive/de158b0222d6080627389e10ebcfdad1/main.cpp:        std::future<Component> component = get_component();        
/Archive/de158b0222d6080627389e10ebcfdad1/main.cpp:        // how to get a std::future<Item> ?
/Archive/de158b0222d6080627389e10ebcfdad1/main.cpp:    std::future<Component> get_component();
/Archive/aecf4b5255264ca964648031eb1eec3a/main.cpp:#include <future>
/Archive/aecf4b5255264ca964648031eb1eec3a/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/aecf4b5255264ca964648031eb1eec3a/main.cpp:    std::future<Ret> execute(std::function<Ret(T &)> f)
/Archive/aecf4b5255264ca964648031eb1eec3a/main.cpp:        return promisePtr->get_future();
/Archive/dec10e41d1e97b2a68e815b658841085/main.cpp:#include <future>
/Archive/dec10e41d1e97b2a68e815b658841085/main.cpp:// Return values are clumsily encapsulated using std::promise and std::future.
/Archive/dec10e41d1e97b2a68e815b658841085/main.cpp:    auto execute(F f) -> std::future<decltype(f(*static_cast<T*>(nullptr)))>
/Archive/dec10e41d1e97b2a68e815b658841085/main.cpp:        return promisePtr->get_future();
/Archive/cd7a383ee1596876e83b09bd7413276d/main.cpp:#include <future>
/Archive/cd7a383ee1596876e83b09bd7413276d/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/cd7a383ee1596876e83b09bd7413276d/main.cpp:        auto fut = promisePtr->get_future();
/Archive/cd7a383ee1596876e83b09bd7413276d/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/4877076ab6b1bc09b67876f6004070fc/main.cpp:#include <future>
/Archive/4877076ab6b1bc09b67876f6004070fc/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/4877076ab6b1bc09b67876f6004070fc/main.cpp:        return promisePtr->get_future();
/Archive/2fea95d0703a24d86c637dfb31b0e02b/main.cpp:#include <future>
/Archive/2fea95d0703a24d86c637dfb31b0e02b/main.cpp:    std::future<int> result = std::async(std::launch::async, []() -> int {
/Archive/a8fc533f4dc607e6165480dd9e1bc439/main.cpp:        std::future<ResultOf<Fun(T&)>> get_future() const {
/Archive/a8fc533f4dc607e6165480dd9e1bc439/main.cpp:            return promise.get_future();
/Archive/aff95d60cc4423a5ad453cd0d63ae676-4226cd8244e2307d3aaf5b8176027453/main.cpp:boost/thread/future.hpp
/Archive/aff95d60cc4423a5ad453cd0d63ae676-4226cd8244e2307d3aaf5b8176027453/main.cpp:boost/thread/future_error_code.hpp
/Archive/14bfbd760a947296d8baf20e842d2700/main.cpp:#include <future>
/Archive/14bfbd760a947296d8baf20e842d2700/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/14bfbd760a947296d8baf20e842d2700/main.cpp:        auto result = task.get_future();
/Archive/b74c03ce47768cbd229e142bba7658f3/main.cpp:#include <future>
/Archive/b74c03ce47768cbd229e142bba7658f3/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/b74c03ce47768cbd229e142bba7658f3/main.cpp:        return p->get_future();
/Archive/ea8457d8dabd832eccbd42ea81dc2707-a79853206fb8611d963ac29e003d4333/main.cpp:boost/thread/future.hpp
/Archive/ea8457d8dabd832eccbd42ea81dc2707-a79853206fb8611d963ac29e003d4333/main.cpp:boost/thread/future_error_code.hpp
/Archive/78a859e1fd3b337f9c41f600382d5084/main.cpp:#include <future>
/Archive/78a859e1fd3b337f9c41f600382d5084/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/78a859e1fd3b337f9c41f600382d5084/main.cpp:        auto fut = promisePtr->get_future();
/Archive/78a859e1fd3b337f9c41f600382d5084/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/3ac6295dd12c4fb0a1c89ef7e5c44470/main.cpp:#include <future>
/Archive/3ac6295dd12c4fb0a1c89ef7e5c44470/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/3ac6295dd12c4fb0a1c89ef7e5c44470/main.cpp:        auto result = task.get_future();
/Archive/089832f7dacbb2fc2faa35f5ea56fc7c/main.cpp:#include <future>
/Archive/089832f7dacbb2fc2faa35f5ea56fc7c/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/089832f7dacbb2fc2faa35f5ea56fc7c/main.cpp:        auto result = task.get_future();
/Archive/dcb56e8de0957161baeee0f15f47d9d5/main.cpp:    std::future<Ret> execute(const std::function<Ret(const Car &)> & f) const
/Archive/dcb56e8de0957161baeee0f15f47d9d5/main.cpp:        auto fut = promisePtr->get_future();
/Archive/dcb56e8de0957161baeee0f15f47d9d5/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/da356e7663b73a938c9474afcc5f92d3/main.cpp:#include <future>
/Archive/da356e7663b73a938c9474afcc5f92d3/main.cpp:        std::future<int> result = task.get_future();
/Archive/32959a79d05f94ae63b283411559a5f4/main.cpp:#include <future>
/Archive/32959a79d05f94ae63b283411559a5f4/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/32959a79d05f94ae63b283411559a5f4/main.cpp:        auto fut = promisePtr->get_future();
/Archive/32959a79d05f94ae63b283411559a5f4/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/8a35407a50d219a52650e8b948b63a4c/main.cpp:#include <future>
/Archive/8a35407a50d219a52650e8b948b63a4c/main.cpp:std::future<int> Increment(int n)
/Archive/8a35407a50d219a52650e8b948b63a4c/main.cpp:std::future<void> Increment(int n, const Continue & cont)
/Archive/c10989fbfd84feb3c63b9531b9e15b8f/main.cpp:#include <future>
/Archive/c10989fbfd84feb3c63b9531b9e15b8f/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/c10989fbfd84feb3c63b9531b9e15b8f/main.cpp:        auto result = task.get_future();
/Archive/87e68d890feb06306be8599c08483506-0ac8af056d4f48f1edf48b0d68f23e8a/main.cpp:/usr/local/include/c++/4.8.0/future
/Archive/87e68d890feb06306be8599c08483506-0ac8af056d4f48f1edf48b0d68f23e8a/main.cpp:/usr/local/include/boost/thread/future.hpp
/Archive/87e68d890feb06306be8599c08483506-0ac8af056d4f48f1edf48b0d68f23e8a/main.cpp:/usr/local/include/boost/thread/future_error_code.hpp
/Archive/87e68d890feb06306be8599c08483506-0ac8af056d4f48f1edf48b0d68f23e8a/main.cpp:/usr/include/c++/4.6/future
/Archive/87e68d890feb06306be8599c08483506-0ac8af056d4f48f1edf48b0d68f23e8a/main.cpp:/usr/include/c++/4.7/future
/Archive/27bfd5e0a29f087ec7c54d48783efd67/main.cpp:#include <future>
/Archive/27bfd5e0a29f087ec7c54d48783efd67/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/27bfd5e0a29f087ec7c54d48783efd67/main.cpp:        return promisePtr->get_future();
/Archive/45b927a3e8d80acc86f34a5fc5fbdaa9/main.cpp:#include <future>
/Archive/45b927a3e8d80acc86f34a5fc5fbdaa9/main.cpp:        std::future<int> result1 = task1.get_future();
/Archive/45b927a3e8d80acc86f34a5fc5fbdaa9/main.cpp:        std::future<int> result2 = task2.get_future();
/Archive/6cda297307a2d5314610ee1510f571b3/main.cpp:#include <future>
/Archive/c5e02a1a6173a0e7022d387a3834fa93/main.cpp:#include <future>
/Archive/c5e02a1a6173a0e7022d387a3834fa93/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/c5e02a1a6173a0e7022d387a3834fa93/main.cpp:        auto result = task.get_future();
/Archive/2a2b89d4e2961182656c23cfcbde61c3/main.cpp:#include <future>
/Archive/2a2b89d4e2961182656c23cfcbde61c3/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/2a2b89d4e2961182656c23cfcbde61c3/main.cpp:        return promisePtr->get_future();
/Archive/665ae867f4fd7a82d9c8ff461c46dcb6/main.cpp:#include <future>
/Archive/665ae867f4fd7a82d9c8ff461c46dcb6/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/665ae867f4fd7a82d9c8ff461c46dcb6/main.cpp:        return promisePtr->get_future();
/Archive/835f745bf7df7c3a5883ca4859d977d3-2c85efe583576bf41e3cc464e2fd94c3/main.cpp:/usr/local/include/c++/4.8.0/future
/Archive/835f745bf7df7c3a5883ca4859d977d3-2c85efe583576bf41e3cc464e2fd94c3/main.cpp:/usr/local/include/boost/thread/future.hpp
/Archive/835f745bf7df7c3a5883ca4859d977d3-2c85efe583576bf41e3cc464e2fd94c3/main.cpp:/usr/local/include/boost/thread/future_error_code.hpp
/Archive/835f745bf7df7c3a5883ca4859d977d3-2c85efe583576bf41e3cc464e2fd94c3/main.cpp:/usr/include/c++/4.6/future
/Archive/835f745bf7df7c3a5883ca4859d977d3-2c85efe583576bf41e3cc464e2fd94c3/main.cpp:/usr/include/c++/4.7/future
/Archive/ec603d676294552458d995e0b662f8c9/main.cpp:#include <future>
/Archive/ec603d676294552458d995e0b662f8c9/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/ec603d676294552458d995e0b662f8c9/main.cpp:        auto fut = promisePtr->get_future();
/Archive/ec603d676294552458d995e0b662f8c9/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/63c0fde2d287e4dca636f554f223dca9/main.cpp:#include <future>
/Archive/63c0fde2d287e4dca636f554f223dca9/main.cpp:std::future<int> Increment(int n)
/Archive/9e8b61bdedd176b410a2c227db391486/main.cpp:#include <future>
/Archive/9e8b61bdedd176b410a2c227db391486/main.cpp:    std::future<Item> get_item() {
/Archive/9e8b61bdedd176b410a2c227db391486/main.cpp:        return task.get_future();
/Archive/9e8b61bdedd176b410a2c227db391486/main.cpp:    std::future<Component> get_component();
/Archive/c60f352c1857025113ac21d744221091/main.cpp:#include <future>
/Archive/c60f352c1857025113ac21d744221091/main.cpp:    std::future<Ret> execute(const std::function<Ret(const T &)> & f)
/Archive/c60f352c1857025113ac21d744221091/main.cpp:        auto fut = promisePtr->get_future();
/Archive/c60f352c1857025113ac21d744221091/main.cpp:    std::future<unsigned> age = car.execute<unsigned>([](const Car & car) -> unsigned { return car.age(); });    
/Archive/e713e17847fb95a181810f9eb35da356/main.cpp:std::future<Result> do_something()
/Archive/72225b01eb2f5be7abf4e2a3dedd7a70/main.cpp:#include <future>
/Archive/72225b01eb2f5be7abf4e2a3dedd7a70/main.cpp:    auto execute(F f) -> std::future<typename std::result_of<F(T&)>::type>
/Archive/72225b01eb2f5be7abf4e2a3dedd7a70/main.cpp:        return t.get_future();
/Archive/82d5c8932b9fbfdee1c636e6767ffa63/main.cpp:#include <future>
/Archive/82d5c8932b9fbfdee1c636e6767ffa63/main.cpp:    std::future<Result> operator()(Args... args) const {
/Archive/82d5c8932b9fbfdee1c636e6767ffa63/main.cpp:        auto result = task.get_future();
/Archive/da64e40de95e9f67843a9f625ba2bb4b/main.cpp:#include <future>
/Archive/da64e40de95e9f67843a9f625ba2bb4b/main.cpp:std::future<int> Increment(int n)
/Archive/da64e40de95e9f67843a9f625ba2bb4b/main.cpp:std::future<void> Increment(int n, const Continue & cont)
/Archive/835f745bf7df7c3a5883ca4859d977d3-a1da2a742151869cd56a66e458abec9b/main.cpp:/usr/local/include/c++/4.8.0/future
/Archive/835f745bf7df7c3a5883ca4859d977d3-a1da2a742151869cd56a66e458abec9b/main.cpp:/usr/local/include/boost/thread/future.hpp
/Archive/835f745bf7df7c3a5883ca4859d977d3-a1da2a742151869cd56a66e458abec9b/main.cpp:/usr/local/include/boost/thread/future_error_code.hpp
/Archive/835f745bf7df7c3a5883ca4859d977d3-a1da2a742151869cd56a66e458abec9b/main.cpp:/usr/include/c++/4.6/future
/Archive/835f745bf7df7c3a5883ca4859d977d3-a1da2a742151869cd56a66e458abec9b/main.cpp:/usr/include/c++/4.7/future
