test: 0 
mergeRecurse({0 },tmp,0,0)
test: 0 0 
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
test: 0 1 
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
test: 1 0 
mergeRecurse({1 0 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 0 },tmp,1,1)
test: 0 0 0 
mergeRecurse({0 0 0 },tmp,0,2)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 0 },tmp,2,2)
test: 0 0 1 
mergeRecurse({0 0 1 },tmp,0,2)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 1 },tmp,2,2)
test: 0 1 0 
mergeRecurse({0 1 0 },tmp,0,2)
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
mergeRecurse({0 1 0 },tmp,2,2)
test: 1 0 0 
mergeRecurse({1 0 0 },tmp,0,2)
mergeRecurse({1 0 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 0 },tmp,1,1)
mergeRecurse({0 1 0 },tmp,2,2)
test: 0 1 1 
mergeRecurse({0 1 1 },tmp,0,2)
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
mergeRecurse({0 1 1 },tmp,2,2)
test: 1 0 1 
mergeRecurse({1 0 1 },tmp,0,2)
mergeRecurse({1 0 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 0 },tmp,1,1)
mergeRecurse({0 1 1 },tmp,2,2)
test: 1 1 0 
mergeRecurse({1 1 0 },tmp,0,2)
mergeRecurse({1 1 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 1 },tmp,1,1)
mergeRecurse({1 1 0 },tmp,2,2)
test: 0 1 2 
mergeRecurse({0 1 2 },tmp,0,2)
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
mergeRecurse({0 1 2 },tmp,2,2)
test: 0 2 1 
mergeRecurse({0 2 1 },tmp,0,2)
mergeRecurse({0 2 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 2 },tmp,1,1)
mergeRecurse({0 2 1 },tmp,2,2)
test: 1 0 2 
mergeRecurse({1 0 2 },tmp,0,2)
mergeRecurse({1 0 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 0 },tmp,1,1)
mergeRecurse({0 1 2 },tmp,2,2)
test: 1 2 0 
mergeRecurse({1 2 0 },tmp,0,2)
mergeRecurse({1 2 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 2 },tmp,1,1)
mergeRecurse({1 2 0 },tmp,2,2)
test: 2 0 1 
mergeRecurse({2 0 1 },tmp,0,2)
mergeRecurse({2 0 },tmp,0,1)
mergeRecurse({2 },tmp,0,0)
mergeRecurse({2 0 },tmp,1,1)
mergeRecurse({0 2 1 },tmp,2,2)
test: 2 1 0 
mergeRecurse({2 1 0 },tmp,0,2)
mergeRecurse({2 1 },tmp,0,1)
mergeRecurse({2 },tmp,0,0)
mergeRecurse({2 1 },tmp,1,1)
mergeRecurse({1 2 0 },tmp,2,2)
test: 0 0 0 0 
mergeRecurse({0 0 0 0 },tmp,0,3)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 0 0 },tmp,2,3)
mergeRecurse({0 0 0 },tmp,2,2)
mergeRecurse({0 0 0 0 },tmp,3,3)
test: 0 0 0 1 
mergeRecurse({0 0 0 1 },tmp,0,3)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 0 1 },tmp,2,3)
mergeRecurse({0 0 0 },tmp,2,2)
mergeRecurse({0 0 0 1 },tmp,3,3)
test: 0 0 1 0 
mergeRecurse({0 0 1 0 },tmp,0,3)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 1 0 },tmp,2,3)
mergeRecurse({0 0 1 },tmp,2,2)
mergeRecurse({0 0 1 0 },tmp,3,3)
test: 0 1 0 0 
mergeRecurse({0 1 0 0 },tmp,0,3)
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
mergeRecurse({0 1 0 0 },tmp,2,3)
mergeRecurse({0 1 0 },tmp,2,2)
mergeRecurse({0 1 0 0 },tmp,3,3)
test: 1 0 0 0 
mergeRecurse({1 0 0 0 },tmp,0,3)
mergeRecurse({1 0 },tmp,0,1)
mergeRecurse({1 },tmp,0,0)
mergeRecurse({1 0 },tmp,1,1)
mergeRecurse({0 1 0 0 },tmp,2,3)
mergeRecurse({0 1 0 },tmp,2,2)
mergeRecurse({0 1 0 0 },tmp,3,3)
test: 0 0 1 1 
mergeRecurse({0 0 1 1 },tmp,0,3)
mergeRecurse({0 0 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 0 },tmp,1,1)
mergeRecurse({0 0 1 1 },tmp,2,3)
mergeRecurse({0 0 1 },tmp,2,2)
mergeRecurse({0 0 1 1 },tmp,3,3)
test: 0 1 0 1 
mergeRecurse({0 1 0 1 },tmp,0,3)
mergeRecurse({0 1 },tmp,0,1)
mergeRecurse({0 },tmp,0,0)
mergeRecurse({0 1 },tmp,1,1)
mergeRecurse({0 1 0 1 },tmp,2,3)
mergeRecurse({0 1 0 },tmp,2,2)
mergeRecurse({0 1 0 1 },tmp,3,3)
test: main.cpp:62: void do_test(std::vector<int>): Assertion `std::is_sorted(data.begin(), data.end())' failed.
./cmd.sh: line 1: 28578 Aborted                 (core dumped) ./test
