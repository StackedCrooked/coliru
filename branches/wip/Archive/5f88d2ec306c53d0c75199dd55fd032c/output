xargs: `/dev/null': No such file or directory
xargs: `/dev/null': No such file or directory
xargs: grep: terminated by signal 13
/usr/local/include/boost/regex/mfc.hpp:   ATL::CSimpleStringT<SIMPLE_STRING_ARG_LIST> result(s.GetManager());
/usr/local/include/boost/locale/generator.hpp:        class localization_backend_manager;
/usr/local/include/boost/locale/generator.hpp:            /// Create new generator using global localization_backend_manager 
/usr/local/include/boost/locale/generator.hpp:            /// Create new generator using specific localization_backend_manager 
/usr/local/include/boost/locale/generator.hpp:            generator(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:        /// Backends are usually registered inside the localization backends manager and allow transparent support
/usr/local/include/boost/locale/localization_backend.hpp:        /// \brief Localization backend manager is a class that holds various backend and allows creation
/usr/local/include/boost/locale/localization_backend.hpp:        class BOOST_LOCALE_DECL localization_backend_manager {
/usr/local/include/boost/locale/localization_backend.hpp:            /// New empty localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager();
/usr/local/include/boost/locale/localization_backend.hpp:            /// Copy localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            /// Assign localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager const &operator=(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            ~localization_backend_manager();
/usr/local/include/boost/locale/localization_backend.hpp:            /// Add new backend to the manager, each backend should be uniquely defined by its name.
/usr/local/include/boost/locale/localization_backend.hpp:            /// Set new global backend manager, the old one is returned.
/usr/local/include/boost/locale/localization_backend.hpp:            static localization_backend_manager global(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            /// Get global backend manager
/usr/local/include/boost/locale/localization_backend.hpp:            static localization_backend_manager global();
/usr/local/include/boost/container/detail/pool_common.hpp:struct is_stateless_segment_manager
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:template<class SegmentManagerBase, bool AlignOnly = false>
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::void_pointer void_pointer;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   static const typename SegmentManagerBase::
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      size_type PayloadPerAllocation = SegmentManagerBase::PayloadPerAllocation;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::size_type                 size_type;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Segment manager typedef
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef SegmentManagerBase                 segment_manager_base_type;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Constructor from a segment manager. Never throws
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      ( segment_manager_base_type *segment_mngr_base
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Returns the segment manager. Never throws
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   segment_manager_base_type* get_segment_manager_base()const
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      <void_pointer>::template rebind_pointer<segment_manager_base_type>::type   segment_mngr_base_ptr_t;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   segment_mngr_base_ptr_t                mp_segment_mngr_base;   //Segment manager
/usr/local/include/boost/container/detail/node_pool_impl.hpp:template<class SegmentManagerBase>
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::void_pointer              void_pointer;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::size_type                 size_type;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Segment manager typedef
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef SegmentManagerBase segment_manager_base_type;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Constructor from a segment manager. Never throws
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   private_node_pool_impl(segment_manager_base_type *segment_mngr_base, size_type node_size, size_type nodes_per_block)
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Returns the segment manager. Never throws
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   segment_manager_base_type* get_segment_manager_base()const
/usr/local/include/boost/container/detail/node_pool_impl.hpp:      <void_pointer>::template rebind_pointer<segment_manager_base_type>::type   segment_mngr_base_ptr_t;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   segment_mngr_base_ptr_t mp_segment_mngr_base;   //Segment manager
/usr/local/include/boost/config/platform/macos.hpp:// The remote call manager depends on this.
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().exception_point( BOOST_TEST_L(__FILE__), __LINE__, description )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().decision_point( BOOST_TEST_L(__FILE__), __LINE__ )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().generic_data_flow( v )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().generic_return<type>( default_value )
/usr/local/include/boost/test/interaction_based.hpp:// **************                    manager                   ************** //
/usr/local/include/boost/test/interaction_based.hpp:class BOOST_TEST_DECL manager {
/usr/local/include/boost/test/interaction_based.hpp:    static manager&     instance() { return *instance_ptr(); }
/usr/local/include/boost/test/interaction_based.hpp:    manager();
/usr/local/include/boost/test/interaction_based.hpp:    BOOST_TEST_PROTECTED_VIRTUAL ~manager();
/usr/local/include/boost/test/interaction_based.hpp:    explicit manager( dummy_constr* ) {}
/usr/local/include/boost/test/interaction_based.hpp:    static manager*     instance_ptr( bool reset = false, manager* ptr = 0 );
/usr/local/include/boost/test/interaction_based.hpp:}; // manager
/usr/local/include/boost/test/interaction_based.hpp:        m_scope_index = manager::instance().enter_scope( file, line_num, scope_name );
/usr/local/include/boost/test/interaction_based.hpp:        manager::instance().leave_scope( m_scope_index );
/usr/local/include/boost/test/interaction_based.hpp:        ::boost::itest::manager::instance().allocated( l.m_file_name, l.m_line_num, res, s );
/usr/local/include/boost/test/interaction_based.hpp:        ::boost::itest::manager::instance().allocated( l.m_file_name, l.m_line_num, res, s );
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Creates shared memory and creates and places the segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Creates shared memory and creates and places the segment manager if
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         <T2, SegmentManager, NodesPerBlock>  other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator_v1(SegmentManager *segment_mngr,
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         <T2, SegmentManager, NodesPerBlock> &other)
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator(SegmentManager *segment_mngr,
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      (const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef implementation_defined::segment_manager       segment_manager;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef segment_manager::void_pointer                 void_pointer;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef typename SegmentManager::size_type            size_type;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef typename SegmentManager::difference_type      difference_type;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      typedef cached_node_allocator<T2, SegmentManager> other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   template<class T2, class SegmentManager2, std::size_t N2>
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      (const cached_node_allocator<T2, SegmentManager2, N2>&);
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   //!Constructor from a segment manager. If not present, constructs a node
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator(segment_manager *segment_mngr);
