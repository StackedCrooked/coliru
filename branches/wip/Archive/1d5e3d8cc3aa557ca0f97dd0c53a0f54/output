xargs: `/dev/null': No such file or directory
xargs: `/dev/null': No such file or directory
xargs: grep: terminated by signal 13
/usr/local/include/boost/regex/mfc.hpp:   ATL::CSimpleStringT<SIMPLE_STRING_ARG_LIST> result(s.GetManager());
/usr/local/include/boost/locale/generator.hpp:        class localization_backend_manager;
/usr/local/include/boost/locale/generator.hpp:            /// Create new generator using global localization_backend_manager 
/usr/local/include/boost/locale/generator.hpp:            /// Create new generator using specific localization_backend_manager 
/usr/local/include/boost/locale/generator.hpp:            generator(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:        /// Backends are usually registered inside the localization backends manager and allow transparent support
/usr/local/include/boost/locale/localization_backend.hpp:        /// \brief Localization backend manager is a class that holds various backend and allows creation
/usr/local/include/boost/locale/localization_backend.hpp:        class BOOST_LOCALE_DECL localization_backend_manager {
/usr/local/include/boost/locale/localization_backend.hpp:            /// New empty localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager();
/usr/local/include/boost/locale/localization_backend.hpp:            /// Copy localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            /// Assign localization_backend_manager 
/usr/local/include/boost/locale/localization_backend.hpp:            localization_backend_manager const &operator=(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            ~localization_backend_manager();
/usr/local/include/boost/locale/localization_backend.hpp:            /// Add new backend to the manager, each backend should be uniquely defined by its name.
/usr/local/include/boost/locale/localization_backend.hpp:            /// Set new global backend manager, the old one is returned.
/usr/local/include/boost/locale/localization_backend.hpp:            static localization_backend_manager global(localization_backend_manager const &);
/usr/local/include/boost/locale/localization_backend.hpp:            /// Get global backend manager
/usr/local/include/boost/locale/localization_backend.hpp:            static localization_backend_manager global();
/usr/local/include/boost/container/detail/pool_common.hpp:struct is_stateless_segment_manager
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:template<class SegmentManagerBase, bool AlignOnly = false>
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::void_pointer void_pointer;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   static const typename SegmentManagerBase::
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      size_type PayloadPerAllocation = SegmentManagerBase::PayloadPerAllocation;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef typename SegmentManagerBase::size_type                 size_type;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Segment manager typedef
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   typedef SegmentManagerBase                 segment_manager_base_type;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Constructor from a segment manager. Never throws
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      ( segment_manager_base_type *segment_mngr_base
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   //!Returns the segment manager. Never throws
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   segment_manager_base_type* get_segment_manager_base()const
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:      <void_pointer>::template rebind_pointer<segment_manager_base_type>::type   segment_mngr_base_ptr_t;
/usr/local/include/boost/container/detail/adaptive_node_pool_impl.hpp:   segment_mngr_base_ptr_t                mp_segment_mngr_base;   //Segment manager
/usr/local/include/boost/container/detail/node_pool_impl.hpp:template<class SegmentManagerBase>
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::void_pointer              void_pointer;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef typename SegmentManagerBase::size_type                 size_type;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Segment manager typedef
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   typedef SegmentManagerBase segment_manager_base_type;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Constructor from a segment manager. Never throws
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   private_node_pool_impl(segment_manager_base_type *segment_mngr_base, size_type node_size, size_type nodes_per_block)
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   //!Returns the segment manager. Never throws
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   segment_manager_base_type* get_segment_manager_base()const
/usr/local/include/boost/container/detail/node_pool_impl.hpp:      <void_pointer>::template rebind_pointer<segment_manager_base_type>::type   segment_mngr_base_ptr_t;
/usr/local/include/boost/container/detail/node_pool_impl.hpp:   segment_mngr_base_ptr_t mp_segment_mngr_base;   //Segment manager
/usr/local/include/boost/config/platform/macos.hpp:// The remote call manager depends on this.
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().exception_point( BOOST_TEST_L(__FILE__), __LINE__, description )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().decision_point( BOOST_TEST_L(__FILE__), __LINE__ )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().generic_data_flow( v )
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().generic_return<type>( default_value )
/usr/local/include/boost/test/interaction_based.hpp:// **************                    manager                   ************** //
/usr/local/include/boost/test/interaction_based.hpp:class BOOST_TEST_DECL manager {
/usr/local/include/boost/test/interaction_based.hpp:    static manager&     instance() { return *instance_ptr(); }
/usr/local/include/boost/test/interaction_based.hpp:    manager();
/usr/local/include/boost/test/interaction_based.hpp:    BOOST_TEST_PROTECTED_VIRTUAL ~manager();
/usr/local/include/boost/test/interaction_based.hpp:    explicit manager( dummy_constr* ) {}
/usr/local/include/boost/test/interaction_based.hpp:    static manager*     instance_ptr( bool reset = false, manager* ptr = 0 );
/usr/local/include/boost/test/interaction_based.hpp:}; // manager
/usr/local/include/boost/test/interaction_based.hpp:        m_scope_index = manager::instance().enter_scope( file, line_num, scope_name );
/usr/local/include/boost/test/interaction_based.hpp:        manager::instance().leave_scope( m_scope_index );
/usr/local/include/boost/test/interaction_based.hpp:        ::boost::itest::manager::instance().allocated( l.m_file_name, l.m_line_num, res, s );
/usr/local/include/boost/test/interaction_based.hpp:        ::boost::itest::manager::instance().allocated( l.m_file_name, l.m_line_num, res, s );
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/interaction_based.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:        ::boost::itest::manager::instance().allocated( 0, 0, res, s );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/test/exception_safety.hpp:    ::boost::itest::manager::instance().freed( p );
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Creates shared memory and creates and places the segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Creates shared memory and creates and places the segment manager if
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/managed_shared_memory.hpp:   //!Connects to a created shared memory and its segment manager.
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         <T2, SegmentManager, NodesPerBlock>  other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator_v1(SegmentManager *segment_mngr,
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         <T2, SegmentManager, NodesPerBlock> &other)
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:            < SegmentManager
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator(SegmentManager *segment_mngr,
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      (const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef implementation_defined::segment_manager       segment_manager;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef segment_manager::void_pointer                 void_pointer;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef typename SegmentManager::size_type            size_type;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   typedef typename SegmentManager::difference_type      difference_type;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      typedef cached_node_allocator<T2, SegmentManager> other;
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   template<class T2, class SegmentManager2, std::size_t N2>
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      (const cached_node_allocator<T2, SegmentManager2, N2>&);
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   //!Constructor from a segment manager. If not present, constructs a node
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   cached_node_allocator(segment_manager *segment_mngr);
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:      (const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other);
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   //!Returns the segment manager.
/usr/local/include/boost/interprocess/allocators/cached_node_allocator.hpp:   segment_manager* get_segment_manager()const;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      < Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   , SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef typename SegmentManager::void_pointer         void_pointer;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef SegmentManager                                segment_manager;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      <Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   self_t;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      < SegmentManager, sizeof_value<T>::value, NodesPerBlock, MaxFreeBlocks, OverheadPercent> type;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef typename segment_manager::size_type           size_type;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef typename segment_manager::difference_type     difference_type;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      typedef adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>       other;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   template<unsigned int Version2, class T2, class SegmentManager2, std::size_t N2, std::size_t F2, unsigned char O2>
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool_base<Version2, T2, SegmentManager2, N2, F2, O2>&);
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   //!Constructor from a segment manager. If not present, constructs a node
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   adaptive_pool_base(segment_manager *segment_mngr)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      : mp_node_pool(ipcdetail::get_or_create_node_pool<typename node_pool<0>::type>(other.get_segment_manager())) { }
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   //!Returns the segment manager.
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   segment_manager* get_segment_manager()const
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   {  return node_pool<0>::get(ipcdetail::to_raw_pointer(mp_node_pool))->get_segment_manager();  }
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         , SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      typedef adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   adaptive_pool_v1(SegmentManager *segment_mngr)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp://!An STL node allocator that uses a segment manager as memory
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp://!"typename SegmentManager::void_pointer" type. This allows
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp://!deallocated with the segment manager.
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp://!(memory usable for nodes / total memory allocated from the segment manager)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         , class SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         , SegmentManager
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   adaptive_pool(SegmentManager *segment_mngr)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef implementation_defined::segment_manager       segment_manager;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef segment_manager::void_pointer                 void_pointer;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef typename segment_manager::size_type           size_type;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   typedef typename segment_manager::difference_type     difference_type;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> other;
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   template<class T2, class SegmentManager2, std::size_t N2, std::size_t F2, unsigned char OP2>
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool<T2, SegmentManager2, N2, F2, OP2>&);
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   //!Constructor from a segment manager. If not present, constructs a node
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   adaptive_pool(segment_manager *segment_mngr);
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:      (const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other);
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   //!Returns the segment manager.
/usr/local/include/boost/interprocess/allocators/adaptive_pool.hpp:   segment_manager* get_segment_manager()const;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:#include <boost/interprocess/detail/segment_manager_helper.hpp>
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      mp_node_pool =    mp_segment_manager->template find_or_construct
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:                        <NodePool>(boost::interprocess::unique_instance)(mp_segment_manager);
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   get_or_create_node_pool_func(typename NodePool::segment_manager *mngr)
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      : mp_segment_manager(mngr){}
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typename NodePool::segment_manager  *mp_segment_manager;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:inline NodePool *get_or_create_node_pool(typename NodePool::segment_manager *mgnr)
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      //Last link, let's destroy the segment_manager
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      mp_node_pool->get_segment_manager()->template destroy<NodePool>(boost::interprocess::unique_instance);
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   //Get segment manager
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typename NodePool::segment_manager *mngr = pool->get_segment_manager();
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename NodePool::segment_manager::
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename NodePool::segment_manager::size_type    size_type;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename NodePool::segment_manager            segment_manager;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   cache_impl(segment_manager *segment_mngr, size_type max_cached_nodes)
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   segment_manager *get_segment_manager() const
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   {  return mp_node_pool->get_segment_manager(); }
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:template<class Derived, class T, class SegmentManager>
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::void_pointer         void_pointer;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::size_type            size_type;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::difference_type      difference_type;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      return (size_type)this->derived()->get_segment_manager()->size(ipcdetail::to_raw_pointer(p))/sizeof(T);
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      return this->derived()->get_segment_manager()->allocation_command
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      return this->derived()->get_segment_manager()->allocate_many(elem_size*sizeof(T), num_elements);
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      return this->derived()->get_segment_manager()->allocate_many(elem_sizes, n_elements, sizeof(T));
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   {  return this->derived()->get_segment_manager()->deallocate_many(boost::move(chain)); }
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   {  return this->derived()->get_segment_manager()->get_size()/sizeof(T);  }
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:template<class Derived, unsigned int Version, class T, class SegmentManager>
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      , SegmentManager>
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::void_pointer         void_pointer;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::size_type            size_type;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename SegmentManager::difference_type      difference_type;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:            (pool->get_segment_manager()->allocate(count*sizeof(T))));
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:         pool->get_segment_manager()->deallocate((void*)ipcdetail::to_raw_pointer(ptr));
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:         <cached_allocator_impl<T, NodePool, Version>, T, typename NodePool::segment_manager>
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:         , typename NodePool::segment_manager> base_t;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename NodePool::segment_manager            segment_manager;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   typedef typename segment_manager::void_pointer        void_pointer;
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   cached_allocator_impl(segment_manager *segment_mngr, size_type max_cached_nodes)
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      : m_cache(other.get_segment_manager(), other.get_max_cached_nodes())
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   //!Returns the segment manager.
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   segment_manager* get_segment_manager()const
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   {  return m_cache.get_segment_manager();   }
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:         ret = this->get_segment_manager()->allocate(count*sizeof(T));
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:         this->get_segment_manager()->deallocate((void*)ipcdetail::to_raw_pointer(ptr));
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:   //!Segment manager typedef
/usr/local/include/boost/interprocess/allocators/detail/allocator_common.hpp:      segment_manager                           segment_manager;
